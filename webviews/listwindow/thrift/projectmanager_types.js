//
// Autogenerated by Thrift Compiler (0.14.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
if (typeof Int64 === 'undefined' && typeof require === 'function') {
  var Int64 = require('node-int64');
}


var ttypes = module.exports = {};
ttypes.ToolType = {
  '1' : 'Compiler',
  'Compiler' : 1,
  '2' : 'Assembler',
  'Assembler' : 2,
  '3' : 'Linker',
  'Linker' : 3,
  '4' : 'Archiver',
  'Archiver' : 4,
  '5' : 'Other',
  'Other' : 5
};
ttypes.InvocationType = {
  '1' : 'SingleInput',
  'SingleInput' : 1,
  '2' : 'MultiInput',
  'MultiInput' : 2
};
ttypes.NodeType = {
  '0' : 'Invalid',
  'Invalid' : 0,
  '1' : 'Group',
  'Group' : 1,
  '2' : 'File',
  'File' : 2,
  '3' : 'ControlFile',
  'ControlFile' : 3
};
ttypes.OptionType = {
  '0' : 'Check',
  'Check' : 0,
  '1' : 'Edit',
  'Edit' : 1,
  '2' : 'EditB',
  'EditB' : 2,
  '3' : 'List',
  'List' : 3,
  '4' : 'Radio',
  'Radio' : 4,
  '5' : 'CheckList',
  'CheckList' : 5,
  '6' : 'BuildActions',
  'BuildActions' : 6
};
ttypes.FileCollectionType = {
  '0' : 'ProjFiles',
  'ProjFiles' : 0,
  '1' : 'ProjAndUserIncludeFiles',
  'ProjAndUserIncludeFiles' : 1,
  '2' : 'ProjAndAllIncludeFiles',
  'ProjAndAllIncludeFiles' : 2,
  '3' : 'WsFiles',
  'WsFiles' : 3,
  '4' : 'WsAndUserIncludeFiles',
  'WsAndUserIncludeFiles' : 4,
  '5' : 'WsAndAllIncludeFiles',
  'WsAndAllIncludeFiles' : 5
};
ttypes.DesktopPathPlatform = {
  '0' : 'Mfc',
  'Mfc' : 0,
  '1' : 'Qt',
  'Qt' : 1
};
ttypes.DesktopPathSlavery = {
  '0' : 'Master',
  'Master' : 0,
  '1' : 'Slave',
  'Slave' : 1
};
var ProjectManagerError = module.exports.ProjectManagerError = function(args) {
  this.description = null;
  if (args) {
    if (args.description !== undefined && args.description !== null) {
      this.description = args.description;
    }
  }
};
Thrift.inherits(ProjectManagerError, Thrift.TException);
ProjectManagerError.prototype.name = 'ProjectManagerError';
ProjectManagerError.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.description = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManagerError.prototype.write = function(output) {
  output.writeStructBegin('ProjectManagerError');
  if (this.description !== null && this.description !== undefined) {
    output.writeFieldBegin('description', Thrift.Type.STRING, 1);
    output.writeString(this.description);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ToolDefinition = module.exports.ToolDefinition = function(args) {
  this.id = null;
  this.name = null;
  this.executableName = null;
  this.inputExtensions = null;
  this.outputExtensions = null;
  this.hiddenOutputExtensions = null;
  this.toolType = null;
  this.invocationType = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.executableName !== undefined && args.executableName !== null) {
      this.executableName = args.executableName;
    }
    if (args.inputExtensions !== undefined && args.inputExtensions !== null) {
      this.inputExtensions = Thrift.copyList(args.inputExtensions, [null]);
    }
    if (args.outputExtensions !== undefined && args.outputExtensions !== null) {
      this.outputExtensions = Thrift.copyList(args.outputExtensions, [null]);
    }
    if (args.hiddenOutputExtensions !== undefined && args.hiddenOutputExtensions !== null) {
      this.hiddenOutputExtensions = Thrift.copyList(args.hiddenOutputExtensions, [null]);
    }
    if (args.toolType !== undefined && args.toolType !== null) {
      this.toolType = args.toolType;
    }
    if (args.invocationType !== undefined && args.invocationType !== null) {
      this.invocationType = args.invocationType;
    }
  }
};
ToolDefinition.prototype = {};
ToolDefinition.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.executableName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        this.inputExtensions = [];
        var _rtmp31 = input.readListBegin();
        var _size0 = _rtmp31.size || 0;
        for (var _i2 = 0; _i2 < _size0; ++_i2) {
          var elem3 = null;
          elem3 = input.readString().value;
          this.inputExtensions.push(elem3);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        this.outputExtensions = [];
        var _rtmp35 = input.readListBegin();
        var _size4 = _rtmp35.size || 0;
        for (var _i6 = 0; _i6 < _size4; ++_i6) {
          var elem7 = null;
          elem7 = input.readString().value;
          this.outputExtensions.push(elem7);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.LIST) {
        this.hiddenOutputExtensions = [];
        var _rtmp39 = input.readListBegin();
        var _size8 = _rtmp39.size || 0;
        for (var _i10 = 0; _i10 < _size8; ++_i10) {
          var elem11 = null;
          elem11 = input.readString().value;
          this.hiddenOutputExtensions.push(elem11);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.toolType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I32) {
        this.invocationType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ToolDefinition.prototype.write = function(output) {
  output.writeStructBegin('ToolDefinition');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.executableName !== null && this.executableName !== undefined) {
    output.writeFieldBegin('executableName', Thrift.Type.STRING, 3);
    output.writeString(this.executableName);
    output.writeFieldEnd();
  }
  if (this.inputExtensions !== null && this.inputExtensions !== undefined) {
    output.writeFieldBegin('inputExtensions', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRING, this.inputExtensions.length);
    for (var iter12 in this.inputExtensions) {
      if (this.inputExtensions.hasOwnProperty(iter12)) {
        iter12 = this.inputExtensions[iter12];
        output.writeString(iter12);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.outputExtensions !== null && this.outputExtensions !== undefined) {
    output.writeFieldBegin('outputExtensions', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRING, this.outputExtensions.length);
    for (var iter13 in this.outputExtensions) {
      if (this.outputExtensions.hasOwnProperty(iter13)) {
        iter13 = this.outputExtensions[iter13];
        output.writeString(iter13);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.hiddenOutputExtensions !== null && this.hiddenOutputExtensions !== undefined) {
    output.writeFieldBegin('hiddenOutputExtensions', Thrift.Type.LIST, 6);
    output.writeListBegin(Thrift.Type.STRING, this.hiddenOutputExtensions.length);
    for (var iter14 in this.hiddenOutputExtensions) {
      if (this.hiddenOutputExtensions.hasOwnProperty(iter14)) {
        iter14 = this.hiddenOutputExtensions[iter14];
        output.writeString(iter14);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.toolType !== null && this.toolType !== undefined) {
    output.writeFieldBegin('toolType', Thrift.Type.I32, 7);
    output.writeI32(this.toolType);
    output.writeFieldEnd();
  }
  if (this.invocationType !== null && this.invocationType !== undefined) {
    output.writeFieldBegin('invocationType', Thrift.Type.I32, 8);
    output.writeI32(this.invocationType);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Toolchain = module.exports.Toolchain = function(args) {
  this.id = null;
  this.name = null;
  this.tools = null;
  this.toolkitDir = null;
  this.templatesDir = null;
  this.modifiable = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.tools !== undefined && args.tools !== null) {
      this.tools = Thrift.copyList(args.tools, [ttypes.ToolDefinition]);
    }
    if (args.toolkitDir !== undefined && args.toolkitDir !== null) {
      this.toolkitDir = args.toolkitDir;
    }
    if (args.templatesDir !== undefined && args.templatesDir !== null) {
      this.templatesDir = args.templatesDir;
    }
    if (args.modifiable !== undefined && args.modifiable !== null) {
      this.modifiable = args.modifiable;
    }
  }
};
Toolchain.prototype = {};
Toolchain.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        this.tools = [];
        var _rtmp316 = input.readListBegin();
        var _size15 = _rtmp316.size || 0;
        for (var _i17 = 0; _i17 < _size15; ++_i17) {
          var elem18 = null;
          elem18 = new ttypes.ToolDefinition();
          elem18.read(input);
          this.tools.push(elem18);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.toolkitDir = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.templatesDir = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.modifiable = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Toolchain.prototype.write = function(output) {
  output.writeStructBegin('Toolchain');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.tools !== null && this.tools !== undefined) {
    output.writeFieldBegin('tools', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.tools.length);
    for (var iter19 in this.tools) {
      if (this.tools.hasOwnProperty(iter19)) {
        iter19 = this.tools[iter19];
        iter19.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.toolkitDir !== null && this.toolkitDir !== undefined) {
    output.writeFieldBegin('toolkitDir', Thrift.Type.STRING, 4);
    output.writeString(this.toolkitDir);
    output.writeFieldEnd();
  }
  if (this.templatesDir !== null && this.templatesDir !== undefined) {
    output.writeFieldBegin('templatesDir', Thrift.Type.STRING, 5);
    output.writeString(this.templatesDir);
    output.writeFieldEnd();
  }
  if (this.modifiable !== null && this.modifiable !== undefined) {
    output.writeFieldBegin('modifiable', Thrift.Type.BOOL, 6);
    output.writeBool(this.modifiable);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Configuration = module.exports.Configuration = function(args) {
  this.name = null;
  this.toolchainId = null;
  this.isDebug = null;
  this.isControlFileManaged = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.toolchainId !== undefined && args.toolchainId !== null) {
      this.toolchainId = args.toolchainId;
    }
    if (args.isDebug !== undefined && args.isDebug !== null) {
      this.isDebug = args.isDebug;
    }
    if (args.isControlFileManaged !== undefined && args.isControlFileManaged !== null) {
      this.isControlFileManaged = args.isControlFileManaged;
    }
  }
};
Configuration.prototype = {};
Configuration.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.toolchainId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.isDebug = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.isControlFileManaged = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Configuration.prototype.write = function(output) {
  output.writeStructBegin('Configuration');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.toolchainId !== null && this.toolchainId !== undefined) {
    output.writeFieldBegin('toolchainId', Thrift.Type.STRING, 2);
    output.writeString(this.toolchainId);
    output.writeFieldEnd();
  }
  if (this.isDebug !== null && this.isDebug !== undefined) {
    output.writeFieldBegin('isDebug', Thrift.Type.BOOL, 3);
    output.writeBool(this.isDebug);
    output.writeFieldEnd();
  }
  if (this.isControlFileManaged !== null && this.isControlFileManaged !== undefined) {
    output.writeFieldBegin('isControlFileManaged', Thrift.Type.BOOL, 4);
    output.writeBool(this.isControlFileManaged);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var WorkspaceContext = module.exports.WorkspaceContext = function(args) {
  this.filename = null;
  if (args) {
    if (args.filename !== undefined && args.filename !== null) {
      this.filename = args.filename;
    }
  }
};
WorkspaceContext.prototype = {};
WorkspaceContext.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.filename = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

WorkspaceContext.prototype.write = function(output) {
  output.writeStructBegin('WorkspaceContext');
  if (this.filename !== null && this.filename !== undefined) {
    output.writeFieldBegin('filename', Thrift.Type.STRING, 1);
    output.writeString(this.filename);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectContext = module.exports.ProjectContext = function(args) {
  this.filename = null;
  if (args) {
    if (args.filename !== undefined && args.filename !== null) {
      this.filename = args.filename;
    }
  }
};
ProjectContext.prototype = {};
ProjectContext.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.filename = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectContext.prototype.write = function(output) {
  output.writeStructBegin('ProjectContext');
  if (this.filename !== null && this.filename !== undefined) {
    output.writeFieldBegin('filename', Thrift.Type.STRING, 1);
    output.writeString(this.filename);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Node = module.exports.Node = function(args) {
  this.name = null;
  this.children = null;
  this.type = null;
  this.path = null;
  this.isMfcEnabled = null;
  this.isExcludedFromBuild = null;
  this.hasLocalSettings = null;
  this.hasRelevantSettings = null;
  this.childrenHaveLocalSettings = null;
  this.isGenerated = null;
  this.controlFilePlugins = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.children !== undefined && args.children !== null) {
      this.children = Thrift.copyList(args.children, [null]);
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
    if (args.path !== undefined && args.path !== null) {
      this.path = args.path;
    }
    if (args.isMfcEnabled !== undefined && args.isMfcEnabled !== null) {
      this.isMfcEnabled = args.isMfcEnabled;
    }
    if (args.isExcludedFromBuild !== undefined && args.isExcludedFromBuild !== null) {
      this.isExcludedFromBuild = args.isExcludedFromBuild;
    }
    if (args.hasLocalSettings !== undefined && args.hasLocalSettings !== null) {
      this.hasLocalSettings = args.hasLocalSettings;
    }
    if (args.hasRelevantSettings !== undefined && args.hasRelevantSettings !== null) {
      this.hasRelevantSettings = args.hasRelevantSettings;
    }
    if (args.childrenHaveLocalSettings !== undefined && args.childrenHaveLocalSettings !== null) {
      this.childrenHaveLocalSettings = args.childrenHaveLocalSettings;
    }
    if (args.isGenerated !== undefined && args.isGenerated !== null) {
      this.isGenerated = args.isGenerated;
    }
    if (args.controlFilePlugins !== undefined && args.controlFilePlugins !== null) {
      this.controlFilePlugins = Thrift.copyList(args.controlFilePlugins, [null]);
    }
  }
};
Node.prototype = {};
Node.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.children = [];
        var _rtmp321 = input.readListBegin();
        var _size20 = _rtmp321.size || 0;
        for (var _i22 = 0; _i22 < _size20; ++_i22) {
          var elem23 = null;
          elem23 = new ttypes.Node();
          elem23.read(input);
          this.children.push(elem23);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.path = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.isMfcEnabled = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.isExcludedFromBuild = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.BOOL) {
        this.hasLocalSettings = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.BOOL) {
        this.hasRelevantSettings = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.BOOL) {
        this.childrenHaveLocalSettings = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.BOOL) {
        this.isGenerated = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.LIST) {
        this.controlFilePlugins = [];
        var _rtmp325 = input.readListBegin();
        var _size24 = _rtmp325.size || 0;
        for (var _i26 = 0; _i26 < _size24; ++_i26) {
          var elem27 = null;
          elem27 = input.readString().value;
          this.controlFilePlugins.push(elem27);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Node.prototype.write = function(output) {
  output.writeStructBegin('Node');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.children !== null && this.children !== undefined) {
    output.writeFieldBegin('children', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.children.length);
    for (var iter28 in this.children) {
      if (this.children.hasOwnProperty(iter28)) {
        iter28 = this.children[iter28];
        iter28.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 3);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.path !== null && this.path !== undefined) {
    output.writeFieldBegin('path', Thrift.Type.STRING, 4);
    output.writeString(this.path);
    output.writeFieldEnd();
  }
  if (this.isMfcEnabled !== null && this.isMfcEnabled !== undefined) {
    output.writeFieldBegin('isMfcEnabled', Thrift.Type.BOOL, 5);
    output.writeBool(this.isMfcEnabled);
    output.writeFieldEnd();
  }
  if (this.isExcludedFromBuild !== null && this.isExcludedFromBuild !== undefined) {
    output.writeFieldBegin('isExcludedFromBuild', Thrift.Type.BOOL, 6);
    output.writeBool(this.isExcludedFromBuild);
    output.writeFieldEnd();
  }
  if (this.hasLocalSettings !== null && this.hasLocalSettings !== undefined) {
    output.writeFieldBegin('hasLocalSettings', Thrift.Type.BOOL, 7);
    output.writeBool(this.hasLocalSettings);
    output.writeFieldEnd();
  }
  if (this.hasRelevantSettings !== null && this.hasRelevantSettings !== undefined) {
    output.writeFieldBegin('hasRelevantSettings', Thrift.Type.BOOL, 8);
    output.writeBool(this.hasRelevantSettings);
    output.writeFieldEnd();
  }
  if (this.childrenHaveLocalSettings !== null && this.childrenHaveLocalSettings !== undefined) {
    output.writeFieldBegin('childrenHaveLocalSettings', Thrift.Type.BOOL, 9);
    output.writeBool(this.childrenHaveLocalSettings);
    output.writeFieldEnd();
  }
  if (this.isGenerated !== null && this.isGenerated !== undefined) {
    output.writeFieldBegin('isGenerated', Thrift.Type.BOOL, 10);
    output.writeBool(this.isGenerated);
    output.writeFieldEnd();
  }
  if (this.controlFilePlugins !== null && this.controlFilePlugins !== undefined) {
    output.writeFieldBegin('controlFilePlugins', Thrift.Type.LIST, 11);
    output.writeListBegin(Thrift.Type.STRING, this.controlFilePlugins.length);
    for (var iter29 in this.controlFilePlugins) {
      if (this.controlFilePlugins.hasOwnProperty(iter29)) {
        iter29 = this.controlFilePlugins[iter29];
        output.writeString(iter29);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var BuildNode = module.exports.BuildNode = function(args) {
  this.input = null;
  this.output = null;
  this.arguments = null;
  this.directory = null;
  this.toolName = null;
  if (args) {
    if (args.input !== undefined && args.input !== null) {
      this.input = Thrift.copyList(args.input, [null]);
    }
    if (args.output !== undefined && args.output !== null) {
      this.output = Thrift.copyList(args.output, [null]);
    }
    if (args.arguments !== undefined && args.arguments !== null) {
      this.arguments = Thrift.copyList(args.arguments, [null]);
    }
    if (args.directory !== undefined && args.directory !== null) {
      this.directory = args.directory;
    }
    if (args.toolName !== undefined && args.toolName !== null) {
      this.toolName = args.toolName;
    }
  }
};
BuildNode.prototype = {};
BuildNode.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.input = [];
        var _rtmp331 = input.readListBegin();
        var _size30 = _rtmp331.size || 0;
        for (var _i32 = 0; _i32 < _size30; ++_i32) {
          var elem33 = null;
          elem33 = input.readString().value;
          this.input.push(elem33);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.output = [];
        var _rtmp335 = input.readListBegin();
        var _size34 = _rtmp335.size || 0;
        for (var _i36 = 0; _i36 < _size34; ++_i36) {
          var elem37 = null;
          elem37 = input.readString().value;
          this.output.push(elem37);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        this.arguments = [];
        var _rtmp339 = input.readListBegin();
        var _size38 = _rtmp339.size || 0;
        for (var _i40 = 0; _i40 < _size38; ++_i40) {
          var elem41 = null;
          elem41 = input.readString().value;
          this.arguments.push(elem41);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.directory = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.toolName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuildNode.prototype.write = function(output) {
  output.writeStructBegin('BuildNode');
  if (this.input !== null && this.input !== undefined) {
    output.writeFieldBegin('input', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.input.length);
    for (var iter42 in this.input) {
      if (this.input.hasOwnProperty(iter42)) {
        iter42 = this.input[iter42];
        output.writeString(iter42);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.output !== null && this.output !== undefined) {
    output.writeFieldBegin('output', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.output.length);
    for (var iter43 in this.output) {
      if (this.output.hasOwnProperty(iter43)) {
        iter43 = this.output[iter43];
        output.writeString(iter43);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.arguments !== null && this.arguments !== undefined) {
    output.writeFieldBegin('arguments', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.arguments.length);
    for (var iter44 in this.arguments) {
      if (this.arguments.hasOwnProperty(iter44)) {
        iter44 = this.arguments[iter44];
        output.writeString(iter44);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.directory !== null && this.directory !== undefined) {
    output.writeFieldBegin('directory', Thrift.Type.STRING, 4);
    output.writeString(this.directory);
    output.writeFieldEnd();
  }
  if (this.toolName !== null && this.toolName !== undefined) {
    output.writeFieldBegin('toolName', Thrift.Type.STRING, 5);
    output.writeString(this.toolName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OptionElementDescription = module.exports.OptionElementDescription = function(args) {
  this.id = null;
  this.label = null;
  this.enabled = null;
  this.data = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.label !== undefined && args.label !== null) {
      this.label = args.label;
    }
    if (args.enabled !== undefined && args.enabled !== null) {
      this.enabled = args.enabled;
    }
    if (args.data !== undefined && args.data !== null) {
      this.data = args.data;
    }
  }
};
OptionElementDescription.prototype = {};
OptionElementDescription.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.label = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.enabled = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.data = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OptionElementDescription.prototype.write = function(output) {
  output.writeStructBegin('OptionElementDescription');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.label !== null && this.label !== undefined) {
    output.writeFieldBegin('label', Thrift.Type.STRING, 2);
    output.writeString(this.label);
    output.writeFieldEnd();
  }
  if (this.enabled !== null && this.enabled !== undefined) {
    output.writeFieldBegin('enabled', Thrift.Type.BOOL, 3);
    output.writeBool(this.enabled);
    output.writeFieldEnd();
  }
  if (this.data !== null && this.data !== undefined) {
    output.writeFieldBegin('data', Thrift.Type.STRING, 4);
    output.writeString(this.data);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OptionDescription = module.exports.OptionDescription = function(args) {
  this.id = null;
  this.value = null;
  this.type = null;
  this.elements = null;
  this.enabled = null;
  this.visible = null;
  this.canBeLocal = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.value !== undefined && args.value !== null) {
      this.value = args.value;
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
    if (args.elements !== undefined && args.elements !== null) {
      this.elements = Thrift.copyList(args.elements, [ttypes.OptionElementDescription]);
    }
    if (args.enabled !== undefined && args.enabled !== null) {
      this.enabled = args.enabled;
    }
    if (args.visible !== undefined && args.visible !== null) {
      this.visible = args.visible;
    }
    if (args.canBeLocal !== undefined && args.canBeLocal !== null) {
      this.canBeLocal = args.canBeLocal;
    }
  }
};
OptionDescription.prototype = {};
OptionDescription.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.value = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        this.elements = [];
        var _rtmp346 = input.readListBegin();
        var _size45 = _rtmp346.size || 0;
        for (var _i47 = 0; _i47 < _size45; ++_i47) {
          var elem48 = null;
          elem48 = new ttypes.OptionElementDescription();
          elem48.read(input);
          this.elements.push(elem48);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.enabled = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.visible = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.BOOL) {
        this.canBeLocal = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OptionDescription.prototype.write = function(output) {
  output.writeStructBegin('OptionDescription');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.STRING, 2);
    output.writeString(this.value);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 3);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.elements !== null && this.elements !== undefined) {
    output.writeFieldBegin('elements', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.elements.length);
    for (var iter49 in this.elements) {
      if (this.elements.hasOwnProperty(iter49)) {
        iter49 = this.elements[iter49];
        iter49.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.enabled !== null && this.enabled !== undefined) {
    output.writeFieldBegin('enabled', Thrift.Type.BOOL, 5);
    output.writeBool(this.enabled);
    output.writeFieldEnd();
  }
  if (this.visible !== null && this.visible !== undefined) {
    output.writeFieldBegin('visible', Thrift.Type.BOOL, 6);
    output.writeBool(this.visible);
    output.writeFieldEnd();
  }
  if (this.canBeLocal !== null && this.canBeLocal !== undefined) {
    output.writeFieldBegin('canBeLocal', Thrift.Type.BOOL, 7);
    output.writeBool(this.canBeLocal);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OptionCategory = module.exports.OptionCategory = function(args) {
  this.id = null;
  this.optionIds = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.optionIds !== undefined && args.optionIds !== null) {
      this.optionIds = Thrift.copyList(args.optionIds, [null]);
    }
  }
};
OptionCategory.prototype = {};
OptionCategory.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.optionIds = [];
        var _rtmp351 = input.readListBegin();
        var _size50 = _rtmp351.size || 0;
        for (var _i52 = 0; _i52 < _size50; ++_i52) {
          var elem53 = null;
          elem53 = input.readString().value;
          this.optionIds.push(elem53);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OptionCategory.prototype.write = function(output) {
  output.writeStructBegin('OptionCategory');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.optionIds !== null && this.optionIds !== undefined) {
    output.writeFieldBegin('optionIds', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.optionIds.length);
    for (var iter54 in this.optionIds) {
      if (this.optionIds.hasOwnProperty(iter54)) {
        iter54 = this.optionIds[iter54];
        output.writeString(iter54);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var BuildItem = module.exports.BuildItem = function(args) {
  this.projectContext = null;
  this.configurationName = null;
  this.nodePaths = null;
  if (args) {
    if (args.projectContext !== undefined && args.projectContext !== null) {
      this.projectContext = new ttypes.ProjectContext(args.projectContext);
    }
    if (args.configurationName !== undefined && args.configurationName !== null) {
      this.configurationName = args.configurationName;
    }
    if (args.nodePaths !== undefined && args.nodePaths !== null) {
      this.nodePaths = Thrift.copyList(args.nodePaths, [null]);
    }
  }
};
BuildItem.prototype = {};
BuildItem.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.projectContext = new ttypes.ProjectContext();
        this.projectContext.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.configurationName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        this.nodePaths = [];
        var _rtmp356 = input.readListBegin();
        var _size55 = _rtmp356.size || 0;
        for (var _i57 = 0; _i57 < _size55; ++_i57) {
          var elem58 = null;
          elem58 = input.readString().value;
          this.nodePaths.push(elem58);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuildItem.prototype.write = function(output) {
  output.writeStructBegin('BuildItem');
  if (this.projectContext !== null && this.projectContext !== undefined) {
    output.writeFieldBegin('projectContext', Thrift.Type.STRUCT, 1);
    this.projectContext.write(output);
    output.writeFieldEnd();
  }
  if (this.configurationName !== null && this.configurationName !== undefined) {
    output.writeFieldBegin('configurationName', Thrift.Type.STRING, 2);
    output.writeString(this.configurationName);
    output.writeFieldEnd();
  }
  if (this.nodePaths !== null && this.nodePaths !== undefined) {
    output.writeFieldBegin('nodePaths', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.nodePaths.length);
    for (var iter59 in this.nodePaths) {
      if (this.nodePaths.hasOwnProperty(iter59)) {
        iter59 = this.nodePaths[iter59];
        output.writeString(iter59);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var BatchBuildItem = module.exports.BatchBuildItem = function(args) {
  this.name = null;
  this.buildItems = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.buildItems !== undefined && args.buildItems !== null) {
      this.buildItems = Thrift.copyList(args.buildItems, [ttypes.BuildItem]);
    }
  }
};
BatchBuildItem.prototype = {};
BatchBuildItem.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.buildItems = [];
        var _rtmp361 = input.readListBegin();
        var _size60 = _rtmp361.size || 0;
        for (var _i62 = 0; _i62 < _size60; ++_i62) {
          var elem63 = null;
          elem63 = new ttypes.BuildItem();
          elem63.read(input);
          this.buildItems.push(elem63);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BatchBuildItem.prototype.write = function(output) {
  output.writeStructBegin('BatchBuildItem');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.buildItems !== null && this.buildItems !== undefined) {
    output.writeFieldBegin('buildItems', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.buildItems.length);
    for (var iter64 in this.buildItems) {
      if (this.buildItems.hasOwnProperty(iter64)) {
        iter64 = this.buildItems[iter64];
        iter64.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var BuildResult = module.exports.BuildResult = function(args) {
  this.projectContext = null;
  this.buildOutput = null;
  this.succeded = null;
  if (args) {
    if (args.projectContext !== undefined && args.projectContext !== null) {
      this.projectContext = new ttypes.ProjectContext(args.projectContext);
    }
    if (args.buildOutput !== undefined && args.buildOutput !== null) {
      this.buildOutput = Thrift.copyList(args.buildOutput, [null]);
    }
    if (args.succeded !== undefined && args.succeded !== null) {
      this.succeded = args.succeded;
    }
  }
};
BuildResult.prototype = {};
BuildResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.projectContext = new ttypes.ProjectContext();
        this.projectContext.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.buildOutput = [];
        var _rtmp366 = input.readListBegin();
        var _size65 = _rtmp366.size || 0;
        for (var _i67 = 0; _i67 < _size65; ++_i67) {
          var elem68 = null;
          elem68 = input.readString().value;
          this.buildOutput.push(elem68);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.succeded = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuildResult.prototype.write = function(output) {
  output.writeStructBegin('BuildResult');
  if (this.projectContext !== null && this.projectContext !== undefined) {
    output.writeFieldBegin('projectContext', Thrift.Type.STRUCT, 1);
    this.projectContext.write(output);
    output.writeFieldEnd();
  }
  if (this.buildOutput !== null && this.buildOutput !== undefined) {
    output.writeFieldBegin('buildOutput', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.buildOutput.length);
    for (var iter69 in this.buildOutput) {
      if (this.buildOutput.hasOwnProperty(iter69)) {
        iter69 = this.buildOutput[iter69];
        output.writeString(iter69);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.succeded !== null && this.succeded !== undefined) {
    output.writeFieldBegin('succeded', Thrift.Type.BOOL, 3);
    output.writeBool(this.succeded);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ControlFilePlugin = module.exports.ControlFilePlugin = function(args) {
  this.name = null;
  this.filefilter = null;
  this.isInternal = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.filefilter !== undefined && args.filefilter !== null) {
      this.filefilter = args.filefilter;
    }
    if (args.isInternal !== undefined && args.isInternal !== null) {
      this.isInternal = args.isInternal;
    }
  }
};
ControlFilePlugin.prototype = {};
ControlFilePlugin.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.filefilter = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.isInternal = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ControlFilePlugin.prototype.write = function(output) {
  output.writeStructBegin('ControlFilePlugin');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.filefilter !== null && this.filefilter !== undefined) {
    output.writeFieldBegin('filefilter', Thrift.Type.STRING, 2);
    output.writeString(this.filefilter);
    output.writeFieldEnd();
  }
  if (this.isInternal !== null && this.isInternal !== undefined) {
    output.writeFieldBegin('isInternal', Thrift.Type.BOOL, 3);
    output.writeBool(this.isInternal);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ttypes.PROJECTMANAGER_ID = 'com.iar.thrift.service.projectmanager';
