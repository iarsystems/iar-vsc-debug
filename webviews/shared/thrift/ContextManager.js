//
// Autogenerated by Thrift Compiler (0.14.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
if (typeof Int64 === 'undefined' && typeof require === 'function') {
  var Int64 = require('node-int64');
}


//HELPER FUNCTIONS AND STRUCTURES

var ContextManager_setInspectionContext_args = function(args) {
  this.context = null;
  if (args) {
    if (args.context !== undefined && args.context !== null) {
      this.context = new shared_ttypes.ContextRef(args.context);
    }
  }
};
ContextManager_setInspectionContext_args.prototype = {};
ContextManager_setInspectionContext_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.context = new shared_ttypes.ContextRef();
        this.context.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ContextManager_setInspectionContext_args.prototype.write = function(output) {
  output.writeStructBegin('ContextManager_setInspectionContext_args');
  if (this.context !== null && this.context !== undefined) {
    output.writeFieldBegin('context', Thrift.Type.STRUCT, 1);
    this.context.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ContextManager_setInspectionContext_result = function(args) {
};
ContextManager_setInspectionContext_result.prototype = {};
ContextManager_setInspectionContext_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ContextManager_setInspectionContext_result.prototype.write = function(output) {
  output.writeStructBegin('ContextManager_setInspectionContext_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ContextManager_findContext_args = function(args) {
  this.context = null;
  if (args) {
    if (args.context !== undefined && args.context !== null) {
      this.context = new shared_ttypes.ContextRef(args.context);
    }
  }
};
ContextManager_findContext_args.prototype = {};
ContextManager_findContext_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.context = new shared_ttypes.ContextRef();
        this.context.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ContextManager_findContext_args.prototype.write = function(output) {
  output.writeStructBegin('ContextManager_findContext_args');
  if (this.context !== null && this.context !== undefined) {
    output.writeFieldBegin('context', Thrift.Type.STRUCT, 1);
    this.context.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ContextManager_findContext_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new shared_ttypes.ContextRef(args.success);
    }
  }
};
ContextManager_findContext_result.prototype = {};
ContextManager_findContext_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new shared_ttypes.ContextRef();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ContextManager_findContext_result.prototype.write = function(output) {
  output.writeStructBegin('ContextManager_findContext_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ContextManager_getStack_args = function(args) {
  this.context = null;
  this.low = null;
  this.high = null;
  if (args) {
    if (args.context !== undefined && args.context !== null) {
      this.context = new shared_ttypes.ContextRef(args.context);
    }
    if (args.low !== undefined && args.low !== null) {
      this.low = args.low;
    }
    if (args.high !== undefined && args.high !== null) {
      this.high = args.high;
    }
  }
};
ContextManager_getStack_args.prototype = {};
ContextManager_getStack_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.context = new shared_ttypes.ContextRef();
        this.context.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.low = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.high = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ContextManager_getStack_args.prototype.write = function(output) {
  output.writeStructBegin('ContextManager_getStack_args');
  if (this.context !== null && this.context !== undefined) {
    output.writeFieldBegin('context', Thrift.Type.STRUCT, 1);
    this.context.write(output);
    output.writeFieldEnd();
  }
  if (this.low !== null && this.low !== undefined) {
    output.writeFieldBegin('low', Thrift.Type.I32, 2);
    output.writeI32(this.low);
    output.writeFieldEnd();
  }
  if (this.high !== null && this.high !== undefined) {
    output.writeFieldBegin('high', Thrift.Type.I32, 3);
    output.writeI32(this.high);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ContextManager_getStack_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [shared_ttypes.ContextInfo]);
    }
  }
};
ContextManager_getStack_result.prototype = {};
ContextManager_getStack_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp3116 = input.readListBegin();
        var _size115 = _rtmp3116.size || 0;
        for (var _i117 = 0; _i117 < _size115; ++_i117) {
          var elem118 = null;
          elem118 = new shared_ttypes.ContextInfo();
          elem118.read(input);
          this.success.push(elem118);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ContextManager_getStack_result.prototype.write = function(output) {
  output.writeStructBegin('ContextManager_getStack_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter119 in this.success) {
      if (this.success.hasOwnProperty(iter119)) {
        iter119 = this.success[iter119];
        iter119.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ContextManager_getStackDepth_args = function(args) {
  this.context = null;
  this.maxDepth = null;
  if (args) {
    if (args.context !== undefined && args.context !== null) {
      this.context = new shared_ttypes.ContextRef(args.context);
    }
    if (args.maxDepth !== undefined && args.maxDepth !== null) {
      this.maxDepth = args.maxDepth;
    }
  }
};
ContextManager_getStackDepth_args.prototype = {};
ContextManager_getStackDepth_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.context = new shared_ttypes.ContextRef();
        this.context.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.maxDepth = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ContextManager_getStackDepth_args.prototype.write = function(output) {
  output.writeStructBegin('ContextManager_getStackDepth_args');
  if (this.context !== null && this.context !== undefined) {
    output.writeFieldBegin('context', Thrift.Type.STRUCT, 1);
    this.context.write(output);
    output.writeFieldEnd();
  }
  if (this.maxDepth !== null && this.maxDepth !== undefined) {
    output.writeFieldBegin('maxDepth', Thrift.Type.I32, 2);
    output.writeI32(this.maxDepth);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ContextManager_getStackDepth_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
ContextManager_getStackDepth_result.prototype = {};
ContextManager_getStackDepth_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ContextManager_getStackDepth_result.prototype.write = function(output) {
  output.writeStructBegin('ContextManager_getStackDepth_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ContextManager_getContextInfo_args = function(args) {
  this.context = null;
  if (args) {
    if (args.context !== undefined && args.context !== null) {
      this.context = new shared_ttypes.ContextRef(args.context);
    }
  }
};
ContextManager_getContextInfo_args.prototype = {};
ContextManager_getContextInfo_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.context = new shared_ttypes.ContextRef();
        this.context.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ContextManager_getContextInfo_args.prototype.write = function(output) {
  output.writeStructBegin('ContextManager_getContextInfo_args');
  if (this.context !== null && this.context !== undefined) {
    output.writeFieldBegin('context', Thrift.Type.STRUCT, 1);
    this.context.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ContextManager_getContextInfo_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new shared_ttypes.ContextInfo(args.success);
    }
  }
};
ContextManager_getContextInfo_result.prototype = {};
ContextManager_getContextInfo_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new shared_ttypes.ContextInfo();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ContextManager_getContextInfo_result.prototype.write = function(output) {
  output.writeStructBegin('ContextManager_getContextInfo_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ContextManager_compareContexts_args = function(args) {
  this.ctx1 = null;
  this.ctx2 = null;
  if (args) {
    if (args.ctx1 !== undefined && args.ctx1 !== null) {
      this.ctx1 = new shared_ttypes.ContextRef(args.ctx1);
    }
    if (args.ctx2 !== undefined && args.ctx2 !== null) {
      this.ctx2 = new shared_ttypes.ContextRef(args.ctx2);
    }
  }
};
ContextManager_compareContexts_args.prototype = {};
ContextManager_compareContexts_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ctx1 = new shared_ttypes.ContextRef();
        this.ctx1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ctx2 = new shared_ttypes.ContextRef();
        this.ctx2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ContextManager_compareContexts_args.prototype.write = function(output) {
  output.writeStructBegin('ContextManager_compareContexts_args');
  if (this.ctx1 !== null && this.ctx1 !== undefined) {
    output.writeFieldBegin('ctx1', Thrift.Type.STRUCT, 1);
    this.ctx1.write(output);
    output.writeFieldEnd();
  }
  if (this.ctx2 !== null && this.ctx2 !== undefined) {
    output.writeFieldBegin('ctx2', Thrift.Type.STRUCT, 2);
    this.ctx2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ContextManager_compareContexts_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
ContextManager_compareContexts_result.prototype = {};
ContextManager_compareContexts_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ContextManager_compareContexts_result.prototype.write = function(output) {
  output.writeStructBegin('ContextManager_compareContexts_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ContextManager_getLocals_args = function(args) {
  this.ctx = null;
  if (args) {
    if (args.ctx !== undefined && args.ctx !== null) {
      this.ctx = new shared_ttypes.ContextRef(args.ctx);
    }
  }
};
ContextManager_getLocals_args.prototype = {};
ContextManager_getLocals_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ctx = new shared_ttypes.ContextRef();
        this.ctx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ContextManager_getLocals_args.prototype.write = function(output) {
  output.writeStructBegin('ContextManager_getLocals_args');
  if (this.ctx !== null && this.ctx !== undefined) {
    output.writeFieldBegin('ctx', Thrift.Type.STRUCT, 1);
    this.ctx.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ContextManager_getLocals_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [shared_ttypes.Symbol]);
    }
  }
};
ContextManager_getLocals_result.prototype = {};
ContextManager_getLocals_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp3121 = input.readListBegin();
        var _size120 = _rtmp3121.size || 0;
        for (var _i122 = 0; _i122 < _size120; ++_i122) {
          var elem123 = null;
          elem123 = new shared_ttypes.Symbol();
          elem123.read(input);
          this.success.push(elem123);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ContextManager_getLocals_result.prototype.write = function(output) {
  output.writeStructBegin('ContextManager_getLocals_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter124 in this.success) {
      if (this.success.hasOwnProperty(iter124)) {
        iter124 = this.success[iter124];
        iter124.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ContextManager_getParameters_args = function(args) {
  this.ctx = null;
  if (args) {
    if (args.ctx !== undefined && args.ctx !== null) {
      this.ctx = new shared_ttypes.ContextRef(args.ctx);
    }
  }
};
ContextManager_getParameters_args.prototype = {};
ContextManager_getParameters_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ctx = new shared_ttypes.ContextRef();
        this.ctx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ContextManager_getParameters_args.prototype.write = function(output) {
  output.writeStructBegin('ContextManager_getParameters_args');
  if (this.ctx !== null && this.ctx !== undefined) {
    output.writeFieldBegin('ctx', Thrift.Type.STRUCT, 1);
    this.ctx.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ContextManager_getParameters_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [shared_ttypes.Symbol]);
    }
  }
};
ContextManager_getParameters_result.prototype = {};
ContextManager_getParameters_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp3126 = input.readListBegin();
        var _size125 = _rtmp3126.size || 0;
        for (var _i127 = 0; _i127 < _size125; ++_i127) {
          var elem128 = null;
          elem128 = new shared_ttypes.Symbol();
          elem128.read(input);
          this.success.push(elem128);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ContextManager_getParameters_result.prototype.write = function(output) {
  output.writeStructBegin('ContextManager_getParameters_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter129 in this.success) {
      if (this.success.hasOwnProperty(iter129)) {
        iter129 = this.success[iter129];
        iter129.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ContextManager_isExecuting_args = function(args) {
  this.ctx = null;
  if (args) {
    if (args.ctx !== undefined && args.ctx !== null) {
      this.ctx = new shared_ttypes.ContextRef(args.ctx);
    }
  }
};
ContextManager_isExecuting_args.prototype = {};
ContextManager_isExecuting_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ctx = new shared_ttypes.ContextRef();
        this.ctx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ContextManager_isExecuting_args.prototype.write = function(output) {
  output.writeStructBegin('ContextManager_isExecuting_args');
  if (this.ctx !== null && this.ctx !== undefined) {
    output.writeFieldBegin('ctx', Thrift.Type.STRUCT, 1);
    this.ctx.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ContextManager_isExecuting_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
ContextManager_isExecuting_result.prototype = {};
ContextManager_isExecuting_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ContextManager_isExecuting_result.prototype.write = function(output) {
  output.writeStructBegin('ContextManager_isExecuting_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ContextManager_setExecLocation_args = function(args) {
  this.ctx = null;
  this.ule = null;
  if (args) {
    if (args.ctx !== undefined && args.ctx !== null) {
      this.ctx = new shared_ttypes.ContextRef(args.ctx);
    }
    if (args.ule !== undefined && args.ule !== null) {
      this.ule = args.ule;
    }
  }
};
ContextManager_setExecLocation_args.prototype = {};
ContextManager_setExecLocation_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ctx = new shared_ttypes.ContextRef();
        this.ctx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ule = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ContextManager_setExecLocation_args.prototype.write = function(output) {
  output.writeStructBegin('ContextManager_setExecLocation_args');
  if (this.ctx !== null && this.ctx !== undefined) {
    output.writeFieldBegin('ctx', Thrift.Type.STRUCT, 1);
    this.ctx.write(output);
    output.writeFieldEnd();
  }
  if (this.ule !== null && this.ule !== undefined) {
    output.writeFieldBegin('ule', Thrift.Type.STRING, 2);
    output.writeString(this.ule);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ContextManager_setExecLocation_result = function(args) {
  this.e = null;
  if (args instanceof shared_ttypes.CSpyException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ContextManager_setExecLocation_result.prototype = {};
ContextManager_setExecLocation_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new shared_ttypes.CSpyException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ContextManager_setExecLocation_result.prototype.write = function(output) {
  output.writeStructBegin('ContextManager_setExecLocation_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ContextManagerClient = exports.Client = function(input, output) {
  this.input = input;
  this.output = (!output) ? input : output;
  this.seqid = 0;
};
Thrift.inherits(ContextManagerClient, HeartbeatServiceClient);

ContextManagerClient.prototype.setInspectionContext = function(context, callback) {
  this.send_setInspectionContext(context, callback); 
  if (!callback) {
  this.recv_setInspectionContext();
  }
};

ContextManagerClient.prototype.send_setInspectionContext = function(context, callback) {
  var params = {
    context: context
  };
  var args = new ContextManager_setInspectionContext_args(params);
  try {
    this.output.writeMessageBegin('setInspectionContext', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_setInspectionContext();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ContextManagerClient.prototype.recv_setInspectionContext = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ContextManager_setInspectionContext_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};

ContextManagerClient.prototype.findContext = function(context, callback) {
  this.send_findContext(context, callback); 
  if (!callback) {
    return this.recv_findContext();
  }
};

ContextManagerClient.prototype.send_findContext = function(context, callback) {
  var params = {
    context: context
  };
  var args = new ContextManager_findContext_args(params);
  try {
    this.output.writeMessageBegin('findContext', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_findContext();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ContextManagerClient.prototype.recv_findContext = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ContextManager_findContext_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'findContext failed: unknown result';
};

ContextManagerClient.prototype.getStack = function(context, low, high, callback) {
  this.send_getStack(context, low, high, callback); 
  if (!callback) {
    return this.recv_getStack();
  }
};

ContextManagerClient.prototype.send_getStack = function(context, low, high, callback) {
  var params = {
    context: context,
    low: low,
    high: high
  };
  var args = new ContextManager_getStack_args(params);
  try {
    this.output.writeMessageBegin('getStack', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_getStack();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ContextManagerClient.prototype.recv_getStack = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ContextManager_getStack_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getStack failed: unknown result';
};

ContextManagerClient.prototype.getStackDepth = function(context, maxDepth, callback) {
  this.send_getStackDepth(context, maxDepth, callback); 
  if (!callback) {
    return this.recv_getStackDepth();
  }
};

ContextManagerClient.prototype.send_getStackDepth = function(context, maxDepth, callback) {
  var params = {
    context: context,
    maxDepth: maxDepth
  };
  var args = new ContextManager_getStackDepth_args(params);
  try {
    this.output.writeMessageBegin('getStackDepth', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_getStackDepth();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ContextManagerClient.prototype.recv_getStackDepth = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ContextManager_getStackDepth_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getStackDepth failed: unknown result';
};

ContextManagerClient.prototype.getContextInfo = function(context, callback) {
  this.send_getContextInfo(context, callback); 
  if (!callback) {
    return this.recv_getContextInfo();
  }
};

ContextManagerClient.prototype.send_getContextInfo = function(context, callback) {
  var params = {
    context: context
  };
  var args = new ContextManager_getContextInfo_args(params);
  try {
    this.output.writeMessageBegin('getContextInfo', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_getContextInfo();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ContextManagerClient.prototype.recv_getContextInfo = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ContextManager_getContextInfo_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getContextInfo failed: unknown result';
};

ContextManagerClient.prototype.compareContexts = function(ctx1, ctx2, callback) {
  this.send_compareContexts(ctx1, ctx2, callback); 
  if (!callback) {
    return this.recv_compareContexts();
  }
};

ContextManagerClient.prototype.send_compareContexts = function(ctx1, ctx2, callback) {
  var params = {
    ctx1: ctx1,
    ctx2: ctx2
  };
  var args = new ContextManager_compareContexts_args(params);
  try {
    this.output.writeMessageBegin('compareContexts', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_compareContexts();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ContextManagerClient.prototype.recv_compareContexts = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ContextManager_compareContexts_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'compareContexts failed: unknown result';
};

ContextManagerClient.prototype.getLocals = function(ctx, callback) {
  this.send_getLocals(ctx, callback); 
  if (!callback) {
    return this.recv_getLocals();
  }
};

ContextManagerClient.prototype.send_getLocals = function(ctx, callback) {
  var params = {
    ctx: ctx
  };
  var args = new ContextManager_getLocals_args(params);
  try {
    this.output.writeMessageBegin('getLocals', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_getLocals();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ContextManagerClient.prototype.recv_getLocals = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ContextManager_getLocals_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getLocals failed: unknown result';
};

ContextManagerClient.prototype.getParameters = function(ctx, callback) {
  this.send_getParameters(ctx, callback); 
  if (!callback) {
    return this.recv_getParameters();
  }
};

ContextManagerClient.prototype.send_getParameters = function(ctx, callback) {
  var params = {
    ctx: ctx
  };
  var args = new ContextManager_getParameters_args(params);
  try {
    this.output.writeMessageBegin('getParameters', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_getParameters();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ContextManagerClient.prototype.recv_getParameters = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ContextManager_getParameters_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getParameters failed: unknown result';
};

ContextManagerClient.prototype.isExecuting = function(ctx, callback) {
  this.send_isExecuting(ctx, callback); 
  if (!callback) {
    return this.recv_isExecuting();
  }
};

ContextManagerClient.prototype.send_isExecuting = function(ctx, callback) {
  var params = {
    ctx: ctx
  };
  var args = new ContextManager_isExecuting_args(params);
  try {
    this.output.writeMessageBegin('isExecuting', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_isExecuting();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ContextManagerClient.prototype.recv_isExecuting = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ContextManager_isExecuting_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'isExecuting failed: unknown result';
};

ContextManagerClient.prototype.setExecLocation = function(ctx, ule, callback) {
  this.send_setExecLocation(ctx, ule, callback); 
  if (!callback) {
  this.recv_setExecLocation();
  }
};

ContextManagerClient.prototype.send_setExecLocation = function(ctx, ule, callback) {
  var params = {
    ctx: ctx,
    ule: ule
  };
  var args = new ContextManager_setExecLocation_args(params);
  try {
    this.output.writeMessageBegin('setExecLocation', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_setExecLocation();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ContextManagerClient.prototype.recv_setExecLocation = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ContextManager_setExecLocation_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};
