//
// Autogenerated by Thrift Compiler (0.14.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
if (typeof Int64 === 'undefined' && typeof require === 'function') {
  var Int64 = require('node-int64');
}


//HELPER FUNCTIONS AND STRUCTURES

var TimelineFrontend_dataAvailable_args = function(args) {
  this.note = null;
  this.partnerNamespace = null;
  if (args) {
    if (args.note !== undefined && args.note !== null) {
      this.note = new ttypes.DbuTimelineDataAvailableNotification(args.note);
    }
    if (args.partnerNamespace !== undefined && args.partnerNamespace !== null) {
      this.partnerNamespace = args.partnerNamespace;
    }
  }
};
TimelineFrontend_dataAvailable_args.prototype = {};
TimelineFrontend_dataAvailable_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.note = new ttypes.DbuTimelineDataAvailableNotification();
        this.note.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.partnerNamespace = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TimelineFrontend_dataAvailable_args.prototype.write = function(output) {
  output.writeStructBegin('TimelineFrontend_dataAvailable_args');
  if (this.note !== null && this.note !== undefined) {
    output.writeFieldBegin('note', Thrift.Type.STRUCT, 1);
    this.note.write(output);
    output.writeFieldEnd();
  }
  if (this.partnerNamespace !== null && this.partnerNamespace !== undefined) {
    output.writeFieldBegin('partnerNamespace', Thrift.Type.STRING, 2);
    output.writeString(this.partnerNamespace);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TimelineFrontend_dataAvailable_result = function(args) {
};
TimelineFrontend_dataAvailable_result.prototype = {};
TimelineFrontend_dataAvailable_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TimelineFrontend_dataAvailable_result.prototype.write = function(output) {
  output.writeStructBegin('TimelineFrontend_dataAvailable_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TimelineFrontend_channelAvailable_args = function(args) {
  this.note = null;
  this.partnerNamespace = null;
  if (args) {
    if (args.note !== undefined && args.note !== null) {
      this.note = new ttypes.DbuTimelineChannelAvailableNotification(args.note);
    }
    if (args.partnerNamespace !== undefined && args.partnerNamespace !== null) {
      this.partnerNamespace = args.partnerNamespace;
    }
  }
};
TimelineFrontend_channelAvailable_args.prototype = {};
TimelineFrontend_channelAvailable_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.note = new ttypes.DbuTimelineChannelAvailableNotification();
        this.note.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.partnerNamespace = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TimelineFrontend_channelAvailable_args.prototype.write = function(output) {
  output.writeStructBegin('TimelineFrontend_channelAvailable_args');
  if (this.note !== null && this.note !== undefined) {
    output.writeFieldBegin('note', Thrift.Type.STRUCT, 1);
    this.note.write(output);
    output.writeFieldEnd();
  }
  if (this.partnerNamespace !== null && this.partnerNamespace !== undefined) {
    output.writeFieldBegin('partnerNamespace', Thrift.Type.STRING, 2);
    output.writeString(this.partnerNamespace);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TimelineFrontend_channelAvailable_result = function(args) {
};
TimelineFrontend_channelAvailable_result.prototype = {};
TimelineFrontend_channelAvailable_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TimelineFrontend_channelAvailable_result.prototype.write = function(output) {
  output.writeStructBegin('TimelineFrontend_channelAvailable_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TimelineFrontend_channelRemoved_args = function(args) {
  this.note = null;
  this.partnerNamespace = null;
  if (args) {
    if (args.note !== undefined && args.note !== null) {
      this.note = new ttypes.DbuTimelineChannelRemovedNotification(args.note);
    }
    if (args.partnerNamespace !== undefined && args.partnerNamespace !== null) {
      this.partnerNamespace = args.partnerNamespace;
    }
  }
};
TimelineFrontend_channelRemoved_args.prototype = {};
TimelineFrontend_channelRemoved_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.note = new ttypes.DbuTimelineChannelRemovedNotification();
        this.note.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.partnerNamespace = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TimelineFrontend_channelRemoved_args.prototype.write = function(output) {
  output.writeStructBegin('TimelineFrontend_channelRemoved_args');
  if (this.note !== null && this.note !== undefined) {
    output.writeFieldBegin('note', Thrift.Type.STRUCT, 1);
    this.note.write(output);
    output.writeFieldEnd();
  }
  if (this.partnerNamespace !== null && this.partnerNamespace !== undefined) {
    output.writeFieldBegin('partnerNamespace', Thrift.Type.STRING, 2);
    output.writeString(this.partnerNamespace);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TimelineFrontend_channelRemoved_result = function(args) {
};
TimelineFrontend_channelRemoved_result.prototype = {};
TimelineFrontend_channelRemoved_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TimelineFrontend_channelRemoved_result.prototype.write = function(output) {
  output.writeStructBegin('TimelineFrontend_channelRemoved_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TimelineFrontend_cpuClockChanged_args = function(args) {
  this.note = null;
  this.partnerNamespace = null;
  if (args) {
    if (args.note !== undefined && args.note !== null) {
      this.note = new ttypes.DbuTimelineCpuClockChangedNotification(args.note);
    }
    if (args.partnerNamespace !== undefined && args.partnerNamespace !== null) {
      this.partnerNamespace = args.partnerNamespace;
    }
  }
};
TimelineFrontend_cpuClockChanged_args.prototype = {};
TimelineFrontend_cpuClockChanged_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.note = new ttypes.DbuTimelineCpuClockChangedNotification();
        this.note.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.partnerNamespace = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TimelineFrontend_cpuClockChanged_args.prototype.write = function(output) {
  output.writeStructBegin('TimelineFrontend_cpuClockChanged_args');
  if (this.note !== null && this.note !== undefined) {
    output.writeFieldBegin('note', Thrift.Type.STRUCT, 1);
    this.note.write(output);
    output.writeFieldEnd();
  }
  if (this.partnerNamespace !== null && this.partnerNamespace !== undefined) {
    output.writeFieldBegin('partnerNamespace', Thrift.Type.STRING, 2);
    output.writeString(this.partnerNamespace);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TimelineFrontend_cpuClockChanged_result = function(args) {
};
TimelineFrontend_cpuClockChanged_result.prototype = {};
TimelineFrontend_cpuClockChanged_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TimelineFrontend_cpuClockChanged_result.prototype.write = function(output) {
  output.writeStructBegin('TimelineFrontend_cpuClockChanged_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TimelineFrontend_enablementChanged_args = function(args) {
  this.note = null;
  this.partnerNamespace = null;
  if (args) {
    if (args.note !== undefined && args.note !== null) {
      this.note = new ttypes.DbuTimelineEnablementChangedNotification(args.note);
    }
    if (args.partnerNamespace !== undefined && args.partnerNamespace !== null) {
      this.partnerNamespace = args.partnerNamespace;
    }
  }
};
TimelineFrontend_enablementChanged_args.prototype = {};
TimelineFrontend_enablementChanged_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.note = new ttypes.DbuTimelineEnablementChangedNotification();
        this.note.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.partnerNamespace = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TimelineFrontend_enablementChanged_args.prototype.write = function(output) {
  output.writeStructBegin('TimelineFrontend_enablementChanged_args');
  if (this.note !== null && this.note !== undefined) {
    output.writeFieldBegin('note', Thrift.Type.STRUCT, 1);
    this.note.write(output);
    output.writeFieldEnd();
  }
  if (this.partnerNamespace !== null && this.partnerNamespace !== undefined) {
    output.writeFieldBegin('partnerNamespace', Thrift.Type.STRING, 2);
    output.writeString(this.partnerNamespace);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TimelineFrontend_enablementChanged_result = function(args) {
};
TimelineFrontend_enablementChanged_result.prototype = {};
TimelineFrontend_enablementChanged_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TimelineFrontend_enablementChanged_result.prototype.write = function(output) {
  output.writeStructBegin('TimelineFrontend_enablementChanged_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TimelineFrontendClient = exports.Client = function(input, output) {
  this.input = input;
  this.output = (!output) ? input : output;
  this.seqid = 0;
};
TimelineFrontendClient.prototype = {};

TimelineFrontendClient.prototype.dataAvailable = function(note, partnerNamespace, callback) {
  this.send_dataAvailable(note, partnerNamespace, callback); 
  if (!callback) {
  this.recv_dataAvailable();
  }
};

TimelineFrontendClient.prototype.send_dataAvailable = function(note, partnerNamespace, callback) {
  var params = {
    note: note,
    partnerNamespace: partnerNamespace
  };
  var args = new TimelineFrontend_dataAvailable_args(params);
  try {
    this.output.writeMessageBegin('dataAvailable', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_dataAvailable();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

TimelineFrontendClient.prototype.recv_dataAvailable = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TimelineFrontend_dataAvailable_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};

TimelineFrontendClient.prototype.channelAvailable = function(note, partnerNamespace, callback) {
  this.send_channelAvailable(note, partnerNamespace, callback); 
  if (!callback) {
  this.recv_channelAvailable();
  }
};

TimelineFrontendClient.prototype.send_channelAvailable = function(note, partnerNamespace, callback) {
  var params = {
    note: note,
    partnerNamespace: partnerNamespace
  };
  var args = new TimelineFrontend_channelAvailable_args(params);
  try {
    this.output.writeMessageBegin('channelAvailable', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_channelAvailable();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

TimelineFrontendClient.prototype.recv_channelAvailable = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TimelineFrontend_channelAvailable_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};

TimelineFrontendClient.prototype.channelRemoved = function(note, partnerNamespace, callback) {
  this.send_channelRemoved(note, partnerNamespace, callback); 
  if (!callback) {
  this.recv_channelRemoved();
  }
};

TimelineFrontendClient.prototype.send_channelRemoved = function(note, partnerNamespace, callback) {
  var params = {
    note: note,
    partnerNamespace: partnerNamespace
  };
  var args = new TimelineFrontend_channelRemoved_args(params);
  try {
    this.output.writeMessageBegin('channelRemoved', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_channelRemoved();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

TimelineFrontendClient.prototype.recv_channelRemoved = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TimelineFrontend_channelRemoved_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};

TimelineFrontendClient.prototype.cpuClockChanged = function(note, partnerNamespace, callback) {
  this.send_cpuClockChanged(note, partnerNamespace, callback); 
  if (!callback) {
  this.recv_cpuClockChanged();
  }
};

TimelineFrontendClient.prototype.send_cpuClockChanged = function(note, partnerNamespace, callback) {
  var params = {
    note: note,
    partnerNamespace: partnerNamespace
  };
  var args = new TimelineFrontend_cpuClockChanged_args(params);
  try {
    this.output.writeMessageBegin('cpuClockChanged', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_cpuClockChanged();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

TimelineFrontendClient.prototype.recv_cpuClockChanged = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TimelineFrontend_cpuClockChanged_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};

TimelineFrontendClient.prototype.enablementChanged = function(note, partnerNamespace, callback) {
  this.send_enablementChanged(note, partnerNamespace, callback); 
  if (!callback) {
  this.recv_enablementChanged();
  }
};

TimelineFrontendClient.prototype.send_enablementChanged = function(note, partnerNamespace, callback) {
  var params = {
    note: note,
    partnerNamespace: partnerNamespace
  };
  var args = new TimelineFrontend_enablementChanged_args(params);
  try {
    this.output.writeMessageBegin('enablementChanged', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_enablementChanged();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

TimelineFrontendClient.prototype.recv_enablementChanged = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TimelineFrontend_enablementChanged_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};
