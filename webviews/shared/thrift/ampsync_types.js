//
// Autogenerated by Thrift Compiler (0.14.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
if (typeof Int64 === 'undefined' && typeof require === 'function') {
  var Int64 = require('node-int64');
}


var ttypes = module.exports = {};
ttypes.SessionState = {
  '0' : 'Offline',
  'Offline' : 0,
  '1' : 'SettingConfig',
  'SettingConfig' : 1,
  '2' : 'Building',
  'Building' : 2,
  '3' : 'BuildDone',
  'BuildDone' : 3,
  '4' : 'StartFlashing',
  'StartFlashing' : 4,
  '5' : 'DoneFlashing',
  'DoneFlashing' : 5,
  '6' : 'StartLoading',
  'StartLoading' : 6,
  '7' : 'DoneLoading',
  'DoneLoading' : 7,
  '8' : 'StartAllLoaded',
  'StartAllLoaded' : 8,
  '9' : 'DoneAllLoaded',
  'DoneAllLoaded' : 9,
  '10' : 'Running',
  'Running' : 10,
  '11' : 'EndSession',
  'EndSession' : 11,
  '12' : 'StartPartnerRegistryReset',
  'StartPartnerRegistryReset' : 12,
  '13' : 'DonePartnerRegistryReset',
  'DonePartnerRegistryReset' : 13,
  '14' : 'Terminate',
  'Terminate' : 14,
  '15' : 'RestartAtOffline',
  'RestartAtOffline' : 15,
  '16' : 'Disconnect',
  'Disconnect' : 16
};
ttypes.LowLevelAction = {
  '0' : 'kDontCallLowLevelGo',
  'kDontCallLowLevelGo' : 0,
  '1' : 'kStartCPU',
  'kStartCPU' : 1,
  '2' : 'kStartAllCPUs',
  'kStartAllCPUs' : 2,
  '3' : 'kPollingOnly',
  'kPollingOnly' : 3
};
ttypes.CoreLowLevelResult = {
  '0' : 'kFullStop',
  'kFullStop' : 0,
  '1' : 'kReportToKernel',
  'kReportToKernel' : 1,
  '2' : 'kSympathetic',
  'kSympathetic' : 2,
  '3' : 'kGoAgain',
  'kGoAgain' : 3,
  '4' : 'kTurnedZombie',
  'kTurnedZombie' : 4,
  '5' : 'kError',
  'kError' : 5,
  '6' : 'kIllegal',
  'kIllegal' : 6
};
ttypes.WhatNext = {
  '0' : 'kReturnFromDriverGo',
  'kReturnFromDriverGo' : 0,
  '1' : 'kLowLevelGoAgain',
  'kLowLevelGoAgain' : 1,
  '2' : 'kReturnError',
  'kReturnError' : 2,
  '3' : 'kReturnFromDriverGoAndStop',
  'kReturnFromDriverGoAndStop' : 3
};
ttypes.CoreStatus = {
  '0' : 'kCoreStopped',
  'kCoreStopped' : 0,
  '1' : 'kCoreRunning',
  'kCoreRunning' : 1,
  '2' : 'kCoreZombie',
  'kCoreZombie' : 2
};
ttypes.Tools = {
  '0' : 'EmbeddedWorkbench',
  'EmbeddedWorkbench' : 0,
  '1' : 'CSpyBat',
  'CSpyBat' : 1,
  '2' : 'CSpyServer',
  'CSpyServer' : 2,
  '3' : 'CSpyRuby',
  'CSpyRuby' : 3
};
var PartnerInformation = module.exports.PartnerInformation = function(args) {
  this.id = null;
  this.cspyConfiguration = null;
  this.configuration = null;
  this.isAlive = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field id is unset!');
    }
    if (args.cspyConfiguration !== undefined && args.cspyConfiguration !== null) {
      this.cspyConfiguration = new cspy_ttypes.SessionConfiguration(args.cspyConfiguration);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field cspyConfiguration is unset!');
    }
    if (args.configuration !== undefined && args.configuration !== null) {
      this.configuration = Thrift.copyMap(args.configuration, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field configuration is unset!');
    }
    if (args.isAlive !== undefined && args.isAlive !== null) {
      this.isAlive = args.isAlive;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field isAlive is unset!');
    }
  }
};
PartnerInformation.prototype = {};
PartnerInformation.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.cspyConfiguration = new cspy_ttypes.SessionConfiguration();
        this.cspyConfiguration.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.MAP) {
        this.configuration = {};
        var _rtmp31 = input.readMapBegin();
        var _size0 = _rtmp31.size || 0;
        for (var _i2 = 0; _i2 < _size0; ++_i2) {
          if (_i2 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key3 = null;
          var val4 = null;
          key3 = input.readString().value;
          val4 = input.readString().value;
          this.configuration[key3] = val4;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.isAlive = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PartnerInformation.prototype.write = function(output) {
  output.writeStructBegin('PartnerInformation');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.cspyConfiguration !== null && this.cspyConfiguration !== undefined) {
    output.writeFieldBegin('cspyConfiguration', Thrift.Type.STRUCT, 2);
    this.cspyConfiguration.write(output);
    output.writeFieldEnd();
  }
  if (this.configuration !== null && this.configuration !== undefined) {
    output.writeFieldBegin('configuration', Thrift.Type.MAP, 3);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.configuration));
    for (var kiter5 in this.configuration) {
      if (this.configuration.hasOwnProperty(kiter5)) {
        var viter6 = this.configuration[kiter5];
        output.writeString(kiter5);
        output.writeString(viter6);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.isAlive !== null && this.isAlive !== undefined) {
    output.writeFieldBegin('isAlive', Thrift.Type.BOOL, 4);
    output.writeBool(this.isAlive);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CoreInfo = module.exports.CoreInfo = function(args) {
  this.id = null;
  this.name = null;
  this.status = null;
  this.statusString = null;
  this.pc = null;
  this.cc = null;
  this.partner = null;
  this.localCoreId = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field id is unset!');
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.status !== undefined && args.status !== null) {
      this.status = args.status;
    }
    if (args.statusString !== undefined && args.statusString !== null) {
      this.statusString = args.statusString;
    }
    if (args.pc !== undefined && args.pc !== null) {
      this.pc = args.pc;
    }
    if (args.cc !== undefined && args.cc !== null) {
      this.cc = args.cc;
    }
    if (args.partner !== undefined && args.partner !== null) {
      this.partner = args.partner;
    }
    if (args.localCoreId !== undefined && args.localCoreId !== null) {
      this.localCoreId = args.localCoreId;
    }
  }
};
CoreInfo.prototype = {};
CoreInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.statusString = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.pc = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.cc = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.partner = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I32) {
        this.localCoreId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CoreInfo.prototype.write = function(output) {
  output.writeStructBegin('CoreInfo');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 3);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  if (this.statusString !== null && this.statusString !== undefined) {
    output.writeFieldBegin('statusString', Thrift.Type.STRING, 4);
    output.writeString(this.statusString);
    output.writeFieldEnd();
  }
  if (this.pc !== null && this.pc !== undefined) {
    output.writeFieldBegin('pc', Thrift.Type.STRING, 5);
    output.writeString(this.pc);
    output.writeFieldEnd();
  }
  if (this.cc !== null && this.cc !== undefined) {
    output.writeFieldBegin('cc', Thrift.Type.STRING, 6);
    output.writeString(this.cc);
    output.writeFieldEnd();
  }
  if (this.partner !== null && this.partner !== undefined) {
    output.writeFieldBegin('partner', Thrift.Type.I32, 7);
    output.writeI32(this.partner);
    output.writeFieldEnd();
  }
  if (this.localCoreId !== null && this.localCoreId !== undefined) {
    output.writeFieldBegin('localCoreId', Thrift.Type.I32, 8);
    output.writeI32(this.localCoreId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var UnknownPartner = module.exports.UnknownPartner = function(args) {
  this.id = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field id is unset!');
    }
  }
};
Thrift.inherits(UnknownPartner, Thrift.TException);
UnknownPartner.prototype.name = 'UnknownPartner';
UnknownPartner.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UnknownPartner.prototype.write = function(output) {
  output.writeStructBegin('UnknownPartner');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CoreRange = module.exports.CoreRange = function(args) {
  this.first = null;
  this.last = null;
  if (args) {
    if (args.first !== undefined && args.first !== null) {
      this.first = args.first;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field first is unset!');
    }
    if (args.last !== undefined && args.last !== null) {
      this.last = args.last;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field last is unset!');
    }
  }
};
CoreRange.prototype = {};
CoreRange.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.first = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.last = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CoreRange.prototype.write = function(output) {
  output.writeStructBegin('CoreRange');
  if (this.first !== null && this.first !== undefined) {
    output.writeFieldBegin('first', Thrift.Type.I32, 1);
    output.writeI32(this.first);
    output.writeFieldEnd();
  }
  if (this.last !== null && this.last !== undefined) {
    output.writeFieldBegin('last', Thrift.Type.I32, 2);
    output.writeI32(this.last);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Event = module.exports.Event = function(args) {
  this.type = null;
  this.properties = null;
  if (args) {
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field type is unset!');
    }
    if (args.properties !== undefined && args.properties !== null) {
      this.properties = Thrift.copyMap(args.properties, [null]);
    }
  }
};
Event.prototype = {};
Event.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.type = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.MAP) {
        this.properties = {};
        var _rtmp38 = input.readMapBegin();
        var _size7 = _rtmp38.size || 0;
        for (var _i9 = 0; _i9 < _size7; ++_i9) {
          if (_i9 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key10 = null;
          var val11 = null;
          key10 = input.readString().value;
          val11 = input.readString().value;
          this.properties[key10] = val11;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Event.prototype.write = function(output) {
  output.writeStructBegin('Event');
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.STRING, 1);
    output.writeString(this.type);
    output.writeFieldEnd();
  }
  if (this.properties !== null && this.properties !== undefined) {
    output.writeFieldBegin('properties', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.properties));
    for (var kiter12 in this.properties) {
      if (this.properties.hasOwnProperty(kiter12)) {
        var viter13 = this.properties[kiter12];
        output.writeString(kiter12);
        output.writeString(viter13);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var EventBusRegistrationFailed = module.exports.EventBusRegistrationFailed = function(args) {
  this.message = null;
  this.type = null;
  if (args) {
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
  }
};
Thrift.inherits(EventBusRegistrationFailed, Thrift.TException);
EventBusRegistrationFailed.prototype.name = 'EventBusRegistrationFailed';
EventBusRegistrationFailed.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EventBusRegistrationFailed.prototype.write = function(output) {
  output.writeStructBegin('EventBusRegistrationFailed');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 2);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NumberOfCoresInfo = module.exports.NumberOfCoresInfo = function(args) {
  this.numberOfCores = null;
  this.localCores = null;
  this.localCoreOffset = null;
  if (args) {
    if (args.numberOfCores !== undefined && args.numberOfCores !== null) {
      this.numberOfCores = args.numberOfCores;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field numberOfCores is unset!');
    }
    if (args.localCores !== undefined && args.localCores !== null) {
      this.localCores = args.localCores;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field localCores is unset!');
    }
    if (args.localCoreOffset !== undefined && args.localCoreOffset !== null) {
      this.localCoreOffset = args.localCoreOffset;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field localCoreOffset is unset!');
    }
  }
};
NumberOfCoresInfo.prototype = {};
NumberOfCoresInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.numberOfCores = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.localCores = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.localCoreOffset = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NumberOfCoresInfo.prototype.write = function(output) {
  output.writeStructBegin('NumberOfCoresInfo');
  if (this.numberOfCores !== null && this.numberOfCores !== undefined) {
    output.writeFieldBegin('numberOfCores', Thrift.Type.I32, 1);
    output.writeI32(this.numberOfCores);
    output.writeFieldEnd();
  }
  if (this.localCores !== null && this.localCores !== undefined) {
    output.writeFieldBegin('localCores', Thrift.Type.I32, 2);
    output.writeI32(this.localCores);
    output.writeFieldEnd();
  }
  if (this.localCoreOffset !== null && this.localCoreOffset !== undefined) {
    output.writeFieldBegin('localCoreOffset', Thrift.Type.I32, 3);
    output.writeI32(this.localCoreOffset);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var FailedToStartPartner = module.exports.FailedToStartPartner = function(args) {
  this.partner = null;
  this.message = null;
  if (args) {
    if (args.partner !== undefined && args.partner !== null) {
      this.partner = args.partner;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field partner is unset!');
    }
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field message is unset!');
    }
  }
};
Thrift.inherits(FailedToStartPartner, Thrift.TException);
FailedToStartPartner.prototype.name = 'FailedToStartPartner';
FailedToStartPartner.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.partner = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FailedToStartPartner.prototype.write = function(output) {
  output.writeStructBegin('FailedToStartPartner');
  if (this.partner !== null && this.partner !== undefined) {
    output.writeFieldBegin('partner', Thrift.Type.I32, 1);
    output.writeI32(this.partner);
    output.writeFieldEnd();
  }
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 2);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ttypes.AMP_VERSION = 1;
ttypes.CORES_REGISTRY_SERVICE = 'com.iar.cspy.ampsync.cores_registry';
ttypes.PARTNER_REGISTRY_SERVICE = 'com.iar.cspy.ampsync.partner_registry';
ttypes.EVENT_BUS_SERVICE = 'com.iar.cspy.ampsync.eventbus';
ttypes.SESSION_SYNCHRONIZER_SERVICE = 'com.iar.cspy.ampsync.session_synchronizer';
ttypes.GATE_KEEPER_SERVICE = 'com.iar.cspy.ampsync.gate_keeper';
ttypes.MULTI_CORE_LOG_SERVICE = 'com.iar.cspy.ampsync.multi_core_log';
ttypes.SOFT_CTI_SERVICE = 'com.iar.cspy.ampsync.soft_cti';
ttypes.CPU_STATUS_POLL_CONTROL_SERVICE = 'com.iar.cspy.ampsync.cpu_status_poll_control';
ttypes.DEBUGGER_STARTER_SERVICE = 'com.iar.cspy.ampsync.debugger_starter';
ttypes.PARTNER_REGISTRY_PARTNER_SET_EVENT = 'partner_set.partner_registry';
ttypes.PARTNER_REGISTRY_PARTNER_IS_ALIVE_EVENT = 'partner_alive.partner_registry';
ttypes.PARTNER_REGISTRY_PARTNER_IS_DECEASED_EVENT = 'partner_deceased.partner_registry';
ttypes.PARTNER_REGISTRY_EVENT_PARTNER_ID = 'partnerId';
ttypes.CORES_REGISTRY_UPDATED_EVENT = 'core_updated.cores_registry';
ttypes.EVENT_SENDING_PARTNERID_KEY = 'sendingPartner';
ttypes.SESSION_SYNCHRONIZER_SYNCSTART_EVENT = 'ampsync.session.syncstart';
ttypes.SESSION_SYNCHRONIZER_FROM_KEY = 'from';
ttypes.SESSION_SYNCHRONIZER_TO_KEY = 'to';
ttypes.SESSION_SYNCHRONIZER_SYNCSTART_SENDING_PARTNER_KEY = 'waitingPartner';
ttypes.SESSION_SYNCHRONIZER_SYNCCOMMIT_EVENT = 'ampsync.sesssion.synccommit';
ttypes.SESSION_SYNCHRONIZER_DEBUGGERSTART_EVENT = 'ampsync.session.debuggerstart';
ttypes.SESSION_SYNCHRONIZER_DEBUGGERENDSESSION_EVENT = 'ampsync.session.debuggerendsession';
ttypes.SESSION_SYNCHRONIZER_DEBUGGERTERMINATE_EVENT = 'ampsync.session.debuggerterminate';
ttypes.SESSION_SYNCHRONIZER_DEBUGGERDISCONNECT_EVENT = 'ampsync.session.debuggerdisconnect';
ttypes.SESSION_SYNCHRONIZER_EVENT_PARTNER_ID = 'partnerId';
ttypes.EXEC_CONTROL_GO_EVENT = 'go.exec_control';
ttypes.EXEC_CONTROL_STOP_EVENT = 'stop.exec_control';
ttypes.EXEC_CONTROL_MULTISTOP_EVENT = 'multistop.exec_control';
ttypes.EXEC_CONTROL_MULTIGO_EVENT = 'multigo.exec_control';
ttypes.EXEC_CONTROL_SET_RUNALL_EVENT = 'runall.exec_control';
ttypes.EXEC_CONTROL_SET_RUNONE_EVENT = 'runone.exec_control';
ttypes.EXEC_CONTROL_EVENT_CORE_KEY_PREFIX = 'core';
ttypes.SOFT_CTI_STOP_ALL_EVENT = 'stopall.soft_cti';
ttypes.SOFT_CTI_EVENT_CORE_KEY_PREFIX = 'core';
ttypes.SOFT_CTI_EVENT_ID_KEY_PREFIX = 'id';
ttypes.CPU_STATUS_POLL_CONTROL_DISABLE_EVENT = 'disable.cpu_status_poll_control';
ttypes.CPU_STATUS_POLL_CONTROL_ENABLE_EVENT = 'enable.cpu_status_poll_control';
ttypes.DEBUGGER_STARTER_TOOL_TO_START_KEY = 'toolToStart';
ttypes.DEBUGKERNEL_EXEC_STARTED_EVENT = 'debugkernel.execstarted';
ttypes.DEBUGKERNEL_EXEC_STOPPED_EVENT = 'debugkernel.execstopped';
ttypes.DEBUGKERNEL_RESET_EVENT = 'debugkernel.reset';
ttypes.DEBUGKERNEL_BEGIN_SESSION_EVENT = 'debugkernel.beginsession';
ttypes.DEBUGKERNEL_END_SESSION_EVENT = 'debugkernel.endsession';
ttypes.DEBUGKERNEL_MEMMOY_CHANGED_EVENT = 'debugkernel.memorychanged';
ttypes.DEBUGKERNEL_SENDER = 'sender';
