//
// Autogenerated by Thrift Compiler (0.14.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
if (typeof Int64 === 'undefined' && typeof require === 'function') {
  var Int64 = require('node-int64');
}


//HELPER FUNCTIONS AND STRUCTURES

var OptionsService_CreateSession_args = function(args) {
  this.request = null;
  if (args) {
    if (args.request !== undefined && args.request !== null) {
      this.request = new ttypes.CreateSessionRequest(args.request);
    }
  }
};
OptionsService_CreateSession_args.prototype = {};
OptionsService_CreateSession_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new ttypes.CreateSessionRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OptionsService_CreateSession_args.prototype.write = function(output) {
  output.writeStructBegin('OptionsService_CreateSession_args');
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OptionsService_CreateSession_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.CreateSessionResponse(args.success);
    }
  }
};
OptionsService_CreateSession_result.prototype = {};
OptionsService_CreateSession_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.CreateSessionResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OptionsService_CreateSession_result.prototype.write = function(output) {
  output.writeStructBegin('OptionsService_CreateSession_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OptionsService_CreateSessionWithData_args = function(args) {
  this.request = null;
  if (args) {
    if (args.request !== undefined && args.request !== null) {
      this.request = new ttypes.CreateSessionWithDataRequest(args.request);
    }
  }
};
OptionsService_CreateSessionWithData_args.prototype = {};
OptionsService_CreateSessionWithData_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new ttypes.CreateSessionWithDataRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OptionsService_CreateSessionWithData_args.prototype.write = function(output) {
  output.writeStructBegin('OptionsService_CreateSessionWithData_args');
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OptionsService_CreateSessionWithData_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.CreateSessionResponse(args.success);
    }
  }
};
OptionsService_CreateSessionWithData_result.prototype = {};
OptionsService_CreateSessionWithData_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.CreateSessionResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OptionsService_CreateSessionWithData_result.prototype.write = function(output) {
  output.writeStructBegin('OptionsService_CreateSessionWithData_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OptionsService_UpdateOptionValue_args = function(args) {
  this.request = null;
  if (args) {
    if (args.request !== undefined && args.request !== null) {
      this.request = new ttypes.UpdateOptionValueRequest(args.request);
    }
  }
};
OptionsService_UpdateOptionValue_args.prototype = {};
OptionsService_UpdateOptionValue_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new ttypes.UpdateOptionValueRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OptionsService_UpdateOptionValue_args.prototype.write = function(output) {
  output.writeStructBegin('OptionsService_UpdateOptionValue_args');
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OptionsService_UpdateOptionValue_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.UpdateOptionValueResponse(args.success);
    }
  }
};
OptionsService_UpdateOptionValue_result.prototype = {};
OptionsService_UpdateOptionValue_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.UpdateOptionValueResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OptionsService_UpdateOptionValue_result.prototype.write = function(output) {
  output.writeStructBegin('OptionsService_UpdateOptionValue_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OptionsService_DestroySession_args = function(args) {
  this.destroySessionRequest = null;
  if (args) {
    if (args.destroySessionRequest !== undefined && args.destroySessionRequest !== null) {
      this.destroySessionRequest = new ttypes.DestroySessionRequest(args.destroySessionRequest);
    }
  }
};
OptionsService_DestroySession_args.prototype = {};
OptionsService_DestroySession_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.destroySessionRequest = new ttypes.DestroySessionRequest();
        this.destroySessionRequest.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OptionsService_DestroySession_args.prototype.write = function(output) {
  output.writeStructBegin('OptionsService_DestroySession_args');
  if (this.destroySessionRequest !== null && this.destroySessionRequest !== undefined) {
    output.writeFieldBegin('destroySessionRequest', Thrift.Type.STRUCT, 1);
    this.destroySessionRequest.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OptionsService_DestroySession_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.DestroySessionResponse(args.success);
    }
  }
};
OptionsService_DestroySession_result.prototype = {};
OptionsService_DestroySession_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.DestroySessionResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OptionsService_DestroySession_result.prototype.write = function(output) {
  output.writeStructBegin('OptionsService_DestroySession_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OptionsService_GetCategoryTree_args = function(args) {
  this.getCategoryTreeRequest = null;
  if (args) {
    if (args.getCategoryTreeRequest !== undefined && args.getCategoryTreeRequest !== null) {
      this.getCategoryTreeRequest = new ttypes.GetCategoryTreeRequest(args.getCategoryTreeRequest);
    }
  }
};
OptionsService_GetCategoryTree_args.prototype = {};
OptionsService_GetCategoryTree_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.getCategoryTreeRequest = new ttypes.GetCategoryTreeRequest();
        this.getCategoryTreeRequest.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OptionsService_GetCategoryTree_args.prototype.write = function(output) {
  output.writeStructBegin('OptionsService_GetCategoryTree_args');
  if (this.getCategoryTreeRequest !== null && this.getCategoryTreeRequest !== undefined) {
    output.writeFieldBegin('getCategoryTreeRequest', Thrift.Type.STRUCT, 1);
    this.getCategoryTreeRequest.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OptionsService_GetCategoryTree_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.GetCategoryTreeResponse(args.success);
    }
  }
};
OptionsService_GetCategoryTree_result.prototype = {};
OptionsService_GetCategoryTree_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.GetCategoryTreeResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OptionsService_GetCategoryTree_result.prototype.write = function(output) {
  output.writeStructBegin('OptionsService_GetCategoryTree_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OptionsService_GetOptionTree_args = function(args) {
  this.getOptionTreeRequest = null;
  if (args) {
    if (args.getOptionTreeRequest !== undefined && args.getOptionTreeRequest !== null) {
      this.getOptionTreeRequest = new ttypes.GetOptionTreeRequest(args.getOptionTreeRequest);
    }
  }
};
OptionsService_GetOptionTree_args.prototype = {};
OptionsService_GetOptionTree_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.getOptionTreeRequest = new ttypes.GetOptionTreeRequest();
        this.getOptionTreeRequest.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OptionsService_GetOptionTree_args.prototype.write = function(output) {
  output.writeStructBegin('OptionsService_GetOptionTree_args');
  if (this.getOptionTreeRequest !== null && this.getOptionTreeRequest !== undefined) {
    output.writeFieldBegin('getOptionTreeRequest', Thrift.Type.STRUCT, 1);
    this.getOptionTreeRequest.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OptionsService_GetOptionTree_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.GetOptionTreeResponse(args.success);
    }
  }
};
OptionsService_GetOptionTree_result.prototype = {};
OptionsService_GetOptionTree_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.GetOptionTreeResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OptionsService_GetOptionTree_result.prototype.write = function(output) {
  output.writeStructBegin('OptionsService_GetOptionTree_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OptionsService_VerifyOptionState_args = function(args) {
  this.verifyOptionStateRequest = null;
  if (args) {
    if (args.verifyOptionStateRequest !== undefined && args.verifyOptionStateRequest !== null) {
      this.verifyOptionStateRequest = new ttypes.VerifyOptionStateRequest(args.verifyOptionStateRequest);
    }
  }
};
OptionsService_VerifyOptionState_args.prototype = {};
OptionsService_VerifyOptionState_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.verifyOptionStateRequest = new ttypes.VerifyOptionStateRequest();
        this.verifyOptionStateRequest.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OptionsService_VerifyOptionState_args.prototype.write = function(output) {
  output.writeStructBegin('OptionsService_VerifyOptionState_args');
  if (this.verifyOptionStateRequest !== null && this.verifyOptionStateRequest !== undefined) {
    output.writeFieldBegin('verifyOptionStateRequest', Thrift.Type.STRUCT, 1);
    this.verifyOptionStateRequest.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OptionsService_VerifyOptionState_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.VerifyOptionStateResponse(args.success);
    }
  }
};
OptionsService_VerifyOptionState_result.prototype = {};
OptionsService_VerifyOptionState_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.VerifyOptionStateResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OptionsService_VerifyOptionState_result.prototype.write = function(output) {
  output.writeStructBegin('OptionsService_VerifyOptionState_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OptionsService_CommitOptionState_args = function(args) {
  this.commitOptionStateRequest = null;
  if (args) {
    if (args.commitOptionStateRequest !== undefined && args.commitOptionStateRequest !== null) {
      this.commitOptionStateRequest = new ttypes.CommitOptionStateRequest(args.commitOptionStateRequest);
    }
  }
};
OptionsService_CommitOptionState_args.prototype = {};
OptionsService_CommitOptionState_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.commitOptionStateRequest = new ttypes.CommitOptionStateRequest();
        this.commitOptionStateRequest.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OptionsService_CommitOptionState_args.prototype.write = function(output) {
  output.writeStructBegin('OptionsService_CommitOptionState_args');
  if (this.commitOptionStateRequest !== null && this.commitOptionStateRequest !== undefined) {
    output.writeFieldBegin('commitOptionStateRequest', Thrift.Type.STRUCT, 1);
    this.commitOptionStateRequest.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OptionsService_CommitOptionState_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.CommitOptionStateResponse(args.success);
    }
  }
};
OptionsService_CommitOptionState_result.prototype = {};
OptionsService_CommitOptionState_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.CommitOptionStateResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OptionsService_CommitOptionState_result.prototype.write = function(output) {
  output.writeStructBegin('OptionsService_CommitOptionState_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OptionsServiceClient = exports.Client = function(input, output) {
  this.input = input;
  this.output = (!output) ? input : output;
  this.seqid = 0;
};
OptionsServiceClient.prototype = {};

OptionsServiceClient.prototype.CreateSession = function(request, callback) {
  this.send_CreateSession(request, callback); 
  if (!callback) {
    return this.recv_CreateSession();
  }
};

OptionsServiceClient.prototype.send_CreateSession = function(request, callback) {
  var params = {
    request: request
  };
  var args = new OptionsService_CreateSession_args(params);
  try {
    this.output.writeMessageBegin('CreateSession', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_CreateSession();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

OptionsServiceClient.prototype.recv_CreateSession = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OptionsService_CreateSession_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'CreateSession failed: unknown result';
};

OptionsServiceClient.prototype.CreateSessionWithData = function(request, callback) {
  this.send_CreateSessionWithData(request, callback); 
  if (!callback) {
    return this.recv_CreateSessionWithData();
  }
};

OptionsServiceClient.prototype.send_CreateSessionWithData = function(request, callback) {
  var params = {
    request: request
  };
  var args = new OptionsService_CreateSessionWithData_args(params);
  try {
    this.output.writeMessageBegin('CreateSessionWithData', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_CreateSessionWithData();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

OptionsServiceClient.prototype.recv_CreateSessionWithData = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OptionsService_CreateSessionWithData_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'CreateSessionWithData failed: unknown result';
};

OptionsServiceClient.prototype.UpdateOptionValue = function(request, callback) {
  this.send_UpdateOptionValue(request, callback); 
  if (!callback) {
    return this.recv_UpdateOptionValue();
  }
};

OptionsServiceClient.prototype.send_UpdateOptionValue = function(request, callback) {
  var params = {
    request: request
  };
  var args = new OptionsService_UpdateOptionValue_args(params);
  try {
    this.output.writeMessageBegin('UpdateOptionValue', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_UpdateOptionValue();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

OptionsServiceClient.prototype.recv_UpdateOptionValue = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OptionsService_UpdateOptionValue_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'UpdateOptionValue failed: unknown result';
};

OptionsServiceClient.prototype.DestroySession = function(destroySessionRequest, callback) {
  this.send_DestroySession(destroySessionRequest, callback); 
  if (!callback) {
    return this.recv_DestroySession();
  }
};

OptionsServiceClient.prototype.send_DestroySession = function(destroySessionRequest, callback) {
  var params = {
    destroySessionRequest: destroySessionRequest
  };
  var args = new OptionsService_DestroySession_args(params);
  try {
    this.output.writeMessageBegin('DestroySession', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_DestroySession();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

OptionsServiceClient.prototype.recv_DestroySession = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OptionsService_DestroySession_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'DestroySession failed: unknown result';
};

OptionsServiceClient.prototype.GetCategoryTree = function(getCategoryTreeRequest, callback) {
  this.send_GetCategoryTree(getCategoryTreeRequest, callback); 
  if (!callback) {
    return this.recv_GetCategoryTree();
  }
};

OptionsServiceClient.prototype.send_GetCategoryTree = function(getCategoryTreeRequest, callback) {
  var params = {
    getCategoryTreeRequest: getCategoryTreeRequest
  };
  var args = new OptionsService_GetCategoryTree_args(params);
  try {
    this.output.writeMessageBegin('GetCategoryTree', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_GetCategoryTree();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

OptionsServiceClient.prototype.recv_GetCategoryTree = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OptionsService_GetCategoryTree_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'GetCategoryTree failed: unknown result';
};

OptionsServiceClient.prototype.GetOptionTree = function(getOptionTreeRequest, callback) {
  this.send_GetOptionTree(getOptionTreeRequest, callback); 
  if (!callback) {
    return this.recv_GetOptionTree();
  }
};

OptionsServiceClient.prototype.send_GetOptionTree = function(getOptionTreeRequest, callback) {
  var params = {
    getOptionTreeRequest: getOptionTreeRequest
  };
  var args = new OptionsService_GetOptionTree_args(params);
  try {
    this.output.writeMessageBegin('GetOptionTree', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_GetOptionTree();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

OptionsServiceClient.prototype.recv_GetOptionTree = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OptionsService_GetOptionTree_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'GetOptionTree failed: unknown result';
};

OptionsServiceClient.prototype.VerifyOptionState = function(verifyOptionStateRequest, callback) {
  this.send_VerifyOptionState(verifyOptionStateRequest, callback); 
  if (!callback) {
    return this.recv_VerifyOptionState();
  }
};

OptionsServiceClient.prototype.send_VerifyOptionState = function(verifyOptionStateRequest, callback) {
  var params = {
    verifyOptionStateRequest: verifyOptionStateRequest
  };
  var args = new OptionsService_VerifyOptionState_args(params);
  try {
    this.output.writeMessageBegin('VerifyOptionState', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_VerifyOptionState();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

OptionsServiceClient.prototype.recv_VerifyOptionState = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OptionsService_VerifyOptionState_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'VerifyOptionState failed: unknown result';
};

OptionsServiceClient.prototype.CommitOptionState = function(commitOptionStateRequest, callback) {
  this.send_CommitOptionState(commitOptionStateRequest, callback); 
  if (!callback) {
    return this.recv_CommitOptionState();
  }
};

OptionsServiceClient.prototype.send_CommitOptionState = function(commitOptionStateRequest, callback) {
  var params = {
    commitOptionStateRequest: commitOptionStateRequest
  };
  var args = new OptionsService_CommitOptionState_args(params);
  try {
    this.output.writeMessageBegin('CommitOptionState', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_CommitOptionState();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

OptionsServiceClient.prototype.recv_CommitOptionState = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OptionsService_CommitOptionState_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'CommitOptionState failed: unknown result';
};
