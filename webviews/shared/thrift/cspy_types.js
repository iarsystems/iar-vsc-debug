//
// Autogenerated by Thrift Compiler (0.14.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
if (typeof Int64 === 'undefined' && typeof require === 'function') {
  var Int64 = require('node-int64');
}


var ttypes = module.exports = {};
ttypes.DkNotifyConstant = {
  '0' : 'kDkTargetStopped',
  'kDkTargetStopped' : 0,
  '1' : 'kDkTargetStarted',
  'kDkTargetStarted' : 1,
  '2' : 'kDkReset',
  'kDkReset' : 2,
  '3' : 'kDkMemoryChanged',
  'kDkMemoryChanged' : 3,
  '4' : 'kDkInspectionContextChanged',
  'kDkInspectionContextChanged' : 4,
  '5' : 'kDkBaseContextChanged',
  'kDkBaseContextChanged' : 5,
  '6' : 'kDkPreLoadModule',
  'kDkPreLoadModule' : 6,
  '7' : 'kDkPostLoadModule',
  'kDkPostLoadModule' : 7,
  '8' : 'kDkPostLoadPrefixModul',
  'kDkPostLoadPrefixModul' : 8,
  '9' : 'kDkUserBreakUpdate',
  'kDkUserBreakUpdate' : 9,
  '10' : 'kDkPostConfig',
  'kDkPostConfig' : 10,
  '11' : 'kDkPreShutDown',
  'kDkPreShutDown' : 11,
  '12' : 'kDkDoShutDown',
  'kDkDoShutDown' : 12,
  '13' : 'kDkFatalError',
  'kDkFatalError' : 13,
  '14' : 'kDkDriverReset',
  'kDkDriverReset' : 14,
  '15' : 'kDkForceUpdate',
  'kDkForceUpdate' : 15,
  '16' : 'kDkPreModify',
  'kDkPreModify' : 16,
  '17' : 'kDkForcedStop',
  'kDkForcedStop' : 17,
  '18' : 'kDkStopRequested',
  'kDkStopRequested' : 18,
  '19' : 'kDkSilentFatalError',
  'kDkSilentFatalError' : 19,
  '20' : 'kDkPrePreShutDown',
  'kDkPrePreShutDown' : 20,
  '21' : 'kDkPostLoadExtraModule',
  'kDkPostLoadExtraModule' : 21,
  '22' : 'kDkKernelThreadStarted',
  'kDkKernelThreadStarted' : 22,
  '23' : 'kDkKernelThreadExiting',
  'kDkKernelThreadExiting' : 23,
  '24' : 'kDkMetaDataChanged',
  'kDkMetaDataChanged' : 24,
  '25' : 'kDkPreLoadPlugin',
  'kDkPreLoadPlugin' : 25,
  '26' : 'kDkPostLoadPlugin',
  'kDkPostLoadPlugin' : 26,
  '27' : 'kDkPreUnloadPlugin',
  'kDkPreUnloadPlugin' : 27,
  '28' : 'kDkPostUnloadPlugin',
  'kDkPostUnloadPlugin' : 28,
  '29' : 'kDkServicesChanged',
  'kDkServicesChanged' : 29,
  '30' : 'kDkFinishedStaticInit',
  'kDkFinishedStaticInit' : 30,
  '31' : 'kDkCoreStopped',
  'kDkCoreStopped' : 31,
  '32' : 'kDkCoreStarted',
  'kDkCoreStarted' : 32
};
ttypes.DkCoreStatusConstants = {
  '0' : 'kDkCoreStateStopped',
  'kDkCoreStateStopped' : 0,
  '1' : 'kDkCoreStateRunning',
  'kDkCoreStateRunning' : 1,
  '2' : 'kDkCoreStateSleeping',
  'kDkCoreStateSleeping' : 2,
  '3' : 'kDkCoreStateUnknown',
  'kDkCoreStateUnknown' : 3,
  '4' : 'kDkCoreStateNoPower',
  'kDkCoreStateNoPower' : 4
};
ttypes.DkLoggingCategoryConstant = {
  '0' : 'kDkLogUser',
  'kDkLogUser' : 0,
  '1' : 'kDkLogInfo',
  'kDkLogInfo' : 1,
  '2' : 'kDkLogWarning',
  'kDkLogWarning' : 2,
  '3' : 'kDkLogError',
  'kDkLogError' : 3,
  '4' : 'kDkLogMinorInfo',
  'kDkLogMinorInfo' : 4
};
ttypes.BasicExprType = {
  '0' : 'Unknown',
  'Unknown' : 0,
  '1' : 'Basic',
  'Basic' : 1,
  '2' : 'Pointer',
  'Pointer' : 2,
  '3' : 'Array',
  'Array' : 3,
  '4' : 'Composite',
  'Composite' : 4,
  '5' : 'Enumeration',
  'Enumeration' : 5,
  '6' : 'Function',
  'Function' : 6,
  '7' : 'Custom',
  'Custom' : 7
};
var SessionConfiguration = module.exports.SessionConfiguration = function(args) {
  this.type = null;
  this.driverName = null;
  this.processorName = null;
  this.options = null;
  this.executable = null;
  this.toolkitDir = null;
  this.target = null;
  this.projectName = null;
  this.projectDir = null;
  this.stackSettings = null;
  this.setupMacros = null;
  this.plugins = null;
  this.configName = null;
  this.enableCRun = null;
  this.attachToTarget = null;
  this.leaveRunning = null;
  if (args) {
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
    if (args.driverName !== undefined && args.driverName !== null) {
      this.driverName = args.driverName;
    }
    if (args.processorName !== undefined && args.processorName !== null) {
      this.processorName = args.processorName;
    }
    if (args.options !== undefined && args.options !== null) {
      this.options = Thrift.copyList(args.options, [null]);
    }
    if (args.executable !== undefined && args.executable !== null) {
      this.executable = args.executable;
    }
    if (args.toolkitDir !== undefined && args.toolkitDir !== null) {
      this.toolkitDir = args.toolkitDir;
    }
    if (args.target !== undefined && args.target !== null) {
      this.target = args.target;
    }
    if (args.projectName !== undefined && args.projectName !== null) {
      this.projectName = args.projectName;
    }
    if (args.projectDir !== undefined && args.projectDir !== null) {
      this.projectDir = args.projectDir;
    }
    if (args.stackSettings !== undefined && args.stackSettings !== null) {
      this.stackSettings = new shared_ttypes.StackSettings(args.stackSettings);
    }
    if (args.setupMacros !== undefined && args.setupMacros !== null) {
      this.setupMacros = Thrift.copyList(args.setupMacros, [null]);
    }
    if (args.plugins !== undefined && args.plugins !== null) {
      this.plugins = Thrift.copyList(args.plugins, [null]);
    }
    if (args.configName !== undefined && args.configName !== null) {
      this.configName = args.configName;
    }
    if (args.enableCRun !== undefined && args.enableCRun !== null) {
      this.enableCRun = args.enableCRun;
    }
    if (args.attachToTarget !== undefined && args.attachToTarget !== null) {
      this.attachToTarget = args.attachToTarget;
    }
    if (args.leaveRunning !== undefined && args.leaveRunning !== null) {
      this.leaveRunning = args.leaveRunning;
    }
  }
};
SessionConfiguration.prototype = {};
SessionConfiguration.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.type = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.driverName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.processorName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        this.options = [];
        var _rtmp31 = input.readListBegin();
        var _size0 = _rtmp31.size || 0;
        for (var _i2 = 0; _i2 < _size0; ++_i2) {
          var elem3 = null;
          elem3 = input.readString().value;
          this.options.push(elem3);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.executable = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.toolkitDir = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.target = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.projectName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.projectDir = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.STRUCT) {
        this.stackSettings = new shared_ttypes.StackSettings();
        this.stackSettings.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.LIST) {
        this.setupMacros = [];
        var _rtmp35 = input.readListBegin();
        var _size4 = _rtmp35.size || 0;
        for (var _i6 = 0; _i6 < _size4; ++_i6) {
          var elem7 = null;
          elem7 = input.readString().value;
          this.setupMacros.push(elem7);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.LIST) {
        this.plugins = [];
        var _rtmp39 = input.readListBegin();
        var _size8 = _rtmp39.size || 0;
        for (var _i10 = 0; _i10 < _size8; ++_i10) {
          var elem11 = null;
          elem11 = input.readString().value;
          this.plugins.push(elem11);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 17:
      if (ftype == Thrift.Type.STRING) {
        this.configName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 18:
      if (ftype == Thrift.Type.BOOL) {
        this.enableCRun = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 19:
      if (ftype == Thrift.Type.BOOL) {
        this.attachToTarget = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.BOOL) {
        this.leaveRunning = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SessionConfiguration.prototype.write = function(output) {
  output.writeStructBegin('SessionConfiguration');
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.STRING, 1);
    output.writeString(this.type);
    output.writeFieldEnd();
  }
  if (this.driverName !== null && this.driverName !== undefined) {
    output.writeFieldBegin('driverName', Thrift.Type.STRING, 2);
    output.writeString(this.driverName);
    output.writeFieldEnd();
  }
  if (this.processorName !== null && this.processorName !== undefined) {
    output.writeFieldBegin('processorName', Thrift.Type.STRING, 3);
    output.writeString(this.processorName);
    output.writeFieldEnd();
  }
  if (this.options !== null && this.options !== undefined) {
    output.writeFieldBegin('options', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRING, this.options.length);
    for (var iter12 in this.options) {
      if (this.options.hasOwnProperty(iter12)) {
        iter12 = this.options[iter12];
        output.writeString(iter12);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.executable !== null && this.executable !== undefined) {
    output.writeFieldBegin('executable', Thrift.Type.STRING, 8);
    output.writeString(this.executable);
    output.writeFieldEnd();
  }
  if (this.toolkitDir !== null && this.toolkitDir !== undefined) {
    output.writeFieldBegin('toolkitDir', Thrift.Type.STRING, 9);
    output.writeString(this.toolkitDir);
    output.writeFieldEnd();
  }
  if (this.target !== null && this.target !== undefined) {
    output.writeFieldBegin('target', Thrift.Type.STRING, 10);
    output.writeString(this.target);
    output.writeFieldEnd();
  }
  if (this.projectName !== null && this.projectName !== undefined) {
    output.writeFieldBegin('projectName', Thrift.Type.STRING, 11);
    output.writeString(this.projectName);
    output.writeFieldEnd();
  }
  if (this.projectDir !== null && this.projectDir !== undefined) {
    output.writeFieldBegin('projectDir', Thrift.Type.STRING, 12);
    output.writeString(this.projectDir);
    output.writeFieldEnd();
  }
  if (this.stackSettings !== null && this.stackSettings !== undefined) {
    output.writeFieldBegin('stackSettings', Thrift.Type.STRUCT, 14);
    this.stackSettings.write(output);
    output.writeFieldEnd();
  }
  if (this.setupMacros !== null && this.setupMacros !== undefined) {
    output.writeFieldBegin('setupMacros', Thrift.Type.LIST, 15);
    output.writeListBegin(Thrift.Type.STRING, this.setupMacros.length);
    for (var iter13 in this.setupMacros) {
      if (this.setupMacros.hasOwnProperty(iter13)) {
        iter13 = this.setupMacros[iter13];
        output.writeString(iter13);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.plugins !== null && this.plugins !== undefined) {
    output.writeFieldBegin('plugins', Thrift.Type.LIST, 16);
    output.writeListBegin(Thrift.Type.STRING, this.plugins.length);
    for (var iter14 in this.plugins) {
      if (this.plugins.hasOwnProperty(iter14)) {
        iter14 = this.plugins[iter14];
        output.writeString(iter14);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.configName !== null && this.configName !== undefined) {
    output.writeFieldBegin('configName', Thrift.Type.STRING, 17);
    output.writeString(this.configName);
    output.writeFieldEnd();
  }
  if (this.enableCRun !== null && this.enableCRun !== undefined) {
    output.writeFieldBegin('enableCRun', Thrift.Type.BOOL, 18);
    output.writeBool(this.enableCRun);
    output.writeFieldEnd();
  }
  if (this.attachToTarget !== null && this.attachToTarget !== undefined) {
    output.writeFieldBegin('attachToTarget', Thrift.Type.BOOL, 19);
    output.writeBool(this.attachToTarget);
    output.writeFieldEnd();
  }
  if (this.leaveRunning !== null && this.leaveRunning !== undefined) {
    output.writeFieldBegin('leaveRunning', Thrift.Type.BOOL, 20);
    output.writeBool(this.leaveRunning);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DebugEvent = module.exports.DebugEvent = function(args) {
  this.note = null;
  this.descr = null;
  this.params = null;
  if (args) {
    if (args.note !== undefined && args.note !== null) {
      this.note = args.note;
    }
    if (args.descr !== undefined && args.descr !== null) {
      this.descr = args.descr;
    }
    if (args.params !== undefined && args.params !== null) {
      this.params = Thrift.copyList(args.params, [null]);
    }
  }
};
DebugEvent.prototype = {};
DebugEvent.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.note = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.descr = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        this.params = [];
        var _rtmp316 = input.readListBegin();
        var _size15 = _rtmp316.size || 0;
        for (var _i17 = 0; _i17 < _size15; ++_i17) {
          var elem18 = null;
          elem18 = input.readString().value;
          this.params.push(elem18);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DebugEvent.prototype.write = function(output) {
  output.writeStructBegin('DebugEvent');
  if (this.note !== null && this.note !== undefined) {
    output.writeFieldBegin('note', Thrift.Type.I32, 1);
    output.writeI32(this.note);
    output.writeFieldEnd();
  }
  if (this.descr !== null && this.descr !== undefined) {
    output.writeFieldBegin('descr', Thrift.Type.STRING, 2);
    output.writeString(this.descr);
    output.writeFieldEnd();
  }
  if (this.params !== null && this.params !== undefined) {
    output.writeFieldBegin('params', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.params.length);
    for (var iter19 in this.params) {
      if (this.params.hasOwnProperty(iter19)) {
        iter19 = this.params[iter19];
        output.writeString(iter19);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var InspectionContextChangedEvent = module.exports.InspectionContextChangedEvent = function(args) {
  this.context = null;
  if (args) {
    if (args.context !== undefined && args.context !== null) {
      this.context = new shared_ttypes.ContextRef(args.context);
    }
  }
};
InspectionContextChangedEvent.prototype = {};
InspectionContextChangedEvent.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.context = new shared_ttypes.ContextRef();
        this.context.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InspectionContextChangedEvent.prototype.write = function(output) {
  output.writeStructBegin('InspectionContextChangedEvent');
  if (this.context !== null && this.context !== undefined) {
    output.writeFieldBegin('context', Thrift.Type.STRUCT, 1);
    this.context.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var BaseContextChangedEvent = module.exports.BaseContextChangedEvent = function(args) {
  this.context = null;
  if (args) {
    if (args.context !== undefined && args.context !== null) {
      this.context = new shared_ttypes.ContextRef(args.context);
    }
  }
};
BaseContextChangedEvent.prototype = {};
BaseContextChangedEvent.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.context = new shared_ttypes.ContextRef();
        this.context.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BaseContextChangedEvent.prototype.write = function(output) {
  output.writeStructBegin('BaseContextChangedEvent');
  if (this.context !== null && this.context !== undefined) {
    output.writeFieldBegin('context', Thrift.Type.STRUCT, 1);
    this.context.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LogEvent = module.exports.LogEvent = function(args) {
  this.cat = null;
  this.text = null;
  this.timestamp = null;
  if (args) {
    if (args.cat !== undefined && args.cat !== null) {
      this.cat = args.cat;
    }
    if (args.text !== undefined && args.text !== null) {
      this.text = args.text;
    }
    if (args.timestamp !== undefined && args.timestamp !== null) {
      this.timestamp = args.timestamp;
    }
  }
};
LogEvent.prototype = {};
LogEvent.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.cat = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.text = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LogEvent.prototype.write = function(output) {
  output.writeStructBegin('LogEvent');
  if (this.cat !== null && this.cat !== undefined) {
    output.writeFieldBegin('cat', Thrift.Type.I32, 1);
    output.writeI32(this.cat);
    output.writeFieldEnd();
  }
  if (this.text !== null && this.text !== undefined) {
    output.writeFieldBegin('text', Thrift.Type.STRING, 2);
    output.writeString(this.text);
    output.writeFieldEnd();
  }
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
    output.writeI64(this.timestamp);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Thread = module.exports.Thread = function(args) {
  this.id = null;
  this.name = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
  }
};
Thread.prototype = {};
Thread.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Thread.prototype.write = function(output) {
  output.writeStructBegin('Thread');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ExprValue = module.exports.ExprValue = function(args) {
  this.expression = null;
  this.value = null;
  this.type = null;
  this.isLValue = null;
  this.hasLocation = null;
  this.location = null;
  this.subExprCount = null;
  this.basicType = null;
  this.size = null;
  if (args) {
    if (args.expression !== undefined && args.expression !== null) {
      this.expression = args.expression;
    }
    if (args.value !== undefined && args.value !== null) {
      this.value = args.value;
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
    if (args.isLValue !== undefined && args.isLValue !== null) {
      this.isLValue = args.isLValue;
    }
    if (args.hasLocation !== undefined && args.hasLocation !== null) {
      this.hasLocation = args.hasLocation;
    }
    if (args.location !== undefined && args.location !== null) {
      this.location = new shared_ttypes.Location(args.location);
    }
    if (args.subExprCount !== undefined && args.subExprCount !== null) {
      this.subExprCount = args.subExprCount;
    }
    if (args.basicType !== undefined && args.basicType !== null) {
      this.basicType = args.basicType;
    }
    if (args.size !== undefined && args.size !== null) {
      this.size = args.size;
    }
  }
};
ExprValue.prototype = {};
ExprValue.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.expression = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.value = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.type = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.isLValue = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.hasLocation = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.location = new shared_ttypes.Location();
        this.location.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.subExprCount = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I32) {
        this.basicType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I32) {
        this.size = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ExprValue.prototype.write = function(output) {
  output.writeStructBegin('ExprValue');
  if (this.expression !== null && this.expression !== undefined) {
    output.writeFieldBegin('expression', Thrift.Type.STRING, 1);
    output.writeString(this.expression);
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.STRING, 2);
    output.writeString(this.value);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.STRING, 3);
    output.writeString(this.type);
    output.writeFieldEnd();
  }
  if (this.isLValue !== null && this.isLValue !== undefined) {
    output.writeFieldBegin('isLValue', Thrift.Type.BOOL, 4);
    output.writeBool(this.isLValue);
    output.writeFieldEnd();
  }
  if (this.hasLocation !== null && this.hasLocation !== undefined) {
    output.writeFieldBegin('hasLocation', Thrift.Type.BOOL, 5);
    output.writeBool(this.hasLocation);
    output.writeFieldEnd();
  }
  if (this.location !== null && this.location !== undefined) {
    output.writeFieldBegin('location', Thrift.Type.STRUCT, 6);
    this.location.write(output);
    output.writeFieldEnd();
  }
  if (this.subExprCount !== null && this.subExprCount !== undefined) {
    output.writeFieldBegin('subExprCount', Thrift.Type.I32, 7);
    output.writeI32(this.subExprCount);
    output.writeFieldEnd();
  }
  if (this.basicType !== null && this.basicType !== undefined) {
    output.writeFieldBegin('basicType', Thrift.Type.I32, 8);
    output.writeI32(this.basicType);
    output.writeFieldEnd();
  }
  if (this.size !== null && this.size !== undefined) {
    output.writeFieldBegin('size', Thrift.Type.I32, 9);
    output.writeI32(this.size);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ModuleData = module.exports.ModuleData = function(args) {
  this.name = null;
  this.file = null;
  this.timestamp = null;
  this.baseAddress = null;
  this.toAddress = null;
  this.symbolsAreLoaded = null;
  this.size = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.file !== undefined && args.file !== null) {
      this.file = args.file;
    }
    if (args.timestamp !== undefined && args.timestamp !== null) {
      this.timestamp = args.timestamp;
    }
    if (args.baseAddress !== undefined && args.baseAddress !== null) {
      this.baseAddress = args.baseAddress;
    }
    if (args.toAddress !== undefined && args.toAddress !== null) {
      this.toAddress = args.toAddress;
    }
    if (args.symbolsAreLoaded !== undefined && args.symbolsAreLoaded !== null) {
      this.symbolsAreLoaded = args.symbolsAreLoaded;
    }
    if (args.size !== undefined && args.size !== null) {
      this.size = args.size;
    }
  }
};
ModuleData.prototype = {};
ModuleData.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.file = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.baseAddress = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.toAddress = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.symbolsAreLoaded = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I64) {
        this.size = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ModuleData.prototype.write = function(output) {
  output.writeStructBegin('ModuleData');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.file !== null && this.file !== undefined) {
    output.writeFieldBegin('file', Thrift.Type.STRING, 2);
    output.writeString(this.file);
    output.writeFieldEnd();
  }
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
    output.writeI64(this.timestamp);
    output.writeFieldEnd();
  }
  if (this.baseAddress !== null && this.baseAddress !== undefined) {
    output.writeFieldBegin('baseAddress', Thrift.Type.STRING, 4);
    output.writeString(this.baseAddress);
    output.writeFieldEnd();
  }
  if (this.toAddress !== null && this.toAddress !== undefined) {
    output.writeFieldBegin('toAddress', Thrift.Type.STRING, 5);
    output.writeString(this.toAddress);
    output.writeFieldEnd();
  }
  if (this.symbolsAreLoaded !== null && this.symbolsAreLoaded !== undefined) {
    output.writeFieldBegin('symbolsAreLoaded', Thrift.Type.BOOL, 6);
    output.writeBool(this.symbolsAreLoaded);
    output.writeFieldEnd();
  }
  if (this.size !== null && this.size !== undefined) {
    output.writeFieldBegin('size', Thrift.Type.I64, 7);
    output.writeI64(this.size);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NamedLocationMask = module.exports.NamedLocationMask = function(args) {
  this.used = null;
  this.shift = null;
  this.mask = null;
  if (args) {
    if (args.used !== undefined && args.used !== null) {
      this.used = args.used;
    }
    if (args.shift !== undefined && args.shift !== null) {
      this.shift = args.shift;
    }
    if (args.mask !== undefined && args.mask !== null) {
      this.mask = args.mask;
    }
  }
};
NamedLocationMask.prototype = {};
NamedLocationMask.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.used = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.shift = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.mask = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NamedLocationMask.prototype.write = function(output) {
  output.writeStructBegin('NamedLocationMask');
  if (this.used !== null && this.used !== undefined) {
    output.writeFieldBegin('used', Thrift.Type.BOOL, 1);
    output.writeBool(this.used);
    output.writeFieldEnd();
  }
  if (this.shift !== null && this.shift !== undefined) {
    output.writeFieldBegin('shift', Thrift.Type.I32, 2);
    output.writeI32(this.shift);
    output.writeFieldEnd();
  }
  if (this.mask !== null && this.mask !== undefined) {
    output.writeFieldBegin('mask', Thrift.Type.I64, 3);
    output.writeI64(this.mask);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NamedLocation = module.exports.NamedLocation = function(args) {
  this.name = null;
  this.nameAlias = null;
  this.readonly = null;
  this.writeonly = null;
  this.location = null;
  this.realLocation = null;
  this.valueBitSize = null;
  this.fullBitSize = null;
  this.defaultBase = null;
  this.usesMask = null;
  this.masks = null;
  this.description = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.nameAlias !== undefined && args.nameAlias !== null) {
      this.nameAlias = args.nameAlias;
    }
    if (args.readonly !== undefined && args.readonly !== null) {
      this.readonly = args.readonly;
    }
    if (args.writeonly !== undefined && args.writeonly !== null) {
      this.writeonly = args.writeonly;
    }
    if (args.location !== undefined && args.location !== null) {
      this.location = new shared_ttypes.Location(args.location);
    }
    if (args.realLocation !== undefined && args.realLocation !== null) {
      this.realLocation = new shared_ttypes.Location(args.realLocation);
    }
    if (args.valueBitSize !== undefined && args.valueBitSize !== null) {
      this.valueBitSize = args.valueBitSize;
    }
    if (args.fullBitSize !== undefined && args.fullBitSize !== null) {
      this.fullBitSize = args.fullBitSize;
    }
    if (args.defaultBase !== undefined && args.defaultBase !== null) {
      this.defaultBase = args.defaultBase;
    }
    if (args.usesMask !== undefined && args.usesMask !== null) {
      this.usesMask = args.usesMask;
    }
    if (args.masks !== undefined && args.masks !== null) {
      this.masks = Thrift.copyList(args.masks, [ttypes.NamedLocationMask]);
    }
    if (args.description !== undefined && args.description !== null) {
      this.description = args.description;
    }
  }
};
NamedLocation.prototype = {};
NamedLocation.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.nameAlias = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.readonly = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.writeonly = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.location = new shared_ttypes.Location();
        this.location.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRUCT) {
        this.realLocation = new shared_ttypes.Location();
        this.realLocation.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I16) {
        this.valueBitSize = input.readI16().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I16) {
        this.fullBitSize = input.readI16().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I16) {
        this.defaultBase = input.readI16().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.BOOL) {
        this.usesMask = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.LIST) {
        this.masks = [];
        var _rtmp321 = input.readListBegin();
        var _size20 = _rtmp321.size || 0;
        for (var _i22 = 0; _i22 < _size20; ++_i22) {
          var elem23 = null;
          elem23 = new ttypes.NamedLocationMask();
          elem23.read(input);
          this.masks.push(elem23);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.STRING) {
        this.description = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NamedLocation.prototype.write = function(output) {
  output.writeStructBegin('NamedLocation');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.nameAlias !== null && this.nameAlias !== undefined) {
    output.writeFieldBegin('nameAlias', Thrift.Type.STRING, 2);
    output.writeString(this.nameAlias);
    output.writeFieldEnd();
  }
  if (this.readonly !== null && this.readonly !== undefined) {
    output.writeFieldBegin('readonly', Thrift.Type.BOOL, 4);
    output.writeBool(this.readonly);
    output.writeFieldEnd();
  }
  if (this.writeonly !== null && this.writeonly !== undefined) {
    output.writeFieldBegin('writeonly', Thrift.Type.BOOL, 5);
    output.writeBool(this.writeonly);
    output.writeFieldEnd();
  }
  if (this.location !== null && this.location !== undefined) {
    output.writeFieldBegin('location', Thrift.Type.STRUCT, 6);
    this.location.write(output);
    output.writeFieldEnd();
  }
  if (this.realLocation !== null && this.realLocation !== undefined) {
    output.writeFieldBegin('realLocation', Thrift.Type.STRUCT, 7);
    this.realLocation.write(output);
    output.writeFieldEnd();
  }
  if (this.valueBitSize !== null && this.valueBitSize !== undefined) {
    output.writeFieldBegin('valueBitSize', Thrift.Type.I16, 8);
    output.writeI16(this.valueBitSize);
    output.writeFieldEnd();
  }
  if (this.fullBitSize !== null && this.fullBitSize !== undefined) {
    output.writeFieldBegin('fullBitSize', Thrift.Type.I16, 9);
    output.writeI16(this.fullBitSize);
    output.writeFieldEnd();
  }
  if (this.defaultBase !== null && this.defaultBase !== undefined) {
    output.writeFieldBegin('defaultBase', Thrift.Type.I16, 10);
    output.writeI16(this.defaultBase);
    output.writeFieldEnd();
  }
  if (this.usesMask !== null && this.usesMask !== undefined) {
    output.writeFieldBegin('usesMask', Thrift.Type.BOOL, 11);
    output.writeBool(this.usesMask);
    output.writeFieldEnd();
  }
  if (this.masks !== null && this.masks !== undefined) {
    output.writeFieldBegin('masks', Thrift.Type.LIST, 12);
    output.writeListBegin(Thrift.Type.STRUCT, this.masks.length);
    for (var iter24 in this.masks) {
      if (this.masks.hasOwnProperty(iter24)) {
        iter24 = this.masks[iter24];
        iter24.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.description !== null && this.description !== undefined) {
    output.writeFieldBegin('description', Thrift.Type.STRING, 13);
    output.writeString(this.description);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ExtraDebugFile = module.exports.ExtraDebugFile = function(args) {
  this.doDownload = null;
  this.path = null;
  this.offset = null;
  if (args) {
    if (args.doDownload !== undefined && args.doDownload !== null) {
      this.doDownload = args.doDownload;
    }
    if (args.path !== undefined && args.path !== null) {
      this.path = args.path;
    }
    if (args.offset !== undefined && args.offset !== null) {
      this.offset = args.offset;
    }
  }
};
ExtraDebugFile.prototype = {};
ExtraDebugFile.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.doDownload = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.path = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.offset = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ExtraDebugFile.prototype.write = function(output) {
  output.writeStructBegin('ExtraDebugFile');
  if (this.doDownload !== null && this.doDownload !== undefined) {
    output.writeFieldBegin('doDownload', Thrift.Type.BOOL, 1);
    output.writeBool(this.doDownload);
    output.writeFieldEnd();
  }
  if (this.path !== null && this.path !== undefined) {
    output.writeFieldBegin('path', Thrift.Type.STRING, 2);
    output.writeString(this.path);
    output.writeFieldEnd();
  }
  if (this.offset !== null && this.offset !== undefined) {
    output.writeFieldBegin('offset', Thrift.Type.I64, 3);
    output.writeI64(this.offset);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ModuleLoadingOptions = module.exports.ModuleLoadingOptions = function(args) {
  this.resetAfterLoad = null;
  this.callUserMacros = null;
  this.onlyPrefixNotation = null;
  this.suppressDownload = null;
  this.shouldAttach = null;
  this.shouldLeaveRunning = null;
  this.extraDebugFiles = null;
  if (args) {
    if (args.resetAfterLoad !== undefined && args.resetAfterLoad !== null) {
      this.resetAfterLoad = args.resetAfterLoad;
    }
    if (args.callUserMacros !== undefined && args.callUserMacros !== null) {
      this.callUserMacros = args.callUserMacros;
    }
    if (args.onlyPrefixNotation !== undefined && args.onlyPrefixNotation !== null) {
      this.onlyPrefixNotation = args.onlyPrefixNotation;
    }
    if (args.suppressDownload !== undefined && args.suppressDownload !== null) {
      this.suppressDownload = args.suppressDownload;
    }
    if (args.shouldAttach !== undefined && args.shouldAttach !== null) {
      this.shouldAttach = args.shouldAttach;
    }
    if (args.shouldLeaveRunning !== undefined && args.shouldLeaveRunning !== null) {
      this.shouldLeaveRunning = args.shouldLeaveRunning;
    }
    if (args.extraDebugFiles !== undefined && args.extraDebugFiles !== null) {
      this.extraDebugFiles = Thrift.copyList(args.extraDebugFiles, [ttypes.ExtraDebugFile]);
    }
  }
};
ModuleLoadingOptions.prototype = {};
ModuleLoadingOptions.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.resetAfterLoad = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.callUserMacros = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.onlyPrefixNotation = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.suppressDownload = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.shouldAttach = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.shouldLeaveRunning = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.LIST) {
        this.extraDebugFiles = [];
        var _rtmp326 = input.readListBegin();
        var _size25 = _rtmp326.size || 0;
        for (var _i27 = 0; _i27 < _size25; ++_i27) {
          var elem28 = null;
          elem28 = new ttypes.ExtraDebugFile();
          elem28.read(input);
          this.extraDebugFiles.push(elem28);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ModuleLoadingOptions.prototype.write = function(output) {
  output.writeStructBegin('ModuleLoadingOptions');
  if (this.resetAfterLoad !== null && this.resetAfterLoad !== undefined) {
    output.writeFieldBegin('resetAfterLoad', Thrift.Type.BOOL, 1);
    output.writeBool(this.resetAfterLoad);
    output.writeFieldEnd();
  }
  if (this.callUserMacros !== null && this.callUserMacros !== undefined) {
    output.writeFieldBegin('callUserMacros', Thrift.Type.BOOL, 2);
    output.writeBool(this.callUserMacros);
    output.writeFieldEnd();
  }
  if (this.onlyPrefixNotation !== null && this.onlyPrefixNotation !== undefined) {
    output.writeFieldBegin('onlyPrefixNotation', Thrift.Type.BOOL, 3);
    output.writeBool(this.onlyPrefixNotation);
    output.writeFieldEnd();
  }
  if (this.suppressDownload !== null && this.suppressDownload !== undefined) {
    output.writeFieldBegin('suppressDownload', Thrift.Type.BOOL, 4);
    output.writeBool(this.suppressDownload);
    output.writeFieldEnd();
  }
  if (this.shouldAttach !== null && this.shouldAttach !== undefined) {
    output.writeFieldBegin('shouldAttach', Thrift.Type.BOOL, 5);
    output.writeBool(this.shouldAttach);
    output.writeFieldEnd();
  }
  if (this.shouldLeaveRunning !== null && this.shouldLeaveRunning !== undefined) {
    output.writeFieldBegin('shouldLeaveRunning', Thrift.Type.BOOL, 6);
    output.writeBool(this.shouldLeaveRunning);
    output.writeFieldEnd();
  }
  if (this.extraDebugFiles !== null && this.extraDebugFiles !== undefined) {
    output.writeFieldBegin('extraDebugFiles', Thrift.Type.LIST, 7);
    output.writeListBegin(Thrift.Type.STRUCT, this.extraDebugFiles.length);
    for (var iter29 in this.extraDebugFiles) {
      if (this.extraDebugFiles.hasOwnProperty(iter29)) {
        iter29 = this.extraDebugFiles[iter29];
        iter29.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ResetStyles = module.exports.ResetStyles = function(args) {
  this.name = null;
  this.id = null;
  this.selected = null;
  this.tooltip = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.selected !== undefined && args.selected !== null) {
      this.selected = args.selected;
    }
    if (args.tooltip !== undefined && args.tooltip !== null) {
      this.tooltip = args.tooltip;
    }
  }
};
ResetStyles.prototype = {};
ResetStyles.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.selected = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.tooltip = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ResetStyles.prototype.write = function(output) {
  output.writeStructBegin('ResetStyles');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 2);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.selected !== null && this.selected !== undefined) {
    output.writeFieldBegin('selected', Thrift.Type.BOOL, 3);
    output.writeBool(this.selected);
    output.writeFieldEnd();
  }
  if (this.tooltip !== null && this.tooltip !== undefined) {
    output.writeFieldBegin('tooltip', Thrift.Type.STRING, 4);
    output.writeString(this.tooltip);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DebugSettings = module.exports.DebugSettings = function(args) {
  this.alwaysPickAllInstances = null;
  this.enterFunctionsWithoutSource = null;
  this.stlDepth = null;
  this.staticWatchUpdateInterval = null;
  this.memoryWindowUpdateInterval = null;
  this.globalIntegerFormat = null;
  if (args) {
    if (args.alwaysPickAllInstances !== undefined && args.alwaysPickAllInstances !== null) {
      this.alwaysPickAllInstances = args.alwaysPickAllInstances;
    }
    if (args.enterFunctionsWithoutSource !== undefined && args.enterFunctionsWithoutSource !== null) {
      this.enterFunctionsWithoutSource = args.enterFunctionsWithoutSource;
    }
    if (args.stlDepth !== undefined && args.stlDepth !== null) {
      this.stlDepth = args.stlDepth;
    }
    if (args.staticWatchUpdateInterval !== undefined && args.staticWatchUpdateInterval !== null) {
      this.staticWatchUpdateInterval = args.staticWatchUpdateInterval;
    }
    if (args.memoryWindowUpdateInterval !== undefined && args.memoryWindowUpdateInterval !== null) {
      this.memoryWindowUpdateInterval = args.memoryWindowUpdateInterval;
    }
    if (args.globalIntegerFormat !== undefined && args.globalIntegerFormat !== null) {
      this.globalIntegerFormat = args.globalIntegerFormat;
    }
  }
};
DebugSettings.prototype = {};
DebugSettings.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.alwaysPickAllInstances = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.enterFunctionsWithoutSource = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.stlDepth = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.staticWatchUpdateInterval = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.memoryWindowUpdateInterval = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.globalIntegerFormat = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DebugSettings.prototype.write = function(output) {
  output.writeStructBegin('DebugSettings');
  if (this.alwaysPickAllInstances !== null && this.alwaysPickAllInstances !== undefined) {
    output.writeFieldBegin('alwaysPickAllInstances', Thrift.Type.BOOL, 1);
    output.writeBool(this.alwaysPickAllInstances);
    output.writeFieldEnd();
  }
  if (this.enterFunctionsWithoutSource !== null && this.enterFunctionsWithoutSource !== undefined) {
    output.writeFieldBegin('enterFunctionsWithoutSource', Thrift.Type.BOOL, 2);
    output.writeBool(this.enterFunctionsWithoutSource);
    output.writeFieldEnd();
  }
  if (this.stlDepth !== null && this.stlDepth !== undefined) {
    output.writeFieldBegin('stlDepth', Thrift.Type.I32, 3);
    output.writeI32(this.stlDepth);
    output.writeFieldEnd();
  }
  if (this.staticWatchUpdateInterval !== null && this.staticWatchUpdateInterval !== undefined) {
    output.writeFieldBegin('staticWatchUpdateInterval', Thrift.Type.I32, 4);
    output.writeI32(this.staticWatchUpdateInterval);
    output.writeFieldEnd();
  }
  if (this.memoryWindowUpdateInterval !== null && this.memoryWindowUpdateInterval !== undefined) {
    output.writeFieldBegin('memoryWindowUpdateInterval', Thrift.Type.I32, 5);
    output.writeI32(this.memoryWindowUpdateInterval);
    output.writeFieldEnd();
  }
  if (this.globalIntegerFormat !== null && this.globalIntegerFormat !== undefined) {
    output.writeFieldBegin('globalIntegerFormat', Thrift.Type.I32, 6);
    output.writeI32(this.globalIntegerFormat);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ttypes.DEBUGGER_SERVICE = 'debugger';
ttypes.DEBUGEVENT_SERVICE = 'debugger.eventhandler';
ttypes.CONTEXT_MANAGER_SERVICE = 'debugger.contextmanager';
ttypes.MEMORY_SERVICE = 'debugger.memory';
