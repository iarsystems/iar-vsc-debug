//
// Autogenerated by Thrift Compiler (0.14.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
if (typeof Int64 === 'undefined' && typeof require === 'function') {
  var Int64 = require('node-int64');
}


//HELPER FUNCTIONS AND STRUCTURES

var LibSupportService2_requestInputBinary_args = function(args) {
  this.len = null;
  if (args) {
    if (args.len !== undefined && args.len !== null) {
      this.len = args.len;
    }
  }
};
LibSupportService2_requestInputBinary_args.prototype = {};
LibSupportService2_requestInputBinary_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.len = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LibSupportService2_requestInputBinary_args.prototype.write = function(output) {
  output.writeStructBegin('LibSupportService2_requestInputBinary_args');
  if (this.len !== null && this.len !== undefined) {
    output.writeFieldBegin('len', Thrift.Type.I32, 1);
    output.writeI32(this.len);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LibSupportService2_requestInputBinary_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
LibSupportService2_requestInputBinary_result.prototype = {};
LibSupportService2_requestInputBinary_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LibSupportService2_requestInputBinary_result.prototype.write = function(output) {
  output.writeStructBegin('LibSupportService2_requestInputBinary_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeBinary(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LibSupportService2_requestInput_args = function(args) {
  this.len = null;
  if (args) {
    if (args.len !== undefined && args.len !== null) {
      this.len = args.len;
    }
  }
};
LibSupportService2_requestInput_args.prototype = {};
LibSupportService2_requestInput_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.len = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LibSupportService2_requestInput_args.prototype.write = function(output) {
  output.writeStructBegin('LibSupportService2_requestInput_args');
  if (this.len !== null && this.len !== undefined) {
    output.writeFieldBegin('len', Thrift.Type.I32, 1);
    output.writeI32(this.len);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LibSupportService2_requestInput_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
LibSupportService2_requestInput_result.prototype = {};
LibSupportService2_requestInput_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LibSupportService2_requestInput_result.prototype.write = function(output) {
  output.writeStructBegin('LibSupportService2_requestInput_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LibSupportService2_printOutputBinary_args = function(args) {
  this.data = null;
  if (args) {
    if (args.data !== undefined && args.data !== null) {
      this.data = args.data;
    }
  }
};
LibSupportService2_printOutputBinary_args.prototype = {};
LibSupportService2_printOutputBinary_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.data = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LibSupportService2_printOutputBinary_args.prototype.write = function(output) {
  output.writeStructBegin('LibSupportService2_printOutputBinary_args');
  if (this.data !== null && this.data !== undefined) {
    output.writeFieldBegin('data', Thrift.Type.STRING, 1);
    output.writeBinary(this.data);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LibSupportService2_printOutputBinary_result = function(args) {
};
LibSupportService2_printOutputBinary_result.prototype = {};
LibSupportService2_printOutputBinary_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LibSupportService2_printOutputBinary_result.prototype.write = function(output) {
  output.writeStructBegin('LibSupportService2_printOutputBinary_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LibSupportService2_printOutput_args = function(args) {
  this.data = null;
  if (args) {
    if (args.data !== undefined && args.data !== null) {
      this.data = args.data;
    }
  }
};
LibSupportService2_printOutput_args.prototype = {};
LibSupportService2_printOutput_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.data = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LibSupportService2_printOutput_args.prototype.write = function(output) {
  output.writeStructBegin('LibSupportService2_printOutput_args');
  if (this.data !== null && this.data !== undefined) {
    output.writeFieldBegin('data', Thrift.Type.STRING, 1);
    output.writeString(this.data);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LibSupportService2_printOutput_result = function(args) {
};
LibSupportService2_printOutput_result.prototype = {};
LibSupportService2_printOutput_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LibSupportService2_printOutput_result.prototype.write = function(output) {
  output.writeStructBegin('LibSupportService2_printOutput_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LibSupportService2_exit_args = function(args) {
  this.code = null;
  if (args) {
    if (args.code !== undefined && args.code !== null) {
      this.code = args.code;
    }
  }
};
LibSupportService2_exit_args.prototype = {};
LibSupportService2_exit_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.code = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LibSupportService2_exit_args.prototype.write = function(output) {
  output.writeStructBegin('LibSupportService2_exit_args');
  if (this.code !== null && this.code !== undefined) {
    output.writeFieldBegin('code', Thrift.Type.I32, 1);
    output.writeI32(this.code);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LibSupportService2_exit_result = function(args) {
};
LibSupportService2_exit_result.prototype = {};
LibSupportService2_exit_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LibSupportService2_exit_result.prototype.write = function(output) {
  output.writeStructBegin('LibSupportService2_exit_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LibSupportService2_reportAssert_args = function(args) {
  this.file = null;
  this.line = null;
  this.message = null;
  if (args) {
    if (args.file !== undefined && args.file !== null) {
      this.file = args.file;
    }
    if (args.line !== undefined && args.line !== null) {
      this.line = args.line;
    }
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
  }
};
LibSupportService2_reportAssert_args.prototype = {};
LibSupportService2_reportAssert_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.file = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.line = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LibSupportService2_reportAssert_args.prototype.write = function(output) {
  output.writeStructBegin('LibSupportService2_reportAssert_args');
  if (this.file !== null && this.file !== undefined) {
    output.writeFieldBegin('file', Thrift.Type.STRING, 1);
    output.writeString(this.file);
    output.writeFieldEnd();
  }
  if (this.line !== null && this.line !== undefined) {
    output.writeFieldBegin('line', Thrift.Type.STRING, 2);
    output.writeString(this.line);
    output.writeFieldEnd();
  }
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 3);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LibSupportService2_reportAssert_result = function(args) {
};
LibSupportService2_reportAssert_result.prototype = {};
LibSupportService2_reportAssert_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LibSupportService2_reportAssert_result.prototype.write = function(output) {
  output.writeStructBegin('LibSupportService2_reportAssert_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LibSupportService2Client = exports.Client = function(input, output) {
  this.input = input;
  this.output = (!output) ? input : output;
  this.seqid = 0;
};
LibSupportService2Client.prototype = {};

LibSupportService2Client.prototype.requestInputBinary = function(len, callback) {
  this.send_requestInputBinary(len, callback); 
  if (!callback) {
    return this.recv_requestInputBinary();
  }
};

LibSupportService2Client.prototype.send_requestInputBinary = function(len, callback) {
  var params = {
    len: len
  };
  var args = new LibSupportService2_requestInputBinary_args(params);
  try {
    this.output.writeMessageBegin('requestInputBinary', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_requestInputBinary();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

LibSupportService2Client.prototype.recv_requestInputBinary = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new LibSupportService2_requestInputBinary_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'requestInputBinary failed: unknown result';
};

LibSupportService2Client.prototype.requestInput = function(len, callback) {
  this.send_requestInput(len, callback); 
  if (!callback) {
    return this.recv_requestInput();
  }
};

LibSupportService2Client.prototype.send_requestInput = function(len, callback) {
  var params = {
    len: len
  };
  var args = new LibSupportService2_requestInput_args(params);
  try {
    this.output.writeMessageBegin('requestInput', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_requestInput();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

LibSupportService2Client.prototype.recv_requestInput = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new LibSupportService2_requestInput_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'requestInput failed: unknown result';
};

LibSupportService2Client.prototype.printOutputBinary = function(data, callback) {
  this.send_printOutputBinary(data, callback); 
  if (!callback) {
  this.recv_printOutputBinary();
  }
};

LibSupportService2Client.prototype.send_printOutputBinary = function(data, callback) {
  var params = {
    data: data
  };
  var args = new LibSupportService2_printOutputBinary_args(params);
  try {
    this.output.writeMessageBegin('printOutputBinary', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_printOutputBinary();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

LibSupportService2Client.prototype.recv_printOutputBinary = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new LibSupportService2_printOutputBinary_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};

LibSupportService2Client.prototype.printOutput = function(data, callback) {
  this.send_printOutput(data, callback); 
  if (!callback) {
  this.recv_printOutput();
  }
};

LibSupportService2Client.prototype.send_printOutput = function(data, callback) {
  var params = {
    data: data
  };
  var args = new LibSupportService2_printOutput_args(params);
  try {
    this.output.writeMessageBegin('printOutput', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_printOutput();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

LibSupportService2Client.prototype.recv_printOutput = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new LibSupportService2_printOutput_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};

LibSupportService2Client.prototype.exit = function(code, callback) {
  this.send_exit(code, callback); 
  if (!callback) {
  this.recv_exit();
  }
};

LibSupportService2Client.prototype.send_exit = function(code, callback) {
  var params = {
    code: code
  };
  var args = new LibSupportService2_exit_args(params);
  try {
    this.output.writeMessageBegin('exit', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_exit();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

LibSupportService2Client.prototype.recv_exit = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new LibSupportService2_exit_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};

LibSupportService2Client.prototype.reportAssert = function(file, line, message, callback) {
  this.send_reportAssert(file, line, message, callback); 
  if (!callback) {
  this.recv_reportAssert();
  }
};

LibSupportService2Client.prototype.send_reportAssert = function(file, line, message, callback) {
  var params = {
    file: file,
    line: line,
    message: message
  };
  var args = new LibSupportService2_reportAssert_args(params);
  try {
    this.output.writeMessageBegin('reportAssert', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_reportAssert();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

LibSupportService2Client.prototype.recv_reportAssert = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new LibSupportService2_reportAssert_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};
