//
// Autogenerated by Thrift Compiler (0.14.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
if (typeof Int64 === 'undefined' && typeof require === 'function') {
  var Int64 = require('node-int64');
}


var ttypes = module.exports = {};
ttypes.OutputType = {
  '0' : 'exe',
  'exe' : 0,
  '1' : 'lib',
  'lib' : 1
};
ttypes.FileCategory = {
  '0' : 'kDoc',
  'kDoc' : 0,
  '1' : 'kHeader',
  'kHeader' : 1,
  '2' : 'kInclude',
  'kInclude' : 2,
  '3' : 'kLibrary',
  'kLibrary' : 3,
  '4' : 'kObject',
  'kObject' : 4,
  '5' : 'kSource',
  'kSource' : 5,
  '6' : 'kSourceC',
  'kSourceC' : 6,
  '7' : 'kSourceCpp',
  'kSourceCpp' : 7,
  '8' : 'kSourceAsm',
  'kSourceAsm' : 8,
  '9' : 'kLinkerScript',
  'kLinkerScript' : 9,
  '10' : 'kUtility',
  'kUtility' : 10,
  '11' : 'kImage',
  'kImage' : 11,
  '12' : 'kOther',
  'kOther' : 12
};
var FileInfo = module.exports.FileInfo = function(args) {
  this.name = null;
  this.attr = null;
  this.category = null;
  this.isGenerated = null;
  this.projectRelativePath = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.attr !== undefined && args.attr !== null) {
      this.attr = args.attr;
    }
    if (args.category !== undefined && args.category !== null) {
      this.category = args.category;
    }
    if (args.isGenerated !== undefined && args.isGenerated !== null) {
      this.isGenerated = args.isGenerated;
    }
    if (args.projectRelativePath !== undefined && args.projectRelativePath !== null) {
      this.projectRelativePath = args.projectRelativePath;
    }
  }
};
FileInfo.prototype = {};
FileInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.attr = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.category = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.isGenerated = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.projectRelativePath = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FileInfo.prototype.write = function(output) {
  output.writeStructBegin('FileInfo');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.attr !== null && this.attr !== undefined) {
    output.writeFieldBegin('attr', Thrift.Type.STRING, 2);
    output.writeString(this.attr);
    output.writeFieldEnd();
  }
  if (this.category !== null && this.category !== undefined) {
    output.writeFieldBegin('category', Thrift.Type.I32, 3);
    output.writeI32(this.category);
    output.writeFieldEnd();
  }
  if (this.isGenerated !== null && this.isGenerated !== undefined) {
    output.writeFieldBegin('isGenerated', Thrift.Type.BOOL, 4);
    output.writeBool(this.isGenerated);
    output.writeFieldEnd();
  }
  if (this.projectRelativePath !== null && this.projectRelativePath !== undefined) {
    output.writeFieldBegin('projectRelativePath', Thrift.Type.STRING, 5);
    output.writeString(this.projectRelativePath);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ComponentInfo = module.exports.ComponentInfo = function(args) {
  this.deviceClass = null;
  this.group = null;
  this.vendor = null;
  this.version = null;
  this.variant = null;
  this.sub = null;
  this.generator = null;
  this.id = null;
  this.packId = null;
  this.rteComponentsH = null;
  this.selectedCount = null;
  this.sourceFiles = null;
  if (args) {
    if (args.deviceClass !== undefined && args.deviceClass !== null) {
      this.deviceClass = args.deviceClass;
    }
    if (args.group !== undefined && args.group !== null) {
      this.group = args.group;
    }
    if (args.vendor !== undefined && args.vendor !== null) {
      this.vendor = args.vendor;
    }
    if (args.version !== undefined && args.version !== null) {
      this.version = args.version;
    }
    if (args.variant !== undefined && args.variant !== null) {
      this.variant = args.variant;
    }
    if (args.sub !== undefined && args.sub !== null) {
      this.sub = args.sub;
    }
    if (args.generator !== undefined && args.generator !== null) {
      this.generator = args.generator;
    }
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.packId !== undefined && args.packId !== null) {
      this.packId = args.packId;
    }
    if (args.rteComponentsH !== undefined && args.rteComponentsH !== null) {
      this.rteComponentsH = args.rteComponentsH;
    }
    if (args.selectedCount !== undefined && args.selectedCount !== null) {
      this.selectedCount = args.selectedCount;
    }
    if (args.sourceFiles !== undefined && args.sourceFiles !== null) {
      this.sourceFiles = Thrift.copyList(args.sourceFiles, [ttypes.FileInfo]);
    }
  }
};
ComponentInfo.prototype = {};
ComponentInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.deviceClass = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.group = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.vendor = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.version = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.variant = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.sub = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.generator = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.packId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.rteComponentsH = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.I32) {
        this.selectedCount = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.LIST) {
        this.sourceFiles = [];
        var _rtmp31 = input.readListBegin();
        var _size0 = _rtmp31.size || 0;
        for (var _i2 = 0; _i2 < _size0; ++_i2) {
          var elem3 = null;
          elem3 = new ttypes.FileInfo();
          elem3.read(input);
          this.sourceFiles.push(elem3);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ComponentInfo.prototype.write = function(output) {
  output.writeStructBegin('ComponentInfo');
  if (this.deviceClass !== null && this.deviceClass !== undefined) {
    output.writeFieldBegin('deviceClass', Thrift.Type.STRING, 1);
    output.writeString(this.deviceClass);
    output.writeFieldEnd();
  }
  if (this.group !== null && this.group !== undefined) {
    output.writeFieldBegin('group', Thrift.Type.STRING, 2);
    output.writeString(this.group);
    output.writeFieldEnd();
  }
  if (this.vendor !== null && this.vendor !== undefined) {
    output.writeFieldBegin('vendor', Thrift.Type.STRING, 3);
    output.writeString(this.vendor);
    output.writeFieldEnd();
  }
  if (this.version !== null && this.version !== undefined) {
    output.writeFieldBegin('version', Thrift.Type.STRING, 4);
    output.writeString(this.version);
    output.writeFieldEnd();
  }
  if (this.variant !== null && this.variant !== undefined) {
    output.writeFieldBegin('variant', Thrift.Type.STRING, 5);
    output.writeString(this.variant);
    output.writeFieldEnd();
  }
  if (this.sub !== null && this.sub !== undefined) {
    output.writeFieldBegin('sub', Thrift.Type.STRING, 6);
    output.writeString(this.sub);
    output.writeFieldEnd();
  }
  if (this.generator !== null && this.generator !== undefined) {
    output.writeFieldBegin('generator', Thrift.Type.STRING, 7);
    output.writeString(this.generator);
    output.writeFieldEnd();
  }
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 8);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.packId !== null && this.packId !== undefined) {
    output.writeFieldBegin('packId', Thrift.Type.STRING, 9);
    output.writeString(this.packId);
    output.writeFieldEnd();
  }
  if (this.rteComponentsH !== null && this.rteComponentsH !== undefined) {
    output.writeFieldBegin('rteComponentsH', Thrift.Type.STRING, 10);
    output.writeString(this.rteComponentsH);
    output.writeFieldEnd();
  }
  if (this.selectedCount !== null && this.selectedCount !== undefined) {
    output.writeFieldBegin('selectedCount', Thrift.Type.I32, 11);
    output.writeI32(this.selectedCount);
    output.writeFieldEnd();
  }
  if (this.sourceFiles !== null && this.sourceFiles !== undefined) {
    output.writeFieldBegin('sourceFiles', Thrift.Type.LIST, 12);
    output.writeListBegin(Thrift.Type.STRUCT, this.sourceFiles.length);
    for (var iter4 in this.sourceFiles) {
      if (this.sourceFiles.hasOwnProperty(iter4)) {
        iter4 = this.sourceFiles[iter4];
        iter4.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CompileInfo = module.exports.CompileInfo = function(args) {
  this.Pname = null;
  this.header = null;
  this.define = null;
  if (args) {
    if (args.Pname !== undefined && args.Pname !== null) {
      this.Pname = args.Pname;
    }
    if (args.header !== undefined && args.header !== null) {
      this.header = args.header;
    }
    if (args.define !== undefined && args.define !== null) {
      this.define = args.define;
    }
  }
};
CompileInfo.prototype = {};
CompileInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.Pname = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.header = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.define = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CompileInfo.prototype.write = function(output) {
  output.writeStructBegin('CompileInfo');
  if (this.Pname !== null && this.Pname !== undefined) {
    output.writeFieldBegin('Pname', Thrift.Type.STRING, 1);
    output.writeString(this.Pname);
    output.writeFieldEnd();
  }
  if (this.header !== null && this.header !== undefined) {
    output.writeFieldBegin('header', Thrift.Type.STRING, 2);
    output.writeString(this.header);
    output.writeFieldEnd();
  }
  if (this.define !== null && this.define !== undefined) {
    output.writeFieldBegin('define', Thrift.Type.STRING, 3);
    output.writeString(this.define);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProcessorInfo = module.exports.ProcessorInfo = function(args) {
  this.Pname = null;
  this.Dvendor = null;
  this.Dcore = null;
  this.Dfpu = null;
  this.Dmpu = null;
  this.Dendian = null;
  this.Dclock = null;
  this.DcoreVersion = null;
  if (args) {
    if (args.Pname !== undefined && args.Pname !== null) {
      this.Pname = args.Pname;
    }
    if (args.Dvendor !== undefined && args.Dvendor !== null) {
      this.Dvendor = args.Dvendor;
    }
    if (args.Dcore !== undefined && args.Dcore !== null) {
      this.Dcore = args.Dcore;
    }
    if (args.Dfpu !== undefined && args.Dfpu !== null) {
      this.Dfpu = args.Dfpu;
    }
    if (args.Dmpu !== undefined && args.Dmpu !== null) {
      this.Dmpu = args.Dmpu;
    }
    if (args.Dendian !== undefined && args.Dendian !== null) {
      this.Dendian = args.Dendian;
    }
    if (args.Dclock !== undefined && args.Dclock !== null) {
      this.Dclock = args.Dclock;
    }
    if (args.DcoreVersion !== undefined && args.DcoreVersion !== null) {
      this.DcoreVersion = args.DcoreVersion;
    }
  }
};
ProcessorInfo.prototype = {};
ProcessorInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.Pname = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.Dvendor = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.Dcore = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.Dfpu = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.Dmpu = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.Dendian = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.Dclock = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.DcoreVersion = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProcessorInfo.prototype.write = function(output) {
  output.writeStructBegin('ProcessorInfo');
  if (this.Pname !== null && this.Pname !== undefined) {
    output.writeFieldBegin('Pname', Thrift.Type.STRING, 1);
    output.writeString(this.Pname);
    output.writeFieldEnd();
  }
  if (this.Dvendor !== null && this.Dvendor !== undefined) {
    output.writeFieldBegin('Dvendor', Thrift.Type.STRING, 2);
    output.writeString(this.Dvendor);
    output.writeFieldEnd();
  }
  if (this.Dcore !== null && this.Dcore !== undefined) {
    output.writeFieldBegin('Dcore', Thrift.Type.STRING, 3);
    output.writeString(this.Dcore);
    output.writeFieldEnd();
  }
  if (this.Dfpu !== null && this.Dfpu !== undefined) {
    output.writeFieldBegin('Dfpu', Thrift.Type.STRING, 4);
    output.writeString(this.Dfpu);
    output.writeFieldEnd();
  }
  if (this.Dmpu !== null && this.Dmpu !== undefined) {
    output.writeFieldBegin('Dmpu', Thrift.Type.STRING, 5);
    output.writeString(this.Dmpu);
    output.writeFieldEnd();
  }
  if (this.Dendian !== null && this.Dendian !== undefined) {
    output.writeFieldBegin('Dendian', Thrift.Type.STRING, 6);
    output.writeString(this.Dendian);
    output.writeFieldEnd();
  }
  if (this.Dclock !== null && this.Dclock !== undefined) {
    output.writeFieldBegin('Dclock', Thrift.Type.STRING, 7);
    output.writeString(this.Dclock);
    output.writeFieldEnd();
  }
  if (this.DcoreVersion !== null && this.DcoreVersion !== undefined) {
    output.writeFieldBegin('DcoreVersion', Thrift.Type.STRING, 8);
    output.writeString(this.DcoreVersion);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DeviceInfo = module.exports.DeviceInfo = function(args) {
  this.id = null;
  this.name = null;
  this.packId = null;
  this.family = null;
  this.vendor = null;
  this.subFamily = null;
  this.variant = null;
  this.compile = null;
  this.processor = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.packId !== undefined && args.packId !== null) {
      this.packId = args.packId;
    }
    if (args.family !== undefined && args.family !== null) {
      this.family = args.family;
    }
    if (args.vendor !== undefined && args.vendor !== null) {
      this.vendor = args.vendor;
    }
    if (args.subFamily !== undefined && args.subFamily !== null) {
      this.subFamily = args.subFamily;
    }
    if (args.variant !== undefined && args.variant !== null) {
      this.variant = args.variant;
    }
    if (args.compile !== undefined && args.compile !== null) {
      this.compile = Thrift.copyList(args.compile, [ttypes.CompileInfo]);
    }
    if (args.processor !== undefined && args.processor !== null) {
      this.processor = Thrift.copyList(args.processor, [ttypes.ProcessorInfo]);
    }
  }
};
DeviceInfo.prototype = {};
DeviceInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.packId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.family = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.vendor = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.subFamily = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.variant = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.LIST) {
        this.compile = [];
        var _rtmp36 = input.readListBegin();
        var _size5 = _rtmp36.size || 0;
        for (var _i7 = 0; _i7 < _size5; ++_i7) {
          var elem8 = null;
          elem8 = new ttypes.CompileInfo();
          elem8.read(input);
          this.compile.push(elem8);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.LIST) {
        this.processor = [];
        var _rtmp310 = input.readListBegin();
        var _size9 = _rtmp310.size || 0;
        for (var _i11 = 0; _i11 < _size9; ++_i11) {
          var elem12 = null;
          elem12 = new ttypes.ProcessorInfo();
          elem12.read(input);
          this.processor.push(elem12);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DeviceInfo.prototype.write = function(output) {
  output.writeStructBegin('DeviceInfo');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.packId !== null && this.packId !== undefined) {
    output.writeFieldBegin('packId', Thrift.Type.STRING, 3);
    output.writeString(this.packId);
    output.writeFieldEnd();
  }
  if (this.family !== null && this.family !== undefined) {
    output.writeFieldBegin('family', Thrift.Type.STRING, 4);
    output.writeString(this.family);
    output.writeFieldEnd();
  }
  if (this.vendor !== null && this.vendor !== undefined) {
    output.writeFieldBegin('vendor', Thrift.Type.STRING, 5);
    output.writeString(this.vendor);
    output.writeFieldEnd();
  }
  if (this.subFamily !== null && this.subFamily !== undefined) {
    output.writeFieldBegin('subFamily', Thrift.Type.STRING, 6);
    output.writeString(this.subFamily);
    output.writeFieldEnd();
  }
  if (this.variant !== null && this.variant !== undefined) {
    output.writeFieldBegin('variant', Thrift.Type.STRING, 7);
    output.writeString(this.variant);
    output.writeFieldEnd();
  }
  if (this.compile !== null && this.compile !== undefined) {
    output.writeFieldBegin('compile', Thrift.Type.LIST, 8);
    output.writeListBegin(Thrift.Type.STRUCT, this.compile.length);
    for (var iter13 in this.compile) {
      if (this.compile.hasOwnProperty(iter13)) {
        iter13 = this.compile[iter13];
        iter13.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.processor !== null && this.processor !== undefined) {
    output.writeFieldBegin('processor', Thrift.Type.LIST, 9);
    output.writeListBegin(Thrift.Type.STRUCT, this.processor.length);
    for (var iter14 in this.processor) {
      if (this.processor.hasOwnProperty(iter14)) {
        iter14 = this.processor[iter14];
        iter14.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ValidationStatus = module.exports.ValidationStatus = function(args) {
  this.id = null;
  this.result = null;
  this.fulfilled = null;
  this.description = null;
  this.children = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.result !== undefined && args.result !== null) {
      this.result = args.result;
    }
    if (args.fulfilled !== undefined && args.fulfilled !== null) {
      this.fulfilled = args.fulfilled;
    }
    if (args.description !== undefined && args.description !== null) {
      this.description = args.description;
    }
    if (args.children !== undefined && args.children !== null) {
      this.children = Thrift.copyList(args.children, [null]);
    }
  }
};
ValidationStatus.prototype = {};
ValidationStatus.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.result = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.fulfilled = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.description = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        this.children = [];
        var _rtmp316 = input.readListBegin();
        var _size15 = _rtmp316.size || 0;
        for (var _i17 = 0; _i17 < _size15; ++_i17) {
          var elem18 = null;
          elem18 = new ttypes.ValidationStatus();
          elem18.read(input);
          this.children.push(elem18);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ValidationStatus.prototype.write = function(output) {
  output.writeStructBegin('ValidationStatus');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRING, 2);
    output.writeString(this.result);
    output.writeFieldEnd();
  }
  if (this.fulfilled !== null && this.fulfilled !== undefined) {
    output.writeFieldBegin('fulfilled', Thrift.Type.BOOL, 3);
    output.writeBool(this.fulfilled);
    output.writeFieldEnd();
  }
  if (this.description !== null && this.description !== undefined) {
    output.writeFieldBegin('description', Thrift.Type.STRING, 4);
    output.writeString(this.description);
    output.writeFieldEnd();
  }
  if (this.children !== null && this.children !== undefined) {
    output.writeFieldBegin('children', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRUCT, this.children.length);
    for (var iter19 in this.children) {
      if (this.children.hasOwnProperty(iter19)) {
        iter19 = this.children[iter19];
        iter19.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Api = module.exports.Api = function(args) {
  this.componentClass = null;
  this.group = null;
  this.apiVersion = null;
  this.vendor = null;
  this.packId = null;
  this.exclusive = null;
  this.description = null;
  this.files = null;
  if (args) {
    if (args.componentClass !== undefined && args.componentClass !== null) {
      this.componentClass = args.componentClass;
    }
    if (args.group !== undefined && args.group !== null) {
      this.group = args.group;
    }
    if (args.apiVersion !== undefined && args.apiVersion !== null) {
      this.apiVersion = args.apiVersion;
    }
    if (args.vendor !== undefined && args.vendor !== null) {
      this.vendor = args.vendor;
    }
    if (args.packId !== undefined && args.packId !== null) {
      this.packId = args.packId;
    }
    if (args.exclusive !== undefined && args.exclusive !== null) {
      this.exclusive = args.exclusive;
    }
    if (args.description !== undefined && args.description !== null) {
      this.description = args.description;
    }
    if (args.files !== undefined && args.files !== null) {
      this.files = Thrift.copyList(args.files, [ttypes.FileInfo]);
    }
  }
};
Api.prototype = {};
Api.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.componentClass = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.group = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.apiVersion = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.vendor = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.packId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.exclusive = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.description = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.LIST) {
        this.files = [];
        var _rtmp321 = input.readListBegin();
        var _size20 = _rtmp321.size || 0;
        for (var _i22 = 0; _i22 < _size20; ++_i22) {
          var elem23 = null;
          elem23 = new ttypes.FileInfo();
          elem23.read(input);
          this.files.push(elem23);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Api.prototype.write = function(output) {
  output.writeStructBegin('Api');
  if (this.componentClass !== null && this.componentClass !== undefined) {
    output.writeFieldBegin('componentClass', Thrift.Type.STRING, 1);
    output.writeString(this.componentClass);
    output.writeFieldEnd();
  }
  if (this.group !== null && this.group !== undefined) {
    output.writeFieldBegin('group', Thrift.Type.STRING, 2);
    output.writeString(this.group);
    output.writeFieldEnd();
  }
  if (this.apiVersion !== null && this.apiVersion !== undefined) {
    output.writeFieldBegin('apiVersion', Thrift.Type.STRING, 3);
    output.writeString(this.apiVersion);
    output.writeFieldEnd();
  }
  if (this.vendor !== null && this.vendor !== undefined) {
    output.writeFieldBegin('vendor', Thrift.Type.STRING, 4);
    output.writeString(this.vendor);
    output.writeFieldEnd();
  }
  if (this.packId !== null && this.packId !== undefined) {
    output.writeFieldBegin('packId', Thrift.Type.STRING, 5);
    output.writeString(this.packId);
    output.writeFieldEnd();
  }
  if (this.exclusive !== null && this.exclusive !== undefined) {
    output.writeFieldBegin('exclusive', Thrift.Type.BOOL, 6);
    output.writeBool(this.exclusive);
    output.writeFieldEnd();
  }
  if (this.description !== null && this.description !== undefined) {
    output.writeFieldBegin('description', Thrift.Type.STRING, 7);
    output.writeString(this.description);
    output.writeFieldEnd();
  }
  if (this.files !== null && this.files !== undefined) {
    output.writeFieldBegin('files', Thrift.Type.LIST, 8);
    output.writeListBegin(Thrift.Type.STRUCT, this.files.length);
    for (var iter24 in this.files) {
      if (this.files.hasOwnProperty(iter24)) {
        iter24 = this.files[iter24];
        iter24.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var FileInPack = module.exports.FileInPack = function(args) {
  this.packId = null;
  this.subPath = null;
  if (args) {
    if (args.packId !== undefined && args.packId !== null) {
      this.packId = args.packId;
    }
    if (args.subPath !== undefined && args.subPath !== null) {
      this.subPath = args.subPath;
    }
  }
};
FileInPack.prototype = {};
FileInPack.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.packId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.subPath = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FileInPack.prototype.write = function(output) {
  output.writeStructBegin('FileInPack');
  if (this.packId !== null && this.packId !== undefined) {
    output.writeFieldBegin('packId', Thrift.Type.STRING, 1);
    output.writeString(this.packId);
    output.writeFieldEnd();
  }
  if (this.subPath !== null && this.subPath !== undefined) {
    output.writeFieldBegin('subPath', Thrift.Type.STRING, 2);
    output.writeString(this.subPath);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var RteFile = module.exports.RteFile = function(args) {
  this.packId = null;
  this.projectRelativePath = null;
  this.packPath = null;
  this.packRelativePath = null;
  this.componentId = null;
  this.category = null;
  this.attr = null;
  this.isGenerated = null;
  if (args) {
    if (args.packId !== undefined && args.packId !== null) {
      this.packId = args.packId;
    }
    if (args.projectRelativePath !== undefined && args.projectRelativePath !== null) {
      this.projectRelativePath = args.projectRelativePath;
    }
    if (args.packPath !== undefined && args.packPath !== null) {
      this.packPath = args.packPath;
    }
    if (args.packRelativePath !== undefined && args.packRelativePath !== null) {
      this.packRelativePath = args.packRelativePath;
    }
    if (args.componentId !== undefined && args.componentId !== null) {
      this.componentId = args.componentId;
    }
    if (args.category !== undefined && args.category !== null) {
      this.category = args.category;
    }
    if (args.attr !== undefined && args.attr !== null) {
      this.attr = args.attr;
    }
    if (args.isGenerated !== undefined && args.isGenerated !== null) {
      this.isGenerated = args.isGenerated;
    }
  }
};
RteFile.prototype = {};
RteFile.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.packId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.projectRelativePath = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.packPath = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.packRelativePath = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.componentId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.category = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.attr = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.BOOL) {
        this.isGenerated = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RteFile.prototype.write = function(output) {
  output.writeStructBegin('RteFile');
  if (this.packId !== null && this.packId !== undefined) {
    output.writeFieldBegin('packId', Thrift.Type.STRING, 1);
    output.writeString(this.packId);
    output.writeFieldEnd();
  }
  if (this.projectRelativePath !== null && this.projectRelativePath !== undefined) {
    output.writeFieldBegin('projectRelativePath', Thrift.Type.STRING, 2);
    output.writeString(this.projectRelativePath);
    output.writeFieldEnd();
  }
  if (this.packPath !== null && this.packPath !== undefined) {
    output.writeFieldBegin('packPath', Thrift.Type.STRING, 3);
    output.writeString(this.packPath);
    output.writeFieldEnd();
  }
  if (this.packRelativePath !== null && this.packRelativePath !== undefined) {
    output.writeFieldBegin('packRelativePath', Thrift.Type.STRING, 4);
    output.writeString(this.packRelativePath);
    output.writeFieldEnd();
  }
  if (this.componentId !== null && this.componentId !== undefined) {
    output.writeFieldBegin('componentId', Thrift.Type.STRING, 5);
    output.writeString(this.componentId);
    output.writeFieldEnd();
  }
  if (this.category !== null && this.category !== undefined) {
    output.writeFieldBegin('category', Thrift.Type.I32, 6);
    output.writeI32(this.category);
    output.writeFieldEnd();
  }
  if (this.attr !== null && this.attr !== undefined) {
    output.writeFieldBegin('attr', Thrift.Type.STRING, 7);
    output.writeString(this.attr);
    output.writeFieldEnd();
  }
  if (this.isGenerated !== null && this.isGenerated !== undefined) {
    output.writeFieldBegin('isGenerated', Thrift.Type.BOOL, 8);
    output.writeBool(this.isGenerated);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CMSISAgentException = module.exports.CMSISAgentException = function(args) {
  this.message = null;
  if (args) {
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
  }
};
Thrift.inherits(CMSISAgentException, Thrift.TException);
CMSISAgentException.prototype.name = 'CMSISAgentException';
CMSISAgentException.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CMSISAgentException.prototype.write = function(output) {
  output.writeStructBegin('CMSISAgentException');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var RteEvent = module.exports.RteEvent = function(args) {
  this.topic = null;
  this.projectName = null;
  this.ewpFile = null;
  this.data = null;
  if (args) {
    if (args.topic !== undefined && args.topic !== null) {
      this.topic = args.topic;
    }
    if (args.projectName !== undefined && args.projectName !== null) {
      this.projectName = args.projectName;
    }
    if (args.ewpFile !== undefined && args.ewpFile !== null) {
      this.ewpFile = args.ewpFile;
    }
    if (args.data !== undefined && args.data !== null) {
      this.data = args.data;
    }
  }
};
RteEvent.prototype = {};
RteEvent.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.topic = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.projectName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.ewpFile = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.data = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RteEvent.prototype.write = function(output) {
  output.writeStructBegin('RteEvent');
  if (this.topic !== null && this.topic !== undefined) {
    output.writeFieldBegin('topic', Thrift.Type.STRING, 1);
    output.writeString(this.topic);
    output.writeFieldEnd();
  }
  if (this.projectName !== null && this.projectName !== undefined) {
    output.writeFieldBegin('projectName', Thrift.Type.STRING, 3);
    output.writeString(this.projectName);
    output.writeFieldEnd();
  }
  if (this.ewpFile !== null && this.ewpFile !== undefined) {
    output.writeFieldBegin('ewpFile', Thrift.Type.STRING, 4);
    output.writeString(this.ewpFile);
    output.writeFieldEnd();
  }
  if (this.data !== null && this.data !== undefined) {
    output.writeFieldBegin('data', Thrift.Type.STRING, 2);
    output.writeString(this.data);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ttypes.CMSISPACK_AGENT2_SERVICE = 'com.iar.cmsisagent2.service';
ttypes.CMSISPACK_AGENT2_EVENTLISTENER_SERVICE = 'com.iar.cmsisagent2.eventlistener.service';
ttypes.PROJECT_ADDED = 'com.arm.cmsis.pack.rte.project.added';
ttypes.PROJECT_REMOVED = 'com.arm.cmsis.pack.rte.project.removed';
ttypes.PROJECT_UPDATED = 'com.arm.cmsis.pack.rte.project.updated';
ttypes.PACKS_UPDATED = 'com.arm.cmsis.pack.updated';
ttypes.PACKS_RELOADED = 'com.arm.cmsis.pack.reloaded';
ttypes.PROTOCOL_VERSION = 3;
