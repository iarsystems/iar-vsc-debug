//
// Autogenerated by Thrift Compiler (0.14.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
if (typeof Int64 === 'undefined' && typeof require === 'function') {
  var Int64 = require('node-int64');
}


//HELPER FUNCTIONS AND STRUCTURES

var Gatekeeper_SetRunAllCores_args = function(args) {
  this.all = null;
  if (args) {
    if (args.all !== undefined && args.all !== null) {
      this.all = args.all;
    }
  }
};
Gatekeeper_SetRunAllCores_args.prototype = {};
Gatekeeper_SetRunAllCores_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.all = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Gatekeeper_SetRunAllCores_args.prototype.write = function(output) {
  output.writeStructBegin('Gatekeeper_SetRunAllCores_args');
  if (this.all !== null && this.all !== undefined) {
    output.writeFieldBegin('all', Thrift.Type.BOOL, 1);
    output.writeBool(this.all);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Gatekeeper_SetRunAllCores_result = function(args) {
};
Gatekeeper_SetRunAllCores_result.prototype = {};
Gatekeeper_SetRunAllCores_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Gatekeeper_SetRunAllCores_result.prototype.write = function(output) {
  output.writeStructBegin('Gatekeeper_SetRunAllCores_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Gatekeeper_SetStartOneStartsAll_args = function(args) {
  this.on = null;
  if (args) {
    if (args.on !== undefined && args.on !== null) {
      this.on = args.on;
    }
  }
};
Gatekeeper_SetStartOneStartsAll_args.prototype = {};
Gatekeeper_SetStartOneStartsAll_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.on = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Gatekeeper_SetStartOneStartsAll_args.prototype.write = function(output) {
  output.writeStructBegin('Gatekeeper_SetStartOneStartsAll_args');
  if (this.on !== null && this.on !== undefined) {
    output.writeFieldBegin('on', Thrift.Type.BOOL, 1);
    output.writeBool(this.on);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Gatekeeper_SetStartOneStartsAll_result = function(args) {
};
Gatekeeper_SetStartOneStartsAll_result.prototype = {};
Gatekeeper_SetStartOneStartsAll_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Gatekeeper_SetStartOneStartsAll_result.prototype.write = function(output) {
  output.writeStructBegin('Gatekeeper_SetStartOneStartsAll_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Gatekeeper_SetSoftCTI_args = function(args) {
  this.on = null;
  if (args) {
    if (args.on !== undefined && args.on !== null) {
      this.on = args.on;
    }
  }
};
Gatekeeper_SetSoftCTI_args.prototype = {};
Gatekeeper_SetSoftCTI_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.on = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Gatekeeper_SetSoftCTI_args.prototype.write = function(output) {
  output.writeStructBegin('Gatekeeper_SetSoftCTI_args');
  if (this.on !== null && this.on !== undefined) {
    output.writeFieldBegin('on', Thrift.Type.BOOL, 1);
    output.writeBool(this.on);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Gatekeeper_SetSoftCTI_result = function(args) {
};
Gatekeeper_SetSoftCTI_result.prototype = {};
Gatekeeper_SetSoftCTI_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Gatekeeper_SetSoftCTI_result.prototype.write = function(output) {
  output.writeStructBegin('Gatekeeper_SetSoftCTI_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Gatekeeper_BeforeLowLevelGo_args = function(args) {
  this.core = null;
  this.multi = null;
  if (args) {
    if (args.core !== undefined && args.core !== null) {
      this.core = args.core;
    }
    if (args.multi !== undefined && args.multi !== null) {
      this.multi = args.multi;
    }
  }
};
Gatekeeper_BeforeLowLevelGo_args.prototype = {};
Gatekeeper_BeforeLowLevelGo_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.core = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.multi = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Gatekeeper_BeforeLowLevelGo_args.prototype.write = function(output) {
  output.writeStructBegin('Gatekeeper_BeforeLowLevelGo_args');
  if (this.core !== null && this.core !== undefined) {
    output.writeFieldBegin('core', Thrift.Type.I32, 1);
    output.writeI32(this.core);
    output.writeFieldEnd();
  }
  if (this.multi !== null && this.multi !== undefined) {
    output.writeFieldBegin('multi', Thrift.Type.BOOL, 2);
    output.writeBool(this.multi);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Gatekeeper_BeforeLowLevelGo_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
Gatekeeper_BeforeLowLevelGo_result.prototype = {};
Gatekeeper_BeforeLowLevelGo_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Gatekeeper_BeforeLowLevelGo_result.prototype.write = function(output) {
  output.writeStructBegin('Gatekeeper_BeforeLowLevelGo_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Gatekeeper_StartedCPU_args = function(args) {
  this.core = null;
  if (args) {
    if (args.core !== undefined && args.core !== null) {
      this.core = args.core;
    }
  }
};
Gatekeeper_StartedCPU_args.prototype = {};
Gatekeeper_StartedCPU_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.core = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Gatekeeper_StartedCPU_args.prototype.write = function(output) {
  output.writeStructBegin('Gatekeeper_StartedCPU_args');
  if (this.core !== null && this.core !== undefined) {
    output.writeFieldBegin('core', Thrift.Type.I32, 1);
    output.writeI32(this.core);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Gatekeeper_StartedCPU_result = function(args) {
};
Gatekeeper_StartedCPU_result.prototype = {};
Gatekeeper_StartedCPU_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Gatekeeper_StartedCPU_result.prototype.write = function(output) {
  output.writeStructBegin('Gatekeeper_StartedCPU_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Gatekeeper_CPUStoped_args = function(args) {
  this.core = null;
  if (args) {
    if (args.core !== undefined && args.core !== null) {
      this.core = args.core;
    }
  }
};
Gatekeeper_CPUStoped_args.prototype = {};
Gatekeeper_CPUStoped_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.core = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Gatekeeper_CPUStoped_args.prototype.write = function(output) {
  output.writeStructBegin('Gatekeeper_CPUStoped_args');
  if (this.core !== null && this.core !== undefined) {
    output.writeFieldBegin('core', Thrift.Type.I32, 1);
    output.writeI32(this.core);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Gatekeeper_CPUStoped_result = function(args) {
};
Gatekeeper_CPUStoped_result.prototype = {};
Gatekeeper_CPUStoped_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Gatekeeper_CPUStoped_result.prototype.write = function(output) {
  output.writeStructBegin('Gatekeeper_CPUStoped_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Gatekeeper_IsTargetStopped_args = function(args) {
};
Gatekeeper_IsTargetStopped_args.prototype = {};
Gatekeeper_IsTargetStopped_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Gatekeeper_IsTargetStopped_args.prototype.write = function(output) {
  output.writeStructBegin('Gatekeeper_IsTargetStopped_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Gatekeeper_IsTargetStopped_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
Gatekeeper_IsTargetStopped_result.prototype = {};
Gatekeeper_IsTargetStopped_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Gatekeeper_IsTargetStopped_result.prototype.write = function(output) {
  output.writeStructBegin('Gatekeeper_IsTargetStopped_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Gatekeeper_AfterLowLevelGo_args = function(args) {
  this.core = null;
  this.code = null;
  if (args) {
    if (args.core !== undefined && args.core !== null) {
      this.core = args.core;
    }
    if (args.code !== undefined && args.code !== null) {
      this.code = args.code;
    }
  }
};
Gatekeeper_AfterLowLevelGo_args.prototype = {};
Gatekeeper_AfterLowLevelGo_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.core = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.code = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Gatekeeper_AfterLowLevelGo_args.prototype.write = function(output) {
  output.writeStructBegin('Gatekeeper_AfterLowLevelGo_args');
  if (this.core !== null && this.core !== undefined) {
    output.writeFieldBegin('core', Thrift.Type.I32, 1);
    output.writeI32(this.core);
    output.writeFieldEnd();
  }
  if (this.code !== null && this.code !== undefined) {
    output.writeFieldBegin('code', Thrift.Type.I32, 2);
    output.writeI32(this.code);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Gatekeeper_AfterLowLevelGo_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
Gatekeeper_AfterLowLevelGo_result.prototype = {};
Gatekeeper_AfterLowLevelGo_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Gatekeeper_AfterLowLevelGo_result.prototype.write = function(output) {
  output.writeStructBegin('Gatekeeper_AfterLowLevelGo_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Gatekeeper_Reset_args = function(args) {
};
Gatekeeper_Reset_args.prototype = {};
Gatekeeper_Reset_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Gatekeeper_Reset_args.prototype.write = function(output) {
  output.writeStructBegin('Gatekeeper_Reset_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Gatekeeper_Reset_result = function(args) {
};
Gatekeeper_Reset_result.prototype = {};
Gatekeeper_Reset_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Gatekeeper_Reset_result.prototype.write = function(output) {
  output.writeStructBegin('Gatekeeper_Reset_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Gatekeeper_StopAll_args = function(args) {
};
Gatekeeper_StopAll_args.prototype = {};
Gatekeeper_StopAll_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Gatekeeper_StopAll_args.prototype.write = function(output) {
  output.writeStructBegin('Gatekeeper_StopAll_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Gatekeeper_StopAll_result = function(args) {
};
Gatekeeper_StopAll_result.prototype = {};
Gatekeeper_StopAll_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Gatekeeper_StopAll_result.prototype.write = function(output) {
  output.writeStructBegin('Gatekeeper_StopAll_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Gatekeeper_SpontaneousCoreStatusChange_args = function(args) {
  this.core = null;
  this.status = null;
  if (args) {
    if (args.core !== undefined && args.core !== null) {
      this.core = args.core;
    }
    if (args.status !== undefined && args.status !== null) {
      this.status = args.status;
    }
  }
};
Gatekeeper_SpontaneousCoreStatusChange_args.prototype = {};
Gatekeeper_SpontaneousCoreStatusChange_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.core = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Gatekeeper_SpontaneousCoreStatusChange_args.prototype.write = function(output) {
  output.writeStructBegin('Gatekeeper_SpontaneousCoreStatusChange_args');
  if (this.core !== null && this.core !== undefined) {
    output.writeFieldBegin('core', Thrift.Type.I32, 1);
    output.writeI32(this.core);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 2);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Gatekeeper_SpontaneousCoreStatusChange_result = function(args) {
};
Gatekeeper_SpontaneousCoreStatusChange_result.prototype = {};
Gatekeeper_SpontaneousCoreStatusChange_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Gatekeeper_SpontaneousCoreStatusChange_result.prototype.write = function(output) {
  output.writeStructBegin('Gatekeeper_SpontaneousCoreStatusChange_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Gatekeeper_GetCoreStatus_args = function(args) {
  this.core = null;
  if (args) {
    if (args.core !== undefined && args.core !== null) {
      this.core = args.core;
    }
  }
};
Gatekeeper_GetCoreStatus_args.prototype = {};
Gatekeeper_GetCoreStatus_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.core = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Gatekeeper_GetCoreStatus_args.prototype.write = function(output) {
  output.writeStructBegin('Gatekeeper_GetCoreStatus_args');
  if (this.core !== null && this.core !== undefined) {
    output.writeFieldBegin('core', Thrift.Type.I32, 1);
    output.writeI32(this.core);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Gatekeeper_GetCoreStatus_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
Gatekeeper_GetCoreStatus_result.prototype = {};
Gatekeeper_GetCoreStatus_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Gatekeeper_GetCoreStatus_result.prototype.write = function(output) {
  output.writeStructBegin('Gatekeeper_GetCoreStatus_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Gatekeeper_IsItOkToStopCore_args = function(args) {
  this.core = null;
  if (args) {
    if (args.core !== undefined && args.core !== null) {
      this.core = args.core;
    }
  }
};
Gatekeeper_IsItOkToStopCore_args.prototype = {};
Gatekeeper_IsItOkToStopCore_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.core = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Gatekeeper_IsItOkToStopCore_args.prototype.write = function(output) {
  output.writeStructBegin('Gatekeeper_IsItOkToStopCore_args');
  if (this.core !== null && this.core !== undefined) {
    output.writeFieldBegin('core', Thrift.Type.I32, 1);
    output.writeI32(this.core);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Gatekeeper_IsItOkToStopCore_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
Gatekeeper_IsItOkToStopCore_result.prototype = {};
Gatekeeper_IsItOkToStopCore_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Gatekeeper_IsItOkToStopCore_result.prototype.write = function(output) {
  output.writeStructBegin('Gatekeeper_IsItOkToStopCore_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Gatekeeper_SetCPUStatusPolling_args = function(args) {
  this.on = null;
  if (args) {
    if (args.on !== undefined && args.on !== null) {
      this.on = args.on;
    }
  }
};
Gatekeeper_SetCPUStatusPolling_args.prototype = {};
Gatekeeper_SetCPUStatusPolling_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.on = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Gatekeeper_SetCPUStatusPolling_args.prototype.write = function(output) {
  output.writeStructBegin('Gatekeeper_SetCPUStatusPolling_args');
  if (this.on !== null && this.on !== undefined) {
    output.writeFieldBegin('on', Thrift.Type.BOOL, 1);
    output.writeBool(this.on);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Gatekeeper_SetCPUStatusPolling_result = function(args) {
};
Gatekeeper_SetCPUStatusPolling_result.prototype = {};
Gatekeeper_SetCPUStatusPolling_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Gatekeeper_SetCPUStatusPolling_result.prototype.write = function(output) {
  output.writeStructBegin('Gatekeeper_SetCPUStatusPolling_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Gatekeeper_AckCPUStatusPolling_args = function(args) {
  this.coreCount = null;
  if (args) {
    if (args.coreCount !== undefined && args.coreCount !== null) {
      this.coreCount = args.coreCount;
    }
  }
};
Gatekeeper_AckCPUStatusPolling_args.prototype = {};
Gatekeeper_AckCPUStatusPolling_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.coreCount = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Gatekeeper_AckCPUStatusPolling_args.prototype.write = function(output) {
  output.writeStructBegin('Gatekeeper_AckCPUStatusPolling_args');
  if (this.coreCount !== null && this.coreCount !== undefined) {
    output.writeFieldBegin('coreCount', Thrift.Type.I32, 1);
    output.writeI32(this.coreCount);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Gatekeeper_AckCPUStatusPolling_result = function(args) {
};
Gatekeeper_AckCPUStatusPolling_result.prototype = {};
Gatekeeper_AckCPUStatusPolling_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Gatekeeper_AckCPUStatusPolling_result.prototype.write = function(output) {
  output.writeStructBegin('Gatekeeper_AckCPUStatusPolling_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GatekeeperClient = exports.Client = function(input, output) {
  this.input = input;
  this.output = (!output) ? input : output;
  this.seqid = 0;
};
Thrift.inherits(GatekeeperClient, HeartbeatServiceClient);

GatekeeperClient.prototype.SetRunAllCores = function(all, callback) {
  this.send_SetRunAllCores(all, callback); 
  if (!callback) {
  this.recv_SetRunAllCores();
  }
};

GatekeeperClient.prototype.send_SetRunAllCores = function(all, callback) {
  var params = {
    all: all
  };
  var args = new Gatekeeper_SetRunAllCores_args(params);
  try {
    this.output.writeMessageBegin('SetRunAllCores', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_SetRunAllCores();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

GatekeeperClient.prototype.recv_SetRunAllCores = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Gatekeeper_SetRunAllCores_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};

GatekeeperClient.prototype.SetStartOneStartsAll = function(on, callback) {
  this.send_SetStartOneStartsAll(on, callback); 
  if (!callback) {
  this.recv_SetStartOneStartsAll();
  }
};

GatekeeperClient.prototype.send_SetStartOneStartsAll = function(on, callback) {
  var params = {
    on: on
  };
  var args = new Gatekeeper_SetStartOneStartsAll_args(params);
  try {
    this.output.writeMessageBegin('SetStartOneStartsAll', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_SetStartOneStartsAll();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

GatekeeperClient.prototype.recv_SetStartOneStartsAll = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Gatekeeper_SetStartOneStartsAll_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};

GatekeeperClient.prototype.SetSoftCTI = function(on, callback) {
  this.send_SetSoftCTI(on, callback); 
  if (!callback) {
  this.recv_SetSoftCTI();
  }
};

GatekeeperClient.prototype.send_SetSoftCTI = function(on, callback) {
  var params = {
    on: on
  };
  var args = new Gatekeeper_SetSoftCTI_args(params);
  try {
    this.output.writeMessageBegin('SetSoftCTI', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_SetSoftCTI();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

GatekeeperClient.prototype.recv_SetSoftCTI = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Gatekeeper_SetSoftCTI_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};

GatekeeperClient.prototype.BeforeLowLevelGo = function(core, multi, callback) {
  this.send_BeforeLowLevelGo(core, multi, callback); 
  if (!callback) {
    return this.recv_BeforeLowLevelGo();
  }
};

GatekeeperClient.prototype.send_BeforeLowLevelGo = function(core, multi, callback) {
  var params = {
    core: core,
    multi: multi
  };
  var args = new Gatekeeper_BeforeLowLevelGo_args(params);
  try {
    this.output.writeMessageBegin('BeforeLowLevelGo', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_BeforeLowLevelGo();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

GatekeeperClient.prototype.recv_BeforeLowLevelGo = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Gatekeeper_BeforeLowLevelGo_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'BeforeLowLevelGo failed: unknown result';
};

GatekeeperClient.prototype.StartedCPU = function(core, callback) {
  this.send_StartedCPU(core, callback); 
  if (!callback) {
  this.recv_StartedCPU();
  }
};

GatekeeperClient.prototype.send_StartedCPU = function(core, callback) {
  var params = {
    core: core
  };
  var args = new Gatekeeper_StartedCPU_args(params);
  try {
    this.output.writeMessageBegin('StartedCPU', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_StartedCPU();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

GatekeeperClient.prototype.recv_StartedCPU = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Gatekeeper_StartedCPU_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};

GatekeeperClient.prototype.CPUStoped = function(core, callback) {
  this.send_CPUStoped(core, callback); 
  if (!callback) {
  this.recv_CPUStoped();
  }
};

GatekeeperClient.prototype.send_CPUStoped = function(core, callback) {
  var params = {
    core: core
  };
  var args = new Gatekeeper_CPUStoped_args(params);
  try {
    this.output.writeMessageBegin('CPUStoped', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_CPUStoped();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

GatekeeperClient.prototype.recv_CPUStoped = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Gatekeeper_CPUStoped_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};

GatekeeperClient.prototype.IsTargetStopped = function(callback) {
  this.send_IsTargetStopped(callback); 
  if (!callback) {
    return this.recv_IsTargetStopped();
  }
};

GatekeeperClient.prototype.send_IsTargetStopped = function(callback) {
  var args = new Gatekeeper_IsTargetStopped_args();
  try {
    this.output.writeMessageBegin('IsTargetStopped', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_IsTargetStopped();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

GatekeeperClient.prototype.recv_IsTargetStopped = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Gatekeeper_IsTargetStopped_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'IsTargetStopped failed: unknown result';
};

GatekeeperClient.prototype.AfterLowLevelGo = function(core, code, callback) {
  this.send_AfterLowLevelGo(core, code, callback); 
  if (!callback) {
    return this.recv_AfterLowLevelGo();
  }
};

GatekeeperClient.prototype.send_AfterLowLevelGo = function(core, code, callback) {
  var params = {
    core: core,
    code: code
  };
  var args = new Gatekeeper_AfterLowLevelGo_args(params);
  try {
    this.output.writeMessageBegin('AfterLowLevelGo', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_AfterLowLevelGo();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

GatekeeperClient.prototype.recv_AfterLowLevelGo = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Gatekeeper_AfterLowLevelGo_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'AfterLowLevelGo failed: unknown result';
};

GatekeeperClient.prototype.Reset = function(callback) {
  this.send_Reset(callback); 
  if (!callback) {
  this.recv_Reset();
  }
};

GatekeeperClient.prototype.send_Reset = function(callback) {
  var args = new Gatekeeper_Reset_args();
  try {
    this.output.writeMessageBegin('Reset', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_Reset();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

GatekeeperClient.prototype.recv_Reset = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Gatekeeper_Reset_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};

GatekeeperClient.prototype.StopAll = function(callback) {
  this.send_StopAll(callback); 
  if (!callback) {
  this.recv_StopAll();
  }
};

GatekeeperClient.prototype.send_StopAll = function(callback) {
  var args = new Gatekeeper_StopAll_args();
  try {
    this.output.writeMessageBegin('StopAll', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_StopAll();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

GatekeeperClient.prototype.recv_StopAll = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Gatekeeper_StopAll_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};

GatekeeperClient.prototype.SpontaneousCoreStatusChange = function(core, status, callback) {
  this.send_SpontaneousCoreStatusChange(core, status, callback); 
  if (!callback) {
  this.recv_SpontaneousCoreStatusChange();
  }
};

GatekeeperClient.prototype.send_SpontaneousCoreStatusChange = function(core, status, callback) {
  var params = {
    core: core,
    status: status
  };
  var args = new Gatekeeper_SpontaneousCoreStatusChange_args(params);
  try {
    this.output.writeMessageBegin('SpontaneousCoreStatusChange', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_SpontaneousCoreStatusChange();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

GatekeeperClient.prototype.recv_SpontaneousCoreStatusChange = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Gatekeeper_SpontaneousCoreStatusChange_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};

GatekeeperClient.prototype.GetCoreStatus = function(core, callback) {
  this.send_GetCoreStatus(core, callback); 
  if (!callback) {
    return this.recv_GetCoreStatus();
  }
};

GatekeeperClient.prototype.send_GetCoreStatus = function(core, callback) {
  var params = {
    core: core
  };
  var args = new Gatekeeper_GetCoreStatus_args(params);
  try {
    this.output.writeMessageBegin('GetCoreStatus', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_GetCoreStatus();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

GatekeeperClient.prototype.recv_GetCoreStatus = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Gatekeeper_GetCoreStatus_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'GetCoreStatus failed: unknown result';
};

GatekeeperClient.prototype.IsItOkToStopCore = function(core, callback) {
  this.send_IsItOkToStopCore(core, callback); 
  if (!callback) {
    return this.recv_IsItOkToStopCore();
  }
};

GatekeeperClient.prototype.send_IsItOkToStopCore = function(core, callback) {
  var params = {
    core: core
  };
  var args = new Gatekeeper_IsItOkToStopCore_args(params);
  try {
    this.output.writeMessageBegin('IsItOkToStopCore', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_IsItOkToStopCore();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

GatekeeperClient.prototype.recv_IsItOkToStopCore = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Gatekeeper_IsItOkToStopCore_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'IsItOkToStopCore failed: unknown result';
};

GatekeeperClient.prototype.SetCPUStatusPolling = function(on, callback) {
  this.send_SetCPUStatusPolling(on, callback); 
  if (!callback) {
  this.recv_SetCPUStatusPolling();
  }
};

GatekeeperClient.prototype.send_SetCPUStatusPolling = function(on, callback) {
  var params = {
    on: on
  };
  var args = new Gatekeeper_SetCPUStatusPolling_args(params);
  try {
    this.output.writeMessageBegin('SetCPUStatusPolling', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_SetCPUStatusPolling();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

GatekeeperClient.prototype.recv_SetCPUStatusPolling = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Gatekeeper_SetCPUStatusPolling_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};

GatekeeperClient.prototype.AckCPUStatusPolling = function(coreCount, callback) {
  this.send_AckCPUStatusPolling(coreCount, callback); 
  if (!callback) {
  this.recv_AckCPUStatusPolling();
  }
};

GatekeeperClient.prototype.send_AckCPUStatusPolling = function(coreCount, callback) {
  var params = {
    coreCount: coreCount
  };
  var args = new Gatekeeper_AckCPUStatusPolling_args(params);
  try {
    this.output.writeMessageBegin('AckCPUStatusPolling', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_AckCPUStatusPolling();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

GatekeeperClient.prototype.recv_AckCPUStatusPolling = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Gatekeeper_AckCPUStatusPolling_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};
