//
// Autogenerated by Thrift Compiler (0.14.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
if (typeof Int64 === 'undefined' && typeof require === 'function') {
  var Int64 = require('node-int64');
}


//HELPER FUNCTIONS AND STRUCTURES

var CSpyMemory_readMemory_args = function(args) {
  this.location = null;
  this.wordsize = null;
  this.bitsize = null;
  this.count = null;
  if (args) {
    if (args.location !== undefined && args.location !== null) {
      this.location = new shared_ttypes.Location(args.location);
    }
    if (args.wordsize !== undefined && args.wordsize !== null) {
      this.wordsize = args.wordsize;
    }
    if (args.bitsize !== undefined && args.bitsize !== null) {
      this.bitsize = args.bitsize;
    }
    if (args.count !== undefined && args.count !== null) {
      this.count = args.count;
    }
  }
};
CSpyMemory_readMemory_args.prototype = {};
CSpyMemory_readMemory_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.location = new shared_ttypes.Location();
        this.location.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.wordsize = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.bitsize = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.count = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CSpyMemory_readMemory_args.prototype.write = function(output) {
  output.writeStructBegin('CSpyMemory_readMemory_args');
  if (this.location !== null && this.location !== undefined) {
    output.writeFieldBegin('location', Thrift.Type.STRUCT, 1);
    this.location.write(output);
    output.writeFieldEnd();
  }
  if (this.wordsize !== null && this.wordsize !== undefined) {
    output.writeFieldBegin('wordsize', Thrift.Type.I32, 2);
    output.writeI32(this.wordsize);
    output.writeFieldEnd();
  }
  if (this.bitsize !== null && this.bitsize !== undefined) {
    output.writeFieldBegin('bitsize', Thrift.Type.I32, 3);
    output.writeI32(this.bitsize);
    output.writeFieldEnd();
  }
  if (this.count !== null && this.count !== undefined) {
    output.writeFieldBegin('count', Thrift.Type.I32, 4);
    output.writeI32(this.count);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CSpyMemory_readMemory_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof shared_ttypes.CSpyException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
CSpyMemory_readMemory_result.prototype = {};
CSpyMemory_readMemory_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new shared_ttypes.CSpyException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CSpyMemory_readMemory_result.prototype.write = function(output) {
  output.writeStructBegin('CSpyMemory_readMemory_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeBinary(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CSpyMemory_readMemoryBlock_args = function(args) {
  this.location = null;
  this.wordsize = null;
  this.bitsize = null;
  this.count = null;
  if (args) {
    if (args.location !== undefined && args.location !== null) {
      this.location = new shared_ttypes.Location(args.location);
    }
    if (args.wordsize !== undefined && args.wordsize !== null) {
      this.wordsize = args.wordsize;
    }
    if (args.bitsize !== undefined && args.bitsize !== null) {
      this.bitsize = args.bitsize;
    }
    if (args.count !== undefined && args.count !== null) {
      this.count = args.count;
    }
  }
};
CSpyMemory_readMemoryBlock_args.prototype = {};
CSpyMemory_readMemoryBlock_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.location = new shared_ttypes.Location();
        this.location.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.wordsize = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.bitsize = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.count = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CSpyMemory_readMemoryBlock_args.prototype.write = function(output) {
  output.writeStructBegin('CSpyMemory_readMemoryBlock_args');
  if (this.location !== null && this.location !== undefined) {
    output.writeFieldBegin('location', Thrift.Type.STRUCT, 1);
    this.location.write(output);
    output.writeFieldEnd();
  }
  if (this.wordsize !== null && this.wordsize !== undefined) {
    output.writeFieldBegin('wordsize', Thrift.Type.I32, 2);
    output.writeI32(this.wordsize);
    output.writeFieldEnd();
  }
  if (this.bitsize !== null && this.bitsize !== undefined) {
    output.writeFieldBegin('bitsize', Thrift.Type.I32, 3);
    output.writeI32(this.bitsize);
    output.writeFieldEnd();
  }
  if (this.count !== null && this.count !== undefined) {
    output.writeFieldBegin('count', Thrift.Type.I32, 4);
    output.writeI32(this.count);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CSpyMemory_readMemoryBlock_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof shared_ttypes.CSpyException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.CSpyMemoryBlock(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
CSpyMemory_readMemoryBlock_result.prototype = {};
CSpyMemory_readMemoryBlock_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.CSpyMemoryBlock();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new shared_ttypes.CSpyException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CSpyMemory_readMemoryBlock_result.prototype.write = function(output) {
  output.writeStructBegin('CSpyMemory_readMemoryBlock_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CSpyMemory_writeMemory_args = function(args) {
  this.location = null;
  this.wordsize = null;
  this.bitsize = null;
  this.count = null;
  this.buf = null;
  if (args) {
    if (args.location !== undefined && args.location !== null) {
      this.location = new shared_ttypes.Location(args.location);
    }
    if (args.wordsize !== undefined && args.wordsize !== null) {
      this.wordsize = args.wordsize;
    }
    if (args.bitsize !== undefined && args.bitsize !== null) {
      this.bitsize = args.bitsize;
    }
    if (args.count !== undefined && args.count !== null) {
      this.count = args.count;
    }
    if (args.buf !== undefined && args.buf !== null) {
      this.buf = args.buf;
    }
  }
};
CSpyMemory_writeMemory_args.prototype = {};
CSpyMemory_writeMemory_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.location = new shared_ttypes.Location();
        this.location.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.wordsize = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.bitsize = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.count = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.buf = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CSpyMemory_writeMemory_args.prototype.write = function(output) {
  output.writeStructBegin('CSpyMemory_writeMemory_args');
  if (this.location !== null && this.location !== undefined) {
    output.writeFieldBegin('location', Thrift.Type.STRUCT, 1);
    this.location.write(output);
    output.writeFieldEnd();
  }
  if (this.wordsize !== null && this.wordsize !== undefined) {
    output.writeFieldBegin('wordsize', Thrift.Type.I32, 2);
    output.writeI32(this.wordsize);
    output.writeFieldEnd();
  }
  if (this.bitsize !== null && this.bitsize !== undefined) {
    output.writeFieldBegin('bitsize', Thrift.Type.I32, 3);
    output.writeI32(this.bitsize);
    output.writeFieldEnd();
  }
  if (this.count !== null && this.count !== undefined) {
    output.writeFieldBegin('count', Thrift.Type.I32, 4);
    output.writeI32(this.count);
    output.writeFieldEnd();
  }
  if (this.buf !== null && this.buf !== undefined) {
    output.writeFieldBegin('buf', Thrift.Type.STRING, 5);
    output.writeBinary(this.buf);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CSpyMemory_writeMemory_result = function(args) {
  this.e = null;
  if (args instanceof shared_ttypes.CSpyException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
CSpyMemory_writeMemory_result.prototype = {};
CSpyMemory_writeMemory_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new shared_ttypes.CSpyException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CSpyMemory_writeMemory_result.prototype.write = function(output) {
  output.writeStructBegin('CSpyMemory_writeMemory_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CSpyMemoryClient = exports.Client = function(input, output) {
  this.input = input;
  this.output = (!output) ? input : output;
  this.seqid = 0;
};
CSpyMemoryClient.prototype = {};

CSpyMemoryClient.prototype.readMemory = function(location, wordsize, bitsize, count, callback) {
  this.send_readMemory(location, wordsize, bitsize, count, callback); 
  if (!callback) {
    return this.recv_readMemory();
  }
};

CSpyMemoryClient.prototype.send_readMemory = function(location, wordsize, bitsize, count, callback) {
  var params = {
    location: location,
    wordsize: wordsize,
    bitsize: bitsize,
    count: count
  };
  var args = new CSpyMemory_readMemory_args(params);
  try {
    this.output.writeMessageBegin('readMemory', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_readMemory();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

CSpyMemoryClient.prototype.recv_readMemory = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CSpyMemory_readMemory_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'readMemory failed: unknown result';
};

CSpyMemoryClient.prototype.readMemoryBlock = function(location, wordsize, bitsize, count, callback) {
  this.send_readMemoryBlock(location, wordsize, bitsize, count, callback); 
  if (!callback) {
    return this.recv_readMemoryBlock();
  }
};

CSpyMemoryClient.prototype.send_readMemoryBlock = function(location, wordsize, bitsize, count, callback) {
  var params = {
    location: location,
    wordsize: wordsize,
    bitsize: bitsize,
    count: count
  };
  var args = new CSpyMemory_readMemoryBlock_args(params);
  try {
    this.output.writeMessageBegin('readMemoryBlock', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_readMemoryBlock();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

CSpyMemoryClient.prototype.recv_readMemoryBlock = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CSpyMemory_readMemoryBlock_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'readMemoryBlock failed: unknown result';
};

CSpyMemoryClient.prototype.writeMemory = function(location, wordsize, bitsize, count, buf, callback) {
  this.send_writeMemory(location, wordsize, bitsize, count, buf, callback); 
  if (!callback) {
  this.recv_writeMemory();
  }
};

CSpyMemoryClient.prototype.send_writeMemory = function(location, wordsize, bitsize, count, buf, callback) {
  var params = {
    location: location,
    wordsize: wordsize,
    bitsize: bitsize,
    count: count,
    buf: buf
  };
  var args = new CSpyMemory_writeMemory_args(params);
  try {
    this.output.writeMessageBegin('writeMemory', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_writeMemory();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

CSpyMemoryClient.prototype.recv_writeMemory = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CSpyMemory_writeMemory_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};
