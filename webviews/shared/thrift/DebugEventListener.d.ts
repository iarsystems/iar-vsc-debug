//
// Autogenerated by Thrift Compiler (0.14.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//

import Int64 = require('node-int64');

import { cspy } from "./cspy_types";


/**
 * Interface for receiving information about events in the debugger.
 */
export declare class Client {
  input: Thrift.TJSONProtocol;
  output: Thrift.TJSONProtocol;
  seqid: number;

  constructor(input: Thrift.TJSONProtocol, output?: Thrift.TJSONProtocol);

  /**
   * Called whenever a debug event happens. See DkNotifySubscriber#Notify.
   */
  postDebugEvent(event: DebugEvent): Q.Promise<void>;

  /**
   * Called whenever a debug event happens. See DkNotifySubscriber#Notify.
   */
  postDebugEvent(event: DebugEvent, callback?: (data: void)=>void): void;

  /**
   * This one should not be oneway, since we need to make sure that the
   * client has actually recevied the message before proceeding. This will
   * otherwise prevent e.g. fatal error messages from being seen.
   */
  postLogEvent(event: LogEvent): Q.Promise<void>;

  /**
   * This one should not be oneway, since we need to make sure that the
   * client has actually recevied the message before proceeding. This will
   * otherwise prevent e.g. fatal error messages from being seen.
   */
  postLogEvent(event: LogEvent, callback?: (data: void)=>void): void;

  /**
   * Triggered on kDkInspectionContextChanged.
   */
  postInspectionContextChangedEvent(event: InspectionContextChangedEvent): Q.Promise<void>;

  /**
   * Triggered on kDkInspectionContextChanged.
   */
  postInspectionContextChangedEvent(event: InspectionContextChangedEvent, callback?: (data: void)=>void): void;

  /**
   * Triggered on kDkBaseContextChanged.
   */
  postBaseContextChangedEvent(event: BaseContextChangedEvent): Q.Promise<void>;

  /**
   * Triggered on kDkBaseContextChanged.
   */
  postBaseContextChangedEvent(event: BaseContextChangedEvent, callback?: (data: void)=>void): void;
}
