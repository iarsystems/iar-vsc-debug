//
// Autogenerated by Thrift Compiler (0.14.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
if (typeof Int64 === 'undefined' && typeof require === 'function') {
  var Int64 = require('node-int64');
}


//HELPER FUNCTIONS AND STRUCTURES

var CMSISAgent2_loadProject_args = function(args) {
  this.ewpfile = null;
  this.rteConfigFile = null;
  if (args) {
    if (args.ewpfile !== undefined && args.ewpfile !== null) {
      this.ewpfile = args.ewpfile;
    }
    if (args.rteConfigFile !== undefined && args.rteConfigFile !== null) {
      this.rteConfigFile = args.rteConfigFile;
    }
  }
};
CMSISAgent2_loadProject_args.prototype = {};
CMSISAgent2_loadProject_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.ewpfile = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.rteConfigFile = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CMSISAgent2_loadProject_args.prototype.write = function(output) {
  output.writeStructBegin('CMSISAgent2_loadProject_args');
  if (this.ewpfile !== null && this.ewpfile !== undefined) {
    output.writeFieldBegin('ewpfile', Thrift.Type.STRING, 1);
    output.writeString(this.ewpfile);
    output.writeFieldEnd();
  }
  if (this.rteConfigFile !== null && this.rteConfigFile !== undefined) {
    output.writeFieldBegin('rteConfigFile', Thrift.Type.STRING, 2);
    output.writeString(this.rteConfigFile);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CMSISAgent2_loadProject_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.CMSISAgentException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
CMSISAgent2_loadProject_result.prototype = {};
CMSISAgent2_loadProject_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.CMSISAgentException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CMSISAgent2_loadProject_result.prototype.write = function(output) {
  output.writeStructBegin('CMSISAgent2_loadProject_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CMSISAgent2_createNewProject_args = function(args) {
  this.ewpfile = null;
  this.outputType = null;
  if (args) {
    if (args.ewpfile !== undefined && args.ewpfile !== null) {
      this.ewpfile = args.ewpfile;
    }
    if (args.outputType !== undefined && args.outputType !== null) {
      this.outputType = args.outputType;
    }
  }
};
CMSISAgent2_createNewProject_args.prototype = {};
CMSISAgent2_createNewProject_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.ewpfile = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.outputType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CMSISAgent2_createNewProject_args.prototype.write = function(output) {
  output.writeStructBegin('CMSISAgent2_createNewProject_args');
  if (this.ewpfile !== null && this.ewpfile !== undefined) {
    output.writeFieldBegin('ewpfile', Thrift.Type.STRING, 1);
    output.writeString(this.ewpfile);
    output.writeFieldEnd();
  }
  if (this.outputType !== null && this.outputType !== undefined) {
    output.writeFieldBegin('outputType', Thrift.Type.I32, 2);
    output.writeI32(this.outputType);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CMSISAgent2_createNewProject_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.CMSISAgentException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
CMSISAgent2_createNewProject_result.prototype = {};
CMSISAgent2_createNewProject_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.CMSISAgentException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CMSISAgent2_createNewProject_result.prototype.write = function(output) {
  output.writeStructBegin('CMSISAgent2_createNewProject_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CMSISAgent2_shutdown_args = function(args) {
};
CMSISAgent2_shutdown_args.prototype = {};
CMSISAgent2_shutdown_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CMSISAgent2_shutdown_args.prototype.write = function(output) {
  output.writeStructBegin('CMSISAgent2_shutdown_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CMSISAgent2_shutdown_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.CMSISAgentException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
CMSISAgent2_shutdown_result.prototype = {};
CMSISAgent2_shutdown_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.CMSISAgentException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CMSISAgent2_shutdown_result.prototype.write = function(output) {
  output.writeStructBegin('CMSISAgent2_shutdown_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CMSISAgent2_activate_args = function(args) {
  this.project = null;
  if (args) {
    if (args.project !== undefined && args.project !== null) {
      this.project = args.project;
    }
  }
};
CMSISAgent2_activate_args.prototype = {};
CMSISAgent2_activate_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.project = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CMSISAgent2_activate_args.prototype.write = function(output) {
  output.writeStructBegin('CMSISAgent2_activate_args');
  if (this.project !== null && this.project !== undefined) {
    output.writeFieldBegin('project', Thrift.Type.STRING, 1);
    output.writeString(this.project);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CMSISAgent2_activate_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.CMSISAgentException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
CMSISAgent2_activate_result.prototype = {};
CMSISAgent2_activate_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.CMSISAgentException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CMSISAgent2_activate_result.prototype.write = function(output) {
  output.writeStructBegin('CMSISAgent2_activate_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CMSISAgent2_getComponentInfo_args = function(args) {
  this.rte = null;
  if (args) {
    if (args.rte !== undefined && args.rte !== null) {
      this.rte = args.rte;
    }
  }
};
CMSISAgent2_getComponentInfo_args.prototype = {};
CMSISAgent2_getComponentInfo_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.rte = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CMSISAgent2_getComponentInfo_args.prototype.write = function(output) {
  output.writeStructBegin('CMSISAgent2_getComponentInfo_args');
  if (this.rte !== null && this.rte !== undefined) {
    output.writeFieldBegin('rte', Thrift.Type.STRING, 1);
    output.writeString(this.rte);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CMSISAgent2_getComponentInfo_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.CMSISAgentException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.ComponentInfo]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
CMSISAgent2_getComponentInfo_result.prototype = {};
CMSISAgent2_getComponentInfo_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp326 = input.readListBegin();
        var _size25 = _rtmp326.size || 0;
        for (var _i27 = 0; _i27 < _size25; ++_i27) {
          var elem28 = null;
          elem28 = new ttypes.ComponentInfo();
          elem28.read(input);
          this.success.push(elem28);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.CMSISAgentException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CMSISAgent2_getComponentInfo_result.prototype.write = function(output) {
  output.writeStructBegin('CMSISAgent2_getComponentInfo_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter29 in this.success) {
      if (this.success.hasOwnProperty(iter29)) {
        iter29 = this.success[iter29];
        iter29.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CMSISAgent2_getValidationStatus_args = function(args) {
  this.rte = null;
  if (args) {
    if (args.rte !== undefined && args.rte !== null) {
      this.rte = args.rte;
    }
  }
};
CMSISAgent2_getValidationStatus_args.prototype = {};
CMSISAgent2_getValidationStatus_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.rte = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CMSISAgent2_getValidationStatus_args.prototype.write = function(output) {
  output.writeStructBegin('CMSISAgent2_getValidationStatus_args');
  if (this.rte !== null && this.rte !== undefined) {
    output.writeFieldBegin('rte', Thrift.Type.STRING, 1);
    output.writeString(this.rte);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CMSISAgent2_getValidationStatus_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.CMSISAgentException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.ValidationStatus]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
CMSISAgent2_getValidationStatus_result.prototype = {};
CMSISAgent2_getValidationStatus_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp331 = input.readListBegin();
        var _size30 = _rtmp331.size || 0;
        for (var _i32 = 0; _i32 < _size30; ++_i32) {
          var elem33 = null;
          elem33 = new ttypes.ValidationStatus();
          elem33.read(input);
          this.success.push(elem33);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.CMSISAgentException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CMSISAgent2_getValidationStatus_result.prototype.write = function(output) {
  output.writeStructBegin('CMSISAgent2_getValidationStatus_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter34 in this.success) {
      if (this.success.hasOwnProperty(iter34)) {
        iter34 = this.success[iter34];
        iter34.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CMSISAgent2_getApis_args = function(args) {
  this.rte = null;
  if (args) {
    if (args.rte !== undefined && args.rte !== null) {
      this.rte = args.rte;
    }
  }
};
CMSISAgent2_getApis_args.prototype = {};
CMSISAgent2_getApis_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.rte = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CMSISAgent2_getApis_args.prototype.write = function(output) {
  output.writeStructBegin('CMSISAgent2_getApis_args');
  if (this.rte !== null && this.rte !== undefined) {
    output.writeFieldBegin('rte', Thrift.Type.STRING, 1);
    output.writeString(this.rte);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CMSISAgent2_getApis_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.CMSISAgentException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.Api]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
CMSISAgent2_getApis_result.prototype = {};
CMSISAgent2_getApis_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp336 = input.readListBegin();
        var _size35 = _rtmp336.size || 0;
        for (var _i37 = 0; _i37 < _size35; ++_i37) {
          var elem38 = null;
          elem38 = new ttypes.Api();
          elem38.read(input);
          this.success.push(elem38);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.CMSISAgentException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CMSISAgent2_getApis_result.prototype.write = function(output) {
  output.writeStructBegin('CMSISAgent2_getApis_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter39 in this.success) {
      if (this.success.hasOwnProperty(iter39)) {
        iter39 = this.success[iter39];
        iter39.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CMSISAgent2_getDeviceInfo_args = function(args) {
  this.rte = null;
  if (args) {
    if (args.rte !== undefined && args.rte !== null) {
      this.rte = args.rte;
    }
  }
};
CMSISAgent2_getDeviceInfo_args.prototype = {};
CMSISAgent2_getDeviceInfo_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.rte = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CMSISAgent2_getDeviceInfo_args.prototype.write = function(output) {
  output.writeStructBegin('CMSISAgent2_getDeviceInfo_args');
  if (this.rte !== null && this.rte !== undefined) {
    output.writeFieldBegin('rte', Thrift.Type.STRING, 1);
    output.writeString(this.rte);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CMSISAgent2_getDeviceInfo_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.CMSISAgentException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.DeviceInfo(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
CMSISAgent2_getDeviceInfo_result.prototype = {};
CMSISAgent2_getDeviceInfo_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.DeviceInfo();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.CMSISAgentException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CMSISAgent2_getDeviceInfo_result.prototype.write = function(output) {
  output.writeStructBegin('CMSISAgent2_getDeviceInfo_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CMSISAgent2_getPathToPack_args = function(args) {
  this.packId = null;
  if (args) {
    if (args.packId !== undefined && args.packId !== null) {
      this.packId = args.packId;
    }
  }
};
CMSISAgent2_getPathToPack_args.prototype = {};
CMSISAgent2_getPathToPack_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.packId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CMSISAgent2_getPathToPack_args.prototype.write = function(output) {
  output.writeStructBegin('CMSISAgent2_getPathToPack_args');
  if (this.packId !== null && this.packId !== undefined) {
    output.writeFieldBegin('packId', Thrift.Type.STRING, 1);
    output.writeString(this.packId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CMSISAgent2_getPathToPack_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.CMSISAgentException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
CMSISAgent2_getPathToPack_result.prototype = {};
CMSISAgent2_getPathToPack_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.CMSISAgentException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CMSISAgent2_getPathToPack_result.prototype.write = function(output) {
  output.writeStructBegin('CMSISAgent2_getPathToPack_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CMSISAgent2_getPackIdFromPath_args = function(args) {
  this.fileInPack = null;
  if (args) {
    if (args.fileInPack !== undefined && args.fileInPack !== null) {
      this.fileInPack = args.fileInPack;
    }
  }
};
CMSISAgent2_getPackIdFromPath_args.prototype = {};
CMSISAgent2_getPackIdFromPath_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.fileInPack = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CMSISAgent2_getPackIdFromPath_args.prototype.write = function(output) {
  output.writeStructBegin('CMSISAgent2_getPackIdFromPath_args');
  if (this.fileInPack !== null && this.fileInPack !== undefined) {
    output.writeFieldBegin('fileInPack', Thrift.Type.STRING, 1);
    output.writeString(this.fileInPack);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CMSISAgent2_getPackIdFromPath_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.CMSISAgentException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.FileInPack(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
CMSISAgent2_getPackIdFromPath_result.prototype = {};
CMSISAgent2_getPackIdFromPath_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.FileInPack();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.CMSISAgentException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CMSISAgent2_getPackIdFromPath_result.prototype.write = function(output) {
  output.writeStructBegin('CMSISAgent2_getPackIdFromPath_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CMSISAgent2_getRteFiles_args = function(args) {
  this.projectName = null;
  if (args) {
    if (args.projectName !== undefined && args.projectName !== null) {
      this.projectName = args.projectName;
    }
  }
};
CMSISAgent2_getRteFiles_args.prototype = {};
CMSISAgent2_getRteFiles_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.projectName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CMSISAgent2_getRteFiles_args.prototype.write = function(output) {
  output.writeStructBegin('CMSISAgent2_getRteFiles_args');
  if (this.projectName !== null && this.projectName !== undefined) {
    output.writeFieldBegin('projectName', Thrift.Type.STRING, 1);
    output.writeString(this.projectName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CMSISAgent2_getRteFiles_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.CMSISAgentException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.RteFile]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
CMSISAgent2_getRteFiles_result.prototype = {};
CMSISAgent2_getRteFiles_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp341 = input.readListBegin();
        var _size40 = _rtmp341.size || 0;
        for (var _i42 = 0; _i42 < _size40; ++_i42) {
          var elem43 = null;
          elem43 = new ttypes.RteFile();
          elem43.read(input);
          this.success.push(elem43);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.CMSISAgentException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CMSISAgent2_getRteFiles_result.prototype.write = function(output) {
  output.writeStructBegin('CMSISAgent2_getRteFiles_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter44 in this.success) {
      if (this.success.hasOwnProperty(iter44)) {
        iter44 = this.success[iter44];
        iter44.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CMSISAgent2_openDeviceDialog_args = function(args) {
  this.projectName = null;
  if (args) {
    if (args.projectName !== undefined && args.projectName !== null) {
      this.projectName = args.projectName;
    }
  }
};
CMSISAgent2_openDeviceDialog_args.prototype = {};
CMSISAgent2_openDeviceDialog_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.projectName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CMSISAgent2_openDeviceDialog_args.prototype.write = function(output) {
  output.writeStructBegin('CMSISAgent2_openDeviceDialog_args');
  if (this.projectName !== null && this.projectName !== undefined) {
    output.writeFieldBegin('projectName', Thrift.Type.STRING, 1);
    output.writeString(this.projectName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CMSISAgent2_openDeviceDialog_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.CMSISAgentException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
CMSISAgent2_openDeviceDialog_result.prototype = {};
CMSISAgent2_openDeviceDialog_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.CMSISAgentException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CMSISAgent2_openDeviceDialog_result.prototype.write = function(output) {
  output.writeStructBegin('CMSISAgent2_openDeviceDialog_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CMSISAgent2Client = exports.Client = function(input, output) {
  this.input = input;
  this.output = (!output) ? input : output;
  this.seqid = 0;
};
Thrift.inherits(CMSISAgent2Client, HeartbeatServiceClient);

CMSISAgent2Client.prototype.loadProject = function(ewpfile, rteConfigFile, callback) {
  this.send_loadProject(ewpfile, rteConfigFile, callback); 
  if (!callback) {
  this.recv_loadProject();
  }
};

CMSISAgent2Client.prototype.send_loadProject = function(ewpfile, rteConfigFile, callback) {
  var params = {
    ewpfile: ewpfile,
    rteConfigFile: rteConfigFile
  };
  var args = new CMSISAgent2_loadProject_args(params);
  try {
    this.output.writeMessageBegin('loadProject', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_loadProject();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

CMSISAgent2Client.prototype.recv_loadProject = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CMSISAgent2_loadProject_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};

CMSISAgent2Client.prototype.createNewProject = function(ewpfile, outputType, callback) {
  this.send_createNewProject(ewpfile, outputType, callback); 
  if (!callback) {
  this.recv_createNewProject();
  }
};

CMSISAgent2Client.prototype.send_createNewProject = function(ewpfile, outputType, callback) {
  var params = {
    ewpfile: ewpfile,
    outputType: outputType
  };
  var args = new CMSISAgent2_createNewProject_args(params);
  try {
    this.output.writeMessageBegin('createNewProject', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_createNewProject();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

CMSISAgent2Client.prototype.recv_createNewProject = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CMSISAgent2_createNewProject_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};

CMSISAgent2Client.prototype.shutdown = function(callback) {
  this.send_shutdown(callback); 
  if (!callback) {
  this.recv_shutdown();
  }
};

CMSISAgent2Client.prototype.send_shutdown = function(callback) {
  var args = new CMSISAgent2_shutdown_args();
  try {
    this.output.writeMessageBegin('shutdown', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_shutdown();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

CMSISAgent2Client.prototype.recv_shutdown = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CMSISAgent2_shutdown_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};

CMSISAgent2Client.prototype.activate = function(project, callback) {
  this.send_activate(project, callback); 
  if (!callback) {
  this.recv_activate();
  }
};

CMSISAgent2Client.prototype.send_activate = function(project, callback) {
  var params = {
    project: project
  };
  var args = new CMSISAgent2_activate_args(params);
  try {
    this.output.writeMessageBegin('activate', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_activate();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

CMSISAgent2Client.prototype.recv_activate = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CMSISAgent2_activate_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};

CMSISAgent2Client.prototype.getComponentInfo = function(rte, callback) {
  this.send_getComponentInfo(rte, callback); 
  if (!callback) {
    return this.recv_getComponentInfo();
  }
};

CMSISAgent2Client.prototype.send_getComponentInfo = function(rte, callback) {
  var params = {
    rte: rte
  };
  var args = new CMSISAgent2_getComponentInfo_args(params);
  try {
    this.output.writeMessageBegin('getComponentInfo', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_getComponentInfo();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

CMSISAgent2Client.prototype.recv_getComponentInfo = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CMSISAgent2_getComponentInfo_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getComponentInfo failed: unknown result';
};

CMSISAgent2Client.prototype.getValidationStatus = function(rte, callback) {
  this.send_getValidationStatus(rte, callback); 
  if (!callback) {
    return this.recv_getValidationStatus();
  }
};

CMSISAgent2Client.prototype.send_getValidationStatus = function(rte, callback) {
  var params = {
    rte: rte
  };
  var args = new CMSISAgent2_getValidationStatus_args(params);
  try {
    this.output.writeMessageBegin('getValidationStatus', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_getValidationStatus();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

CMSISAgent2Client.prototype.recv_getValidationStatus = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CMSISAgent2_getValidationStatus_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getValidationStatus failed: unknown result';
};

CMSISAgent2Client.prototype.getApis = function(rte, callback) {
  this.send_getApis(rte, callback); 
  if (!callback) {
    return this.recv_getApis();
  }
};

CMSISAgent2Client.prototype.send_getApis = function(rte, callback) {
  var params = {
    rte: rte
  };
  var args = new CMSISAgent2_getApis_args(params);
  try {
    this.output.writeMessageBegin('getApis', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_getApis();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

CMSISAgent2Client.prototype.recv_getApis = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CMSISAgent2_getApis_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getApis failed: unknown result';
};

CMSISAgent2Client.prototype.getDeviceInfo = function(rte, callback) {
  this.send_getDeviceInfo(rte, callback); 
  if (!callback) {
    return this.recv_getDeviceInfo();
  }
};

CMSISAgent2Client.prototype.send_getDeviceInfo = function(rte, callback) {
  var params = {
    rte: rte
  };
  var args = new CMSISAgent2_getDeviceInfo_args(params);
  try {
    this.output.writeMessageBegin('getDeviceInfo', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_getDeviceInfo();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

CMSISAgent2Client.prototype.recv_getDeviceInfo = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CMSISAgent2_getDeviceInfo_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getDeviceInfo failed: unknown result';
};

CMSISAgent2Client.prototype.getPathToPack = function(packId, callback) {
  this.send_getPathToPack(packId, callback); 
  if (!callback) {
    return this.recv_getPathToPack();
  }
};

CMSISAgent2Client.prototype.send_getPathToPack = function(packId, callback) {
  var params = {
    packId: packId
  };
  var args = new CMSISAgent2_getPathToPack_args(params);
  try {
    this.output.writeMessageBegin('getPathToPack', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_getPathToPack();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

CMSISAgent2Client.prototype.recv_getPathToPack = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CMSISAgent2_getPathToPack_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getPathToPack failed: unknown result';
};

CMSISAgent2Client.prototype.getPackIdFromPath = function(fileInPack, callback) {
  this.send_getPackIdFromPath(fileInPack, callback); 
  if (!callback) {
    return this.recv_getPackIdFromPath();
  }
};

CMSISAgent2Client.prototype.send_getPackIdFromPath = function(fileInPack, callback) {
  var params = {
    fileInPack: fileInPack
  };
  var args = new CMSISAgent2_getPackIdFromPath_args(params);
  try {
    this.output.writeMessageBegin('getPackIdFromPath', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_getPackIdFromPath();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

CMSISAgent2Client.prototype.recv_getPackIdFromPath = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CMSISAgent2_getPackIdFromPath_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getPackIdFromPath failed: unknown result';
};

CMSISAgent2Client.prototype.getRteFiles = function(projectName, callback) {
  this.send_getRteFiles(projectName, callback); 
  if (!callback) {
    return this.recv_getRteFiles();
  }
};

CMSISAgent2Client.prototype.send_getRteFiles = function(projectName, callback) {
  var params = {
    projectName: projectName
  };
  var args = new CMSISAgent2_getRteFiles_args(params);
  try {
    this.output.writeMessageBegin('getRteFiles', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_getRteFiles();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

CMSISAgent2Client.prototype.recv_getRteFiles = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CMSISAgent2_getRteFiles_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getRteFiles failed: unknown result';
};

CMSISAgent2Client.prototype.openDeviceDialog = function(projectName, callback) {
  this.send_openDeviceDialog(projectName, callback); 
  if (!callback) {
  this.recv_openDeviceDialog();
  }
};

CMSISAgent2Client.prototype.send_openDeviceDialog = function(projectName, callback) {
  var params = {
    projectName: projectName
  };
  var args = new CMSISAgent2_openDeviceDialog_args(params);
  try {
    this.output.writeMessageBegin('openDeviceDialog', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_openDeviceDialog();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

CMSISAgent2Client.prototype.recv_openDeviceDialog = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CMSISAgent2_openDeviceDialog_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};
