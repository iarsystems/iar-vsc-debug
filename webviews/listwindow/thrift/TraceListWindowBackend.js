//
// Autogenerated by Thrift Compiler (0.14.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
if (typeof Int64 === 'undefined' && typeof require === 'function') {
  var Int64 = require('node-int64');
}


//HELPER FUNCTIONS AND STRUCTURES

var TraceListWindowBackend_isEnabled_args = function(args) {
};
TraceListWindowBackend_isEnabled_args.prototype = {};
TraceListWindowBackend_isEnabled_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TraceListWindowBackend_isEnabled_args.prototype.write = function(output) {
  output.writeStructBegin('TraceListWindowBackend_isEnabled_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TraceListWindowBackend_isEnabled_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
TraceListWindowBackend_isEnabled_result.prototype = {};
TraceListWindowBackend_isEnabled_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TraceListWindowBackend_isEnabled_result.prototype.write = function(output) {
  output.writeStructBegin('TraceListWindowBackend_isEnabled_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TraceListWindowBackend_canEnable_args = function(args) {
};
TraceListWindowBackend_canEnable_args.prototype = {};
TraceListWindowBackend_canEnable_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TraceListWindowBackend_canEnable_args.prototype.write = function(output) {
  output.writeStructBegin('TraceListWindowBackend_canEnable_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TraceListWindowBackend_canEnable_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
TraceListWindowBackend_canEnable_result.prototype = {};
TraceListWindowBackend_canEnable_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TraceListWindowBackend_canEnable_result.prototype.write = function(output) {
  output.writeStructBegin('TraceListWindowBackend_canEnable_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TraceListWindowBackend_setEnabled_args = function(args) {
  this.on = null;
  if (args) {
    if (args.on !== undefined && args.on !== null) {
      this.on = args.on;
    }
  }
};
TraceListWindowBackend_setEnabled_args.prototype = {};
TraceListWindowBackend_setEnabled_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.on = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TraceListWindowBackend_setEnabled_args.prototype.write = function(output) {
  output.writeStructBegin('TraceListWindowBackend_setEnabled_args');
  if (this.on !== null && this.on !== undefined) {
    output.writeFieldBegin('on', Thrift.Type.BOOL, 1);
    output.writeBool(this.on);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TraceListWindowBackend_setEnabled_result = function(args) {
};
TraceListWindowBackend_setEnabled_result.prototype = {};
TraceListWindowBackend_setEnabled_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TraceListWindowBackend_setEnabled_result.prototype.write = function(output) {
  output.writeStructBegin('TraceListWindowBackend_setEnabled_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TraceListWindowBackend_canClear_args = function(args) {
};
TraceListWindowBackend_canClear_args.prototype = {};
TraceListWindowBackend_canClear_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TraceListWindowBackend_canClear_args.prototype.write = function(output) {
  output.writeStructBegin('TraceListWindowBackend_canClear_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TraceListWindowBackend_canClear_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
TraceListWindowBackend_canClear_result.prototype = {};
TraceListWindowBackend_canClear_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TraceListWindowBackend_canClear_result.prototype.write = function(output) {
  output.writeStructBegin('TraceListWindowBackend_canClear_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TraceListWindowBackend_clear_args = function(args) {
};
TraceListWindowBackend_clear_args.prototype = {};
TraceListWindowBackend_clear_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TraceListWindowBackend_clear_args.prototype.write = function(output) {
  output.writeStructBegin('TraceListWindowBackend_clear_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TraceListWindowBackend_clear_result = function(args) {
};
TraceListWindowBackend_clear_result.prototype = {};
TraceListWindowBackend_clear_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TraceListWindowBackend_clear_result.prototype.write = function(output) {
  output.writeStructBegin('TraceListWindowBackend_clear_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TraceListWindowBackend_isMixedMode_args = function(args) {
};
TraceListWindowBackend_isMixedMode_args.prototype = {};
TraceListWindowBackend_isMixedMode_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TraceListWindowBackend_isMixedMode_args.prototype.write = function(output) {
  output.writeStructBegin('TraceListWindowBackend_isMixedMode_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TraceListWindowBackend_isMixedMode_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
TraceListWindowBackend_isMixedMode_result.prototype = {};
TraceListWindowBackend_isMixedMode_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TraceListWindowBackend_isMixedMode_result.prototype.write = function(output) {
  output.writeStructBegin('TraceListWindowBackend_isMixedMode_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TraceListWindowBackend_canUseMixedMode_args = function(args) {
};
TraceListWindowBackend_canUseMixedMode_args.prototype = {};
TraceListWindowBackend_canUseMixedMode_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TraceListWindowBackend_canUseMixedMode_args.prototype.write = function(output) {
  output.writeStructBegin('TraceListWindowBackend_canUseMixedMode_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TraceListWindowBackend_canUseMixedMode_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
TraceListWindowBackend_canUseMixedMode_result.prototype = {};
TraceListWindowBackend_canUseMixedMode_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TraceListWindowBackend_canUseMixedMode_result.prototype.write = function(output) {
  output.writeStructBegin('TraceListWindowBackend_canUseMixedMode_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TraceListWindowBackend_setMixedMode_args = function(args) {
  this.on = null;
  if (args) {
    if (args.on !== undefined && args.on !== null) {
      this.on = args.on;
    }
  }
};
TraceListWindowBackend_setMixedMode_args.prototype = {};
TraceListWindowBackend_setMixedMode_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.on = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TraceListWindowBackend_setMixedMode_args.prototype.write = function(output) {
  output.writeStructBegin('TraceListWindowBackend_setMixedMode_args');
  if (this.on !== null && this.on !== undefined) {
    output.writeFieldBegin('on', Thrift.Type.BOOL, 1);
    output.writeBool(this.on);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TraceListWindowBackend_setMixedMode_result = function(args) {
};
TraceListWindowBackend_setMixedMode_result.prototype = {};
TraceListWindowBackend_setMixedMode_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TraceListWindowBackend_setMixedMode_result.prototype.write = function(output) {
  output.writeStructBegin('TraceListWindowBackend_setMixedMode_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TraceListWindowBackend_canSave_args = function(args) {
};
TraceListWindowBackend_canSave_args.prototype = {};
TraceListWindowBackend_canSave_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TraceListWindowBackend_canSave_args.prototype.write = function(output) {
  output.writeStructBegin('TraceListWindowBackend_canSave_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TraceListWindowBackend_canSave_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
TraceListWindowBackend_canSave_result.prototype = {};
TraceListWindowBackend_canSave_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TraceListWindowBackend_canSave_result.prototype.write = function(output) {
  output.writeStructBegin('TraceListWindowBackend_canSave_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TraceListWindowBackend_save_args = function(args) {
  this.filename = null;
  if (args) {
    if (args.filename !== undefined && args.filename !== null) {
      this.filename = args.filename;
    }
  }
};
TraceListWindowBackend_save_args.prototype = {};
TraceListWindowBackend_save_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.filename = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TraceListWindowBackend_save_args.prototype.write = function(output) {
  output.writeStructBegin('TraceListWindowBackend_save_args');
  if (this.filename !== null && this.filename !== undefined) {
    output.writeFieldBegin('filename', Thrift.Type.STRING, 1);
    output.writeString(this.filename);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TraceListWindowBackend_save_result = function(args) {
};
TraceListWindowBackend_save_result.prototype = {};
TraceListWindowBackend_save_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TraceListWindowBackend_save_result.prototype.write = function(output) {
  output.writeStructBegin('TraceListWindowBackend_save_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TraceListWindowBackend_getDefaultSaveFilename_args = function(args) {
};
TraceListWindowBackend_getDefaultSaveFilename_args.prototype = {};
TraceListWindowBackend_getDefaultSaveFilename_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TraceListWindowBackend_getDefaultSaveFilename_args.prototype.write = function(output) {
  output.writeStructBegin('TraceListWindowBackend_getDefaultSaveFilename_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TraceListWindowBackend_getDefaultSaveFilename_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
TraceListWindowBackend_getDefaultSaveFilename_result.prototype = {};
TraceListWindowBackend_getDefaultSaveFilename_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TraceListWindowBackend_getDefaultSaveFilename_result.prototype.write = function(output) {
  output.writeStructBegin('TraceListWindowBackend_getDefaultSaveFilename_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TraceListWindowBackend_getDefaultSaveFilenameExt_args = function(args) {
};
TraceListWindowBackend_getDefaultSaveFilenameExt_args.prototype = {};
TraceListWindowBackend_getDefaultSaveFilenameExt_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TraceListWindowBackend_getDefaultSaveFilenameExt_args.prototype.write = function(output) {
  output.writeStructBegin('TraceListWindowBackend_getDefaultSaveFilenameExt_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TraceListWindowBackend_getDefaultSaveFilenameExt_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
TraceListWindowBackend_getDefaultSaveFilenameExt_result.prototype = {};
TraceListWindowBackend_getDefaultSaveFilenameExt_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TraceListWindowBackend_getDefaultSaveFilenameExt_result.prototype.write = function(output) {
  output.writeStructBegin('TraceListWindowBackend_getDefaultSaveFilenameExt_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TraceListWindowBackend_canFind_args = function(args) {
};
TraceListWindowBackend_canFind_args.prototype = {};
TraceListWindowBackend_canFind_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TraceListWindowBackend_canFind_args.prototype.write = function(output) {
  output.writeStructBegin('TraceListWindowBackend_canFind_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TraceListWindowBackend_canFind_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
TraceListWindowBackend_canFind_result.prototype = {};
TraceListWindowBackend_canFind_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TraceListWindowBackend_canFind_result.prototype.write = function(output) {
  output.writeStructBegin('TraceListWindowBackend_canFind_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TraceListWindowBackend_getFindParams_args = function(args) {
};
TraceListWindowBackend_getFindParams_args.prototype = {};
TraceListWindowBackend_getFindParams_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TraceListWindowBackend_getFindParams_args.prototype.write = function(output) {
  output.writeStructBegin('TraceListWindowBackend_getFindParams_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TraceListWindowBackend_getFindParams_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.TraceFindParams(args.success);
    }
  }
};
TraceListWindowBackend_getFindParams_result.prototype = {};
TraceListWindowBackend_getFindParams_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TraceFindParams();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TraceListWindowBackend_getFindParams_result.prototype.write = function(output) {
  output.writeStructBegin('TraceListWindowBackend_getFindParams_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TraceListWindowBackend_find_args = function(args) {
  this.params = null;
  if (args) {
    if (args.params !== undefined && args.params !== null) {
      this.params = new ttypes.TraceFindParams(args.params);
    }
  }
};
TraceListWindowBackend_find_args.prototype = {};
TraceListWindowBackend_find_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.params = new ttypes.TraceFindParams();
        this.params.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TraceListWindowBackend_find_args.prototype.write = function(output) {
  output.writeStructBegin('TraceListWindowBackend_find_args');
  if (this.params !== null && this.params !== undefined) {
    output.writeFieldBegin('params', Thrift.Type.STRUCT, 1);
    this.params.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TraceListWindowBackend_find_result = function(args) {
};
TraceListWindowBackend_find_result.prototype = {};
TraceListWindowBackend_find_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TraceListWindowBackend_find_result.prototype.write = function(output) {
  output.writeStructBegin('TraceListWindowBackend_find_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TraceListWindowBackend_findLocal_args = function(args) {
  this.params = null;
  if (args) {
    if (args.params !== undefined && args.params !== null) {
      this.params = new ttypes.TraceFindParams(args.params);
    }
  }
};
TraceListWindowBackend_findLocal_args.prototype = {};
TraceListWindowBackend_findLocal_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.params = new ttypes.TraceFindParams();
        this.params.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TraceListWindowBackend_findLocal_args.prototype.write = function(output) {
  output.writeStructBegin('TraceListWindowBackend_findLocal_args');
  if (this.params !== null && this.params !== undefined) {
    output.writeFieldBegin('params', Thrift.Type.STRUCT, 1);
    this.params.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TraceListWindowBackend_findLocal_result = function(args) {
};
TraceListWindowBackend_findLocal_result.prototype = {};
TraceListWindowBackend_findLocal_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TraceListWindowBackend_findLocal_result.prototype.write = function(output) {
  output.writeStructBegin('TraceListWindowBackend_findLocal_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TraceListWindowBackend_canBrowse_args = function(args) {
};
TraceListWindowBackend_canBrowse_args.prototype = {};
TraceListWindowBackend_canBrowse_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TraceListWindowBackend_canBrowse_args.prototype.write = function(output) {
  output.writeStructBegin('TraceListWindowBackend_canBrowse_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TraceListWindowBackend_canBrowse_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
TraceListWindowBackend_canBrowse_result.prototype = {};
TraceListWindowBackend_canBrowse_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TraceListWindowBackend_canBrowse_result.prototype.write = function(output) {
  output.writeStructBegin('TraceListWindowBackend_canBrowse_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TraceListWindowBackend_isBrowsing_args = function(args) {
};
TraceListWindowBackend_isBrowsing_args.prototype = {};
TraceListWindowBackend_isBrowsing_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TraceListWindowBackend_isBrowsing_args.prototype.write = function(output) {
  output.writeStructBegin('TraceListWindowBackend_isBrowsing_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TraceListWindowBackend_isBrowsing_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
TraceListWindowBackend_isBrowsing_result.prototype = {};
TraceListWindowBackend_isBrowsing_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TraceListWindowBackend_isBrowsing_result.prototype.write = function(output) {
  output.writeStructBegin('TraceListWindowBackend_isBrowsing_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TraceListWindowBackend_setBrowseMode_args = function(args) {
  this.on = null;
  if (args) {
    if (args.on !== undefined && args.on !== null) {
      this.on = args.on;
    }
  }
};
TraceListWindowBackend_setBrowseMode_args.prototype = {};
TraceListWindowBackend_setBrowseMode_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.on = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TraceListWindowBackend_setBrowseMode_args.prototype.write = function(output) {
  output.writeStructBegin('TraceListWindowBackend_setBrowseMode_args');
  if (this.on !== null && this.on !== undefined) {
    output.writeFieldBegin('on', Thrift.Type.BOOL, 1);
    output.writeBool(this.on);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TraceListWindowBackend_setBrowseMode_result = function(args) {
};
TraceListWindowBackend_setBrowseMode_result.prototype = {};
TraceListWindowBackend_setBrowseMode_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TraceListWindowBackend_setBrowseMode_result.prototype.write = function(output) {
  output.writeStructBegin('TraceListWindowBackend_setBrowseMode_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TraceListWindowBackend_getProgress_args = function(args) {
};
TraceListWindowBackend_getProgress_args.prototype = {};
TraceListWindowBackend_getProgress_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TraceListWindowBackend_getProgress_args.prototype.write = function(output) {
  output.writeStructBegin('TraceListWindowBackend_getProgress_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TraceListWindowBackend_getProgress_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.TraceProgress(args.success);
    }
  }
};
TraceListWindowBackend_getProgress_result.prototype = {};
TraceListWindowBackend_getProgress_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TraceProgress();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TraceListWindowBackend_getProgress_result.prototype.write = function(output) {
  output.writeStructBegin('TraceListWindowBackend_getProgress_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TraceListWindowBackend_supportsTraceSettings_args = function(args) {
};
TraceListWindowBackend_supportsTraceSettings_args.prototype = {};
TraceListWindowBackend_supportsTraceSettings_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TraceListWindowBackend_supportsTraceSettings_args.prototype.write = function(output) {
  output.writeStructBegin('TraceListWindowBackend_supportsTraceSettings_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TraceListWindowBackend_supportsTraceSettings_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
TraceListWindowBackend_supportsTraceSettings_result.prototype = {};
TraceListWindowBackend_supportsTraceSettings_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TraceListWindowBackend_supportsTraceSettings_result.prototype.write = function(output) {
  output.writeStructBegin('TraceListWindowBackend_supportsTraceSettings_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TraceListWindowBackendClient = exports.Client = function(input, output) {
  this.input = input;
  this.output = (!output) ? input : output;
  this.seqid = 0;
};
Thrift.inherits(TraceListWindowBackendClient, ListWindowBackendClient);

TraceListWindowBackendClient.prototype.isEnabled = function(callback) {
  this.send_isEnabled(callback); 
  if (!callback) {
    return this.recv_isEnabled();
  }
};

TraceListWindowBackendClient.prototype.send_isEnabled = function(callback) {
  var args = new TraceListWindowBackend_isEnabled_args();
  try {
    this.output.writeMessageBegin('isEnabled', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_isEnabled();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

TraceListWindowBackendClient.prototype.recv_isEnabled = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TraceListWindowBackend_isEnabled_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'isEnabled failed: unknown result';
};

TraceListWindowBackendClient.prototype.canEnable = function(callback) {
  this.send_canEnable(callback); 
  if (!callback) {
    return this.recv_canEnable();
  }
};

TraceListWindowBackendClient.prototype.send_canEnable = function(callback) {
  var args = new TraceListWindowBackend_canEnable_args();
  try {
    this.output.writeMessageBegin('canEnable', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_canEnable();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

TraceListWindowBackendClient.prototype.recv_canEnable = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TraceListWindowBackend_canEnable_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'canEnable failed: unknown result';
};

TraceListWindowBackendClient.prototype.setEnabled = function(on, callback) {
  this.send_setEnabled(on, callback); 
  if (!callback) {
  this.recv_setEnabled();
  }
};

TraceListWindowBackendClient.prototype.send_setEnabled = function(on, callback) {
  var params = {
    on: on
  };
  var args = new TraceListWindowBackend_setEnabled_args(params);
  try {
    this.output.writeMessageBegin('setEnabled', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_setEnabled();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

TraceListWindowBackendClient.prototype.recv_setEnabled = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TraceListWindowBackend_setEnabled_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};

TraceListWindowBackendClient.prototype.canClear = function(callback) {
  this.send_canClear(callback); 
  if (!callback) {
    return this.recv_canClear();
  }
};

TraceListWindowBackendClient.prototype.send_canClear = function(callback) {
  var args = new TraceListWindowBackend_canClear_args();
  try {
    this.output.writeMessageBegin('canClear', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_canClear();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

TraceListWindowBackendClient.prototype.recv_canClear = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TraceListWindowBackend_canClear_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'canClear failed: unknown result';
};

TraceListWindowBackendClient.prototype.clear = function(callback) {
  this.send_clear(callback); 
  if (!callback) {
  this.recv_clear();
  }
};

TraceListWindowBackendClient.prototype.send_clear = function(callback) {
  var args = new TraceListWindowBackend_clear_args();
  try {
    this.output.writeMessageBegin('clear', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_clear();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

TraceListWindowBackendClient.prototype.recv_clear = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TraceListWindowBackend_clear_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};

TraceListWindowBackendClient.prototype.isMixedMode = function(callback) {
  this.send_isMixedMode(callback); 
  if (!callback) {
    return this.recv_isMixedMode();
  }
};

TraceListWindowBackendClient.prototype.send_isMixedMode = function(callback) {
  var args = new TraceListWindowBackend_isMixedMode_args();
  try {
    this.output.writeMessageBegin('isMixedMode', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_isMixedMode();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

TraceListWindowBackendClient.prototype.recv_isMixedMode = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TraceListWindowBackend_isMixedMode_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'isMixedMode failed: unknown result';
};

TraceListWindowBackendClient.prototype.canUseMixedMode = function(callback) {
  this.send_canUseMixedMode(callback); 
  if (!callback) {
    return this.recv_canUseMixedMode();
  }
};

TraceListWindowBackendClient.prototype.send_canUseMixedMode = function(callback) {
  var args = new TraceListWindowBackend_canUseMixedMode_args();
  try {
    this.output.writeMessageBegin('canUseMixedMode', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_canUseMixedMode();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

TraceListWindowBackendClient.prototype.recv_canUseMixedMode = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TraceListWindowBackend_canUseMixedMode_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'canUseMixedMode failed: unknown result';
};

TraceListWindowBackendClient.prototype.setMixedMode = function(on, callback) {
  this.send_setMixedMode(on, callback); 
  if (!callback) {
  this.recv_setMixedMode();
  }
};

TraceListWindowBackendClient.prototype.send_setMixedMode = function(on, callback) {
  var params = {
    on: on
  };
  var args = new TraceListWindowBackend_setMixedMode_args(params);
  try {
    this.output.writeMessageBegin('setMixedMode', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_setMixedMode();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

TraceListWindowBackendClient.prototype.recv_setMixedMode = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TraceListWindowBackend_setMixedMode_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};

TraceListWindowBackendClient.prototype.canSave = function(callback) {
  this.send_canSave(callback); 
  if (!callback) {
    return this.recv_canSave();
  }
};

TraceListWindowBackendClient.prototype.send_canSave = function(callback) {
  var args = new TraceListWindowBackend_canSave_args();
  try {
    this.output.writeMessageBegin('canSave', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_canSave();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

TraceListWindowBackendClient.prototype.recv_canSave = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TraceListWindowBackend_canSave_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'canSave failed: unknown result';
};

TraceListWindowBackendClient.prototype.save = function(filename, callback) {
  this.send_save(filename, callback); 
  if (!callback) {
  this.recv_save();
  }
};

TraceListWindowBackendClient.prototype.send_save = function(filename, callback) {
  var params = {
    filename: filename
  };
  var args = new TraceListWindowBackend_save_args(params);
  try {
    this.output.writeMessageBegin('save', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_save();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

TraceListWindowBackendClient.prototype.recv_save = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TraceListWindowBackend_save_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};

TraceListWindowBackendClient.prototype.getDefaultSaveFilename = function(callback) {
  this.send_getDefaultSaveFilename(callback); 
  if (!callback) {
    return this.recv_getDefaultSaveFilename();
  }
};

TraceListWindowBackendClient.prototype.send_getDefaultSaveFilename = function(callback) {
  var args = new TraceListWindowBackend_getDefaultSaveFilename_args();
  try {
    this.output.writeMessageBegin('getDefaultSaveFilename', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_getDefaultSaveFilename();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

TraceListWindowBackendClient.prototype.recv_getDefaultSaveFilename = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TraceListWindowBackend_getDefaultSaveFilename_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getDefaultSaveFilename failed: unknown result';
};

TraceListWindowBackendClient.prototype.getDefaultSaveFilenameExt = function(callback) {
  this.send_getDefaultSaveFilenameExt(callback); 
  if (!callback) {
    return this.recv_getDefaultSaveFilenameExt();
  }
};

TraceListWindowBackendClient.prototype.send_getDefaultSaveFilenameExt = function(callback) {
  var args = new TraceListWindowBackend_getDefaultSaveFilenameExt_args();
  try {
    this.output.writeMessageBegin('getDefaultSaveFilenameExt', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_getDefaultSaveFilenameExt();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

TraceListWindowBackendClient.prototype.recv_getDefaultSaveFilenameExt = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TraceListWindowBackend_getDefaultSaveFilenameExt_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getDefaultSaveFilenameExt failed: unknown result';
};

TraceListWindowBackendClient.prototype.canFind = function(callback) {
  this.send_canFind(callback); 
  if (!callback) {
    return this.recv_canFind();
  }
};

TraceListWindowBackendClient.prototype.send_canFind = function(callback) {
  var args = new TraceListWindowBackend_canFind_args();
  try {
    this.output.writeMessageBegin('canFind', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_canFind();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

TraceListWindowBackendClient.prototype.recv_canFind = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TraceListWindowBackend_canFind_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'canFind failed: unknown result';
};

TraceListWindowBackendClient.prototype.getFindParams = function(callback) {
  this.send_getFindParams(callback); 
  if (!callback) {
    return this.recv_getFindParams();
  }
};

TraceListWindowBackendClient.prototype.send_getFindParams = function(callback) {
  var args = new TraceListWindowBackend_getFindParams_args();
  try {
    this.output.writeMessageBegin('getFindParams', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_getFindParams();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

TraceListWindowBackendClient.prototype.recv_getFindParams = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TraceListWindowBackend_getFindParams_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getFindParams failed: unknown result';
};

TraceListWindowBackendClient.prototype.find = function(params, callback) {
  this.send_find(params, callback); 
  if (!callback) {
  this.recv_find();
  }
};

TraceListWindowBackendClient.prototype.send_find = function(params, callback) {
  var params = {
    params: params
  };
  var args = new TraceListWindowBackend_find_args(params);
  try {
    this.output.writeMessageBegin('find', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_find();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

TraceListWindowBackendClient.prototype.recv_find = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TraceListWindowBackend_find_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};

TraceListWindowBackendClient.prototype.findLocal = function(params, callback) {
  this.send_findLocal(params, callback); 
  if (!callback) {
  this.recv_findLocal();
  }
};

TraceListWindowBackendClient.prototype.send_findLocal = function(params, callback) {
  var params = {
    params: params
  };
  var args = new TraceListWindowBackend_findLocal_args(params);
  try {
    this.output.writeMessageBegin('findLocal', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_findLocal();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

TraceListWindowBackendClient.prototype.recv_findLocal = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TraceListWindowBackend_findLocal_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};

TraceListWindowBackendClient.prototype.canBrowse = function(callback) {
  this.send_canBrowse(callback); 
  if (!callback) {
    return this.recv_canBrowse();
  }
};

TraceListWindowBackendClient.prototype.send_canBrowse = function(callback) {
  var args = new TraceListWindowBackend_canBrowse_args();
  try {
    this.output.writeMessageBegin('canBrowse', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_canBrowse();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

TraceListWindowBackendClient.prototype.recv_canBrowse = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TraceListWindowBackend_canBrowse_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'canBrowse failed: unknown result';
};

TraceListWindowBackendClient.prototype.isBrowsing = function(callback) {
  this.send_isBrowsing(callback); 
  if (!callback) {
    return this.recv_isBrowsing();
  }
};

TraceListWindowBackendClient.prototype.send_isBrowsing = function(callback) {
  var args = new TraceListWindowBackend_isBrowsing_args();
  try {
    this.output.writeMessageBegin('isBrowsing', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_isBrowsing();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

TraceListWindowBackendClient.prototype.recv_isBrowsing = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TraceListWindowBackend_isBrowsing_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'isBrowsing failed: unknown result';
};

TraceListWindowBackendClient.prototype.setBrowseMode = function(on, callback) {
  this.send_setBrowseMode(on, callback); 
  if (!callback) {
  this.recv_setBrowseMode();
  }
};

TraceListWindowBackendClient.prototype.send_setBrowseMode = function(on, callback) {
  var params = {
    on: on
  };
  var args = new TraceListWindowBackend_setBrowseMode_args(params);
  try {
    this.output.writeMessageBegin('setBrowseMode', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_setBrowseMode();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

TraceListWindowBackendClient.prototype.recv_setBrowseMode = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TraceListWindowBackend_setBrowseMode_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};

TraceListWindowBackendClient.prototype.getProgress = function(callback) {
  this.send_getProgress(callback); 
  if (!callback) {
    return this.recv_getProgress();
  }
};

TraceListWindowBackendClient.prototype.send_getProgress = function(callback) {
  var args = new TraceListWindowBackend_getProgress_args();
  try {
    this.output.writeMessageBegin('getProgress', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_getProgress();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

TraceListWindowBackendClient.prototype.recv_getProgress = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TraceListWindowBackend_getProgress_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getProgress failed: unknown result';
};

TraceListWindowBackendClient.prototype.supportsTraceSettings = function(callback) {
  this.send_supportsTraceSettings(callback); 
  if (!callback) {
    return this.recv_supportsTraceSettings();
  }
};

TraceListWindowBackendClient.prototype.send_supportsTraceSettings = function(callback) {
  var args = new TraceListWindowBackend_supportsTraceSettings_args();
  try {
    this.output.writeMessageBegin('supportsTraceSettings', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_supportsTraceSettings();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

TraceListWindowBackendClient.prototype.recv_supportsTraceSettings = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TraceListWindowBackend_supportsTraceSettings_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'supportsTraceSettings failed: unknown result';
};
