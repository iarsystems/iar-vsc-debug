//
// Autogenerated by Thrift Compiler (0.14.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
if (typeof Int64 === 'undefined' && typeof require === 'function') {
  var Int64 = require('node-int64');
}


//HELPER FUNCTIONS AND STRUCTURES

var Frontend_messageBox_args = function(args) {
  this.msg = null;
  this.caption = null;
  this.icon = null;
  this.kind = null;
  this.dontAskMgrKey = null;
  if (args) {
    if (args.msg !== undefined && args.msg !== null) {
      this.msg = args.msg;
    }
    if (args.caption !== undefined && args.caption !== null) {
      this.caption = args.caption;
    }
    if (args.icon !== undefined && args.icon !== null) {
      this.icon = args.icon;
    }
    if (args.kind !== undefined && args.kind !== null) {
      this.kind = args.kind;
    }
    if (args.dontAskMgrKey !== undefined && args.dontAskMgrKey !== null) {
      this.dontAskMgrKey = args.dontAskMgrKey;
    }
  }
};
Frontend_messageBox_args.prototype = {};
Frontend_messageBox_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.msg = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.caption = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.icon = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.kind = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.dontAskMgrKey = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Frontend_messageBox_args.prototype.write = function(output) {
  output.writeStructBegin('Frontend_messageBox_args');
  if (this.msg !== null && this.msg !== undefined) {
    output.writeFieldBegin('msg', Thrift.Type.STRING, 1);
    output.writeString(this.msg);
    output.writeFieldEnd();
  }
  if (this.caption !== null && this.caption !== undefined) {
    output.writeFieldBegin('caption', Thrift.Type.STRING, 2);
    output.writeString(this.caption);
    output.writeFieldEnd();
  }
  if (this.icon !== null && this.icon !== undefined) {
    output.writeFieldBegin('icon', Thrift.Type.I32, 3);
    output.writeI32(this.icon);
    output.writeFieldEnd();
  }
  if (this.kind !== null && this.kind !== undefined) {
    output.writeFieldBegin('kind', Thrift.Type.I32, 4);
    output.writeI32(this.kind);
    output.writeFieldEnd();
  }
  if (this.dontAskMgrKey !== null && this.dontAskMgrKey !== undefined) {
    output.writeFieldBegin('dontAskMgrKey', Thrift.Type.STRING, 5);
    output.writeString(this.dontAskMgrKey);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Frontend_messageBox_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
Frontend_messageBox_result.prototype = {};
Frontend_messageBox_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Frontend_messageBox_result.prototype.write = function(output) {
  output.writeStructBegin('Frontend_messageBox_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Frontend_messageBoxAsync_args = function(args) {
  this.msg = null;
  this.caption = null;
  this.icon = null;
  this.dontAskMgrKey = null;
  if (args) {
    if (args.msg !== undefined && args.msg !== null) {
      this.msg = args.msg;
    }
    if (args.caption !== undefined && args.caption !== null) {
      this.caption = args.caption;
    }
    if (args.icon !== undefined && args.icon !== null) {
      this.icon = args.icon;
    }
    if (args.dontAskMgrKey !== undefined && args.dontAskMgrKey !== null) {
      this.dontAskMgrKey = args.dontAskMgrKey;
    }
  }
};
Frontend_messageBoxAsync_args.prototype = {};
Frontend_messageBoxAsync_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.msg = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.caption = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.icon = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.dontAskMgrKey = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Frontend_messageBoxAsync_args.prototype.write = function(output) {
  output.writeStructBegin('Frontend_messageBoxAsync_args');
  if (this.msg !== null && this.msg !== undefined) {
    output.writeFieldBegin('msg', Thrift.Type.STRING, 1);
    output.writeString(this.msg);
    output.writeFieldEnd();
  }
  if (this.caption !== null && this.caption !== undefined) {
    output.writeFieldBegin('caption', Thrift.Type.STRING, 2);
    output.writeString(this.caption);
    output.writeFieldEnd();
  }
  if (this.icon !== null && this.icon !== undefined) {
    output.writeFieldBegin('icon', Thrift.Type.I32, 3);
    output.writeI32(this.icon);
    output.writeFieldEnd();
  }
  if (this.dontAskMgrKey !== null && this.dontAskMgrKey !== undefined) {
    output.writeFieldBegin('dontAskMgrKey', Thrift.Type.STRING, 4);
    output.writeString(this.dontAskMgrKey);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Frontend_messageBoxAsync_result = function(args) {
};
Frontend_messageBoxAsync_result.prototype = {};
Frontend_messageBoxAsync_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Frontend_messageBoxAsync_result.prototype.write = function(output) {
  output.writeStructBegin('Frontend_messageBoxAsync_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Frontend_openFileDialog_args = function(args) {
  this.title = null;
  this.startdir = null;
  this.filter = null;
  this.allowMultiple = null;
  this.existing = null;
  if (args) {
    if (args.title !== undefined && args.title !== null) {
      this.title = args.title;
    }
    if (args.startdir !== undefined && args.startdir !== null) {
      this.startdir = args.startdir;
    }
    if (args.filter !== undefined && args.filter !== null) {
      this.filter = args.filter;
    }
    if (args.allowMultiple !== undefined && args.allowMultiple !== null) {
      this.allowMultiple = args.allowMultiple;
    }
    if (args.existing !== undefined && args.existing !== null) {
      this.existing = args.existing;
    }
  }
};
Frontend_openFileDialog_args.prototype = {};
Frontend_openFileDialog_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.title = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.startdir = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.filter = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.allowMultiple = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.existing = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Frontend_openFileDialog_args.prototype.write = function(output) {
  output.writeStructBegin('Frontend_openFileDialog_args');
  if (this.title !== null && this.title !== undefined) {
    output.writeFieldBegin('title', Thrift.Type.STRING, 1);
    output.writeString(this.title);
    output.writeFieldEnd();
  }
  if (this.startdir !== null && this.startdir !== undefined) {
    output.writeFieldBegin('startdir', Thrift.Type.STRING, 2);
    output.writeString(this.startdir);
    output.writeFieldEnd();
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRING, 3);
    output.writeString(this.filter);
    output.writeFieldEnd();
  }
  if (this.allowMultiple !== null && this.allowMultiple !== undefined) {
    output.writeFieldBegin('allowMultiple', Thrift.Type.BOOL, 4);
    output.writeBool(this.allowMultiple);
    output.writeFieldEnd();
  }
  if (this.existing !== null && this.existing !== undefined) {
    output.writeFieldBegin('existing', Thrift.Type.BOOL, 5);
    output.writeBool(this.existing);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Frontend_openFileDialog_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
  }
};
Frontend_openFileDialog_result.prototype = {};
Frontend_openFileDialog_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp36 = input.readListBegin();
        var _size5 = _rtmp36.size || 0;
        for (var _i7 = 0; _i7 < _size5; ++_i7) {
          var elem8 = null;
          elem8 = input.readString().value;
          this.success.push(elem8);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Frontend_openFileDialog_result.prototype.write = function(output) {
  output.writeStructBegin('Frontend_openFileDialog_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter9 in this.success) {
      if (this.success.hasOwnProperty(iter9)) {
        iter9 = this.success[iter9];
        output.writeString(iter9);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Frontend_openIHostFileDialog_args = function(args) {
  this.title = null;
  this.type = null;
  this.returnType = null;
  this.filters = null;
  this.options = null;
  this.startdir = null;
  this.defaultName = null;
  if (args) {
    if (args.title !== undefined && args.title !== null) {
      this.title = args.title;
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
    if (args.returnType !== undefined && args.returnType !== null) {
      this.returnType = args.returnType;
    }
    if (args.filters !== undefined && args.filters !== null) {
      this.filters = Thrift.copyList(args.filters, [ttypes.FileDialogFilter]);
    }
    if (args.options !== undefined && args.options !== null) {
      this.options = Thrift.copyList(args.options, [null]);
    }
    if (args.startdir !== undefined && args.startdir !== null) {
      this.startdir = args.startdir;
    }
    if (args.defaultName !== undefined && args.defaultName !== null) {
      this.defaultName = args.defaultName;
    }
  }
};
Frontend_openIHostFileDialog_args.prototype = {};
Frontend_openIHostFileDialog_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.title = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.returnType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        this.filters = [];
        var _rtmp311 = input.readListBegin();
        var _size10 = _rtmp311.size || 0;
        for (var _i12 = 0; _i12 < _size10; ++_i12) {
          var elem13 = null;
          elem13 = new ttypes.FileDialogFilter();
          elem13.read(input);
          this.filters.push(elem13);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        this.options = [];
        var _rtmp315 = input.readListBegin();
        var _size14 = _rtmp315.size || 0;
        for (var _i16 = 0; _i16 < _size14; ++_i16) {
          var elem17 = null;
          elem17 = input.readI32().value;
          this.options.push(elem17);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.startdir = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.defaultName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Frontend_openIHostFileDialog_args.prototype.write = function(output) {
  output.writeStructBegin('Frontend_openIHostFileDialog_args');
  if (this.title !== null && this.title !== undefined) {
    output.writeFieldBegin('title', Thrift.Type.STRING, 1);
    output.writeString(this.title);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 2);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.returnType !== null && this.returnType !== undefined) {
    output.writeFieldBegin('returnType', Thrift.Type.I32, 3);
    output.writeI32(this.returnType);
    output.writeFieldEnd();
  }
  if (this.filters !== null && this.filters !== undefined) {
    output.writeFieldBegin('filters', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.filters.length);
    for (var iter18 in this.filters) {
      if (this.filters.hasOwnProperty(iter18)) {
        iter18 = this.filters[iter18];
        iter18.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.options !== null && this.options !== undefined) {
    output.writeFieldBegin('options', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.I32, this.options.length);
    for (var iter19 in this.options) {
      if (this.options.hasOwnProperty(iter19)) {
        iter19 = this.options[iter19];
        output.writeI32(iter19);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.startdir !== null && this.startdir !== undefined) {
    output.writeFieldBegin('startdir', Thrift.Type.STRING, 6);
    output.writeString(this.startdir);
    output.writeFieldEnd();
  }
  if (this.defaultName !== null && this.defaultName !== undefined) {
    output.writeFieldBegin('defaultName', Thrift.Type.STRING, 7);
    output.writeString(this.defaultName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Frontend_openIHostFileDialog_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
  }
};
Frontend_openIHostFileDialog_result.prototype = {};
Frontend_openIHostFileDialog_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp321 = input.readListBegin();
        var _size20 = _rtmp321.size || 0;
        for (var _i22 = 0; _i22 < _size20; ++_i22) {
          var elem23 = null;
          elem23 = input.readString().value;
          this.success.push(elem23);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Frontend_openIHostFileDialog_result.prototype.write = function(output) {
  output.writeStructBegin('Frontend_openIHostFileDialog_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter24 in this.success) {
      if (this.success.hasOwnProperty(iter24)) {
        iter24 = this.success[iter24];
        output.writeString(iter24);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Frontend_showFileProperties_args = function(args) {
  this.filePath = null;
  if (args) {
    if (args.filePath !== undefined && args.filePath !== null) {
      this.filePath = args.filePath;
    }
  }
};
Frontend_showFileProperties_args.prototype = {};
Frontend_showFileProperties_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.filePath = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Frontend_showFileProperties_args.prototype.write = function(output) {
  output.writeStructBegin('Frontend_showFileProperties_args');
  if (this.filePath !== null && this.filePath !== undefined) {
    output.writeFieldBegin('filePath', Thrift.Type.STRING, 1);
    output.writeString(this.filePath);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Frontend_showFileProperties_result = function(args) {
};
Frontend_showFileProperties_result.prototype = {};
Frontend_showFileProperties_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Frontend_showFileProperties_result.prototype.write = function(output) {
  output.writeStructBegin('Frontend_showFileProperties_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Frontend_openFileExplorer_args = function(args) {
  this.filePath = null;
  if (args) {
    if (args.filePath !== undefined && args.filePath !== null) {
      this.filePath = args.filePath;
    }
  }
};
Frontend_openFileExplorer_args.prototype = {};
Frontend_openFileExplorer_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.filePath = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Frontend_openFileExplorer_args.prototype.write = function(output) {
  output.writeStructBegin('Frontend_openFileExplorer_args');
  if (this.filePath !== null && this.filePath !== undefined) {
    output.writeFieldBegin('filePath', Thrift.Type.STRING, 1);
    output.writeString(this.filePath);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Frontend_openFileExplorer_result = function(args) {
};
Frontend_openFileExplorer_result.prototype = {};
Frontend_openFileExplorer_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Frontend_openFileExplorer_result.prototype.write = function(output) {
  output.writeStructBegin('Frontend_openFileExplorer_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Frontend_openDirectoryDialog_args = function(args) {
  this.title = null;
  this.existing = null;
  this.startdir = null;
  if (args) {
    if (args.title !== undefined && args.title !== null) {
      this.title = args.title;
    }
    if (args.existing !== undefined && args.existing !== null) {
      this.existing = args.existing;
    }
    if (args.startdir !== undefined && args.startdir !== null) {
      this.startdir = args.startdir;
    }
  }
};
Frontend_openDirectoryDialog_args.prototype = {};
Frontend_openDirectoryDialog_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.title = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.existing = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.startdir = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Frontend_openDirectoryDialog_args.prototype.write = function(output) {
  output.writeStructBegin('Frontend_openDirectoryDialog_args');
  if (this.title !== null && this.title !== undefined) {
    output.writeFieldBegin('title', Thrift.Type.STRING, 1);
    output.writeString(this.title);
    output.writeFieldEnd();
  }
  if (this.existing !== null && this.existing !== undefined) {
    output.writeFieldBegin('existing', Thrift.Type.BOOL, 2);
    output.writeBool(this.existing);
    output.writeFieldEnd();
  }
  if (this.startdir !== null && this.startdir !== undefined) {
    output.writeFieldBegin('startdir', Thrift.Type.STRING, 3);
    output.writeString(this.startdir);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Frontend_openDirectoryDialog_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
  }
};
Frontend_openDirectoryDialog_result.prototype = {};
Frontend_openDirectoryDialog_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp326 = input.readListBegin();
        var _size25 = _rtmp326.size || 0;
        for (var _i27 = 0; _i27 < _size25; ++_i27) {
          var elem28 = null;
          elem28 = input.readString().value;
          this.success.push(elem28);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Frontend_openDirectoryDialog_result.prototype.write = function(output) {
  output.writeStructBegin('Frontend_openDirectoryDialog_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter29 in this.success) {
      if (this.success.hasOwnProperty(iter29)) {
        iter29 = this.success[iter29];
        output.writeString(iter29);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Frontend_openSaveDialog_args = function(args) {
  this.title = null;
  this.fileName = null;
  this.defExt = null;
  this.startDir = null;
  this.filter = null;
  if (args) {
    if (args.title !== undefined && args.title !== null) {
      this.title = args.title;
    }
    if (args.fileName !== undefined && args.fileName !== null) {
      this.fileName = args.fileName;
    }
    if (args.defExt !== undefined && args.defExt !== null) {
      this.defExt = args.defExt;
    }
    if (args.startDir !== undefined && args.startDir !== null) {
      this.startDir = args.startDir;
    }
    if (args.filter !== undefined && args.filter !== null) {
      this.filter = args.filter;
    }
  }
};
Frontend_openSaveDialog_args.prototype = {};
Frontend_openSaveDialog_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.title = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.fileName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.defExt = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.startDir = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.filter = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Frontend_openSaveDialog_args.prototype.write = function(output) {
  output.writeStructBegin('Frontend_openSaveDialog_args');
  if (this.title !== null && this.title !== undefined) {
    output.writeFieldBegin('title', Thrift.Type.STRING, 1);
    output.writeString(this.title);
    output.writeFieldEnd();
  }
  if (this.fileName !== null && this.fileName !== undefined) {
    output.writeFieldBegin('fileName', Thrift.Type.STRING, 2);
    output.writeString(this.fileName);
    output.writeFieldEnd();
  }
  if (this.defExt !== null && this.defExt !== undefined) {
    output.writeFieldBegin('defExt', Thrift.Type.STRING, 3);
    output.writeString(this.defExt);
    output.writeFieldEnd();
  }
  if (this.startDir !== null && this.startDir !== undefined) {
    output.writeFieldBegin('startDir', Thrift.Type.STRING, 4);
    output.writeString(this.startDir);
    output.writeFieldEnd();
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRING, 5);
    output.writeString(this.filter);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Frontend_openSaveDialog_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
  }
};
Frontend_openSaveDialog_result.prototype = {};
Frontend_openSaveDialog_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp331 = input.readListBegin();
        var _size30 = _rtmp331.size || 0;
        for (var _i32 = 0; _i32 < _size30; ++_i32) {
          var elem33 = null;
          elem33 = input.readString().value;
          this.success.push(elem33);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Frontend_openSaveDialog_result.prototype.write = function(output) {
  output.writeStructBegin('Frontend_openSaveDialog_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter34 in this.success) {
      if (this.success.hasOwnProperty(iter34)) {
        iter34 = this.success[iter34];
        output.writeString(iter34);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Frontend_createProgressBar_args = function(args) {
  this.msg = null;
  this.caption = null;
  this.minvalue = null;
  this.maxvalue = null;
  this.canCancel = null;
  this.indeterminate = null;
  if (args) {
    if (args.msg !== undefined && args.msg !== null) {
      this.msg = args.msg;
    }
    if (args.caption !== undefined && args.caption !== null) {
      this.caption = args.caption;
    }
    if (args.minvalue !== undefined && args.minvalue !== null) {
      this.minvalue = args.minvalue;
    }
    if (args.maxvalue !== undefined && args.maxvalue !== null) {
      this.maxvalue = args.maxvalue;
    }
    if (args.canCancel !== undefined && args.canCancel !== null) {
      this.canCancel = args.canCancel;
    }
    if (args.indeterminate !== undefined && args.indeterminate !== null) {
      this.indeterminate = args.indeterminate;
    }
  }
};
Frontend_createProgressBar_args.prototype = {};
Frontend_createProgressBar_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.msg = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.caption = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.minvalue = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.maxvalue = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.canCancel = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.indeterminate = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Frontend_createProgressBar_args.prototype.write = function(output) {
  output.writeStructBegin('Frontend_createProgressBar_args');
  if (this.msg !== null && this.msg !== undefined) {
    output.writeFieldBegin('msg', Thrift.Type.STRING, 1);
    output.writeString(this.msg);
    output.writeFieldEnd();
  }
  if (this.caption !== null && this.caption !== undefined) {
    output.writeFieldBegin('caption', Thrift.Type.STRING, 2);
    output.writeString(this.caption);
    output.writeFieldEnd();
  }
  if (this.minvalue !== null && this.minvalue !== undefined) {
    output.writeFieldBegin('minvalue', Thrift.Type.I64, 3);
    output.writeI64(this.minvalue);
    output.writeFieldEnd();
  }
  if (this.maxvalue !== null && this.maxvalue !== undefined) {
    output.writeFieldBegin('maxvalue', Thrift.Type.I64, 4);
    output.writeI64(this.maxvalue);
    output.writeFieldEnd();
  }
  if (this.canCancel !== null && this.canCancel !== undefined) {
    output.writeFieldBegin('canCancel', Thrift.Type.BOOL, 5);
    output.writeBool(this.canCancel);
    output.writeFieldEnd();
  }
  if (this.indeterminate !== null && this.indeterminate !== undefined) {
    output.writeFieldBegin('indeterminate', Thrift.Type.BOOL, 6);
    output.writeBool(this.indeterminate);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Frontend_createProgressBar_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
Frontend_createProgressBar_result.prototype = {};
Frontend_createProgressBar_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Frontend_createProgressBar_result.prototype.write = function(output) {
  output.writeStructBegin('Frontend_createProgressBar_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Frontend_updateProgressBarValue_args = function(args) {
  this.id = null;
  this.value = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.value !== undefined && args.value !== null) {
      this.value = args.value;
    }
  }
};
Frontend_updateProgressBarValue_args.prototype = {};
Frontend_updateProgressBarValue_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.value = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Frontend_updateProgressBarValue_args.prototype.write = function(output) {
  output.writeStructBegin('Frontend_updateProgressBarValue_args');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.I64, 2);
    output.writeI64(this.value);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Frontend_updateProgressBarValue_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
Frontend_updateProgressBarValue_result.prototype = {};
Frontend_updateProgressBarValue_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Frontend_updateProgressBarValue_result.prototype.write = function(output) {
  output.writeStructBegin('Frontend_updateProgressBarValue_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Frontend_updateProgressBarMessage_args = function(args) {
  this.id = null;
  this.message = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
  }
};
Frontend_updateProgressBarMessage_args.prototype = {};
Frontend_updateProgressBarMessage_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Frontend_updateProgressBarMessage_args.prototype.write = function(output) {
  output.writeStructBegin('Frontend_updateProgressBarMessage_args');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 2);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Frontend_updateProgressBarMessage_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
Frontend_updateProgressBarMessage_result.prototype = {};
Frontend_updateProgressBarMessage_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Frontend_updateProgressBarMessage_result.prototype.write = function(output) {
  output.writeStructBegin('Frontend_updateProgressBarMessage_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Frontend_closeProgressBar_args = function(args) {
  this.id = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
  }
};
Frontend_closeProgressBar_args.prototype = {};
Frontend_closeProgressBar_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Frontend_closeProgressBar_args.prototype.write = function(output) {
  output.writeStructBegin('Frontend_closeProgressBar_args');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Frontend_closeProgressBar_result = function(args) {
};
Frontend_closeProgressBar_result.prototype = {};
Frontend_closeProgressBar_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Frontend_closeProgressBar_result.prototype.write = function(output) {
  output.writeStructBegin('Frontend_closeProgressBar_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Frontend_showView_args = function(args) {
  this.id = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
  }
};
Frontend_showView_args.prototype = {};
Frontend_showView_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Frontend_showView_args.prototype.write = function(output) {
  output.writeStructBegin('Frontend_showView_args');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Frontend_showView_result = function(args) {
};
Frontend_showView_result.prototype = {};
Frontend_showView_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Frontend_showView_result.prototype.write = function(output) {
  output.writeStructBegin('Frontend_showView_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Frontend_openElementSelectionDialog_args = function(args) {
  this.title = null;
  this.message = null;
  this.elements = null;
  if (args) {
    if (args.title !== undefined && args.title !== null) {
      this.title = args.title;
    }
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
    if (args.elements !== undefined && args.elements !== null) {
      this.elements = Thrift.copyList(args.elements, [null]);
    }
  }
};
Frontend_openElementSelectionDialog_args.prototype = {};
Frontend_openElementSelectionDialog_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.title = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        this.elements = [];
        var _rtmp336 = input.readListBegin();
        var _size35 = _rtmp336.size || 0;
        for (var _i37 = 0; _i37 < _size35; ++_i37) {
          var elem38 = null;
          elem38 = input.readString().value;
          this.elements.push(elem38);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Frontend_openElementSelectionDialog_args.prototype.write = function(output) {
  output.writeStructBegin('Frontend_openElementSelectionDialog_args');
  if (this.title !== null && this.title !== undefined) {
    output.writeFieldBegin('title', Thrift.Type.STRING, 1);
    output.writeString(this.title);
    output.writeFieldEnd();
  }
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 2);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  if (this.elements !== null && this.elements !== undefined) {
    output.writeFieldBegin('elements', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.elements.length);
    for (var iter39 in this.elements) {
      if (this.elements.hasOwnProperty(iter39)) {
        iter39 = this.elements[iter39];
        output.writeString(iter39);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Frontend_openElementSelectionDialog_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
Frontend_openElementSelectionDialog_result.prototype = {};
Frontend_openElementSelectionDialog_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Frontend_openElementSelectionDialog_result.prototype.write = function(output) {
  output.writeStructBegin('Frontend_openElementSelectionDialog_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Frontend_openMultipleElementSelectionDialog_args = function(args) {
  this.title = null;
  this.message = null;
  this.elements = null;
  if (args) {
    if (args.title !== undefined && args.title !== null) {
      this.title = args.title;
    }
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
    if (args.elements !== undefined && args.elements !== null) {
      this.elements = Thrift.copyList(args.elements, [null]);
    }
  }
};
Frontend_openMultipleElementSelectionDialog_args.prototype = {};
Frontend_openMultipleElementSelectionDialog_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.title = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        this.elements = [];
        var _rtmp341 = input.readListBegin();
        var _size40 = _rtmp341.size || 0;
        for (var _i42 = 0; _i42 < _size40; ++_i42) {
          var elem43 = null;
          elem43 = input.readString().value;
          this.elements.push(elem43);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Frontend_openMultipleElementSelectionDialog_args.prototype.write = function(output) {
  output.writeStructBegin('Frontend_openMultipleElementSelectionDialog_args');
  if (this.title !== null && this.title !== undefined) {
    output.writeFieldBegin('title', Thrift.Type.STRING, 1);
    output.writeString(this.title);
    output.writeFieldEnd();
  }
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 2);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  if (this.elements !== null && this.elements !== undefined) {
    output.writeFieldBegin('elements', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.elements.length);
    for (var iter44 in this.elements) {
      if (this.elements.hasOwnProperty(iter44)) {
        iter44 = this.elements[iter44];
        output.writeString(iter44);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Frontend_openMultipleElementSelectionDialog_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
  }
};
Frontend_openMultipleElementSelectionDialog_result.prototype = {};
Frontend_openMultipleElementSelectionDialog_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp346 = input.readListBegin();
        var _size45 = _rtmp346.size || 0;
        for (var _i47 = 0; _i47 < _size45; ++_i47) {
          var elem48 = null;
          elem48 = input.readI32().value;
          this.success.push(elem48);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Frontend_openMultipleElementSelectionDialog_result.prototype.write = function(output) {
  output.writeStructBegin('Frontend_openMultipleElementSelectionDialog_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.I32, this.success.length);
    for (var iter49 in this.success) {
      if (this.success.hasOwnProperty(iter49)) {
        iter49 = this.success[iter49];
        output.writeI32(iter49);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Frontend_editSourceLocation_args = function(args) {
  this.loc = null;
  if (args) {
    if (args.loc !== undefined && args.loc !== null) {
      this.loc = new shared_ttypes.SourceLocation(args.loc);
    }
  }
};
Frontend_editSourceLocation_args.prototype = {};
Frontend_editSourceLocation_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.loc = new shared_ttypes.SourceLocation();
        this.loc.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Frontend_editSourceLocation_args.prototype.write = function(output) {
  output.writeStructBegin('Frontend_editSourceLocation_args');
  if (this.loc !== null && this.loc !== undefined) {
    output.writeFieldBegin('loc', Thrift.Type.STRUCT, 1);
    this.loc.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Frontend_editSourceLocation_result = function(args) {
};
Frontend_editSourceLocation_result.prototype = {};
Frontend_editSourceLocation_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Frontend_editSourceLocation_result.prototype.write = function(output) {
  output.writeStructBegin('Frontend_editSourceLocation_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Frontend_resolveAliasForFile_args = function(args) {
  this.fileName = null;
  this.suggestedFile = null;
  if (args) {
    if (args.fileName !== undefined && args.fileName !== null) {
      this.fileName = args.fileName;
    }
    if (args.suggestedFile !== undefined && args.suggestedFile !== null) {
      this.suggestedFile = args.suggestedFile;
    }
  }
};
Frontend_resolveAliasForFile_args.prototype = {};
Frontend_resolveAliasForFile_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.fileName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.suggestedFile = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Frontend_resolveAliasForFile_args.prototype.write = function(output) {
  output.writeStructBegin('Frontend_resolveAliasForFile_args');
  if (this.fileName !== null && this.fileName !== undefined) {
    output.writeFieldBegin('fileName', Thrift.Type.STRING, 1);
    output.writeString(this.fileName);
    output.writeFieldEnd();
  }
  if (this.suggestedFile !== null && this.suggestedFile !== undefined) {
    output.writeFieldBegin('suggestedFile', Thrift.Type.STRING, 2);
    output.writeString(this.suggestedFile);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Frontend_resolveAliasForFile_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
Frontend_resolveAliasForFile_result.prototype = {};
Frontend_resolveAliasForFile_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Frontend_resolveAliasForFile_result.prototype.write = function(output) {
  output.writeStructBegin('Frontend_resolveAliasForFile_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Frontend_getActiveTheme_args = function(args) {
};
Frontend_getActiveTheme_args.prototype = {};
Frontend_getActiveTheme_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Frontend_getActiveTheme_args.prototype.write = function(output) {
  output.writeStructBegin('Frontend_getActiveTheme_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Frontend_getActiveTheme_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyMap(args.success, [themes_ttypes.ColorSchema]);
    }
  }
};
Frontend_getActiveTheme_result.prototype = {};
Frontend_getActiveTheme_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        this.success = {};
        var _rtmp351 = input.readMapBegin();
        var _size50 = _rtmp351.size || 0;
        for (var _i52 = 0; _i52 < _size50; ++_i52) {
          if (_i52 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key53 = null;
          var val54 = null;
          key53 = input.readI32().value;
          val54 = new themes_ttypes.ColorSchema();
          val54.read(input);
          this.success[key53] = val54;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Frontend_getActiveTheme_result.prototype.write = function(output) {
  output.writeStructBegin('Frontend_getActiveTheme_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.I32, Thrift.Type.STRUCT, Thrift.objectLength(this.success));
    for (var kiter55 in this.success) {
      if (this.success.hasOwnProperty(kiter55)) {
        var viter56 = this.success[kiter55];
        output.writeI32(kiter55);
        viter56.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var FrontendClient = exports.Client = function(input, output) {
  this.input = input;
  this.output = (!output) ? input : output;
  this.seqid = 0;
};
Thrift.inherits(FrontendClient, HeartbeatServiceClient);

FrontendClient.prototype.messageBox = function(msg, caption, icon, kind, dontAskMgrKey, callback) {
  this.send_messageBox(msg, caption, icon, kind, dontAskMgrKey, callback); 
  if (!callback) {
    return this.recv_messageBox();
  }
};

FrontendClient.prototype.send_messageBox = function(msg, caption, icon, kind, dontAskMgrKey, callback) {
  var params = {
    msg: msg,
    caption: caption,
    icon: icon,
    kind: kind,
    dontAskMgrKey: dontAskMgrKey
  };
  var args = new Frontend_messageBox_args(params);
  try {
    this.output.writeMessageBegin('messageBox', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_messageBox();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

FrontendClient.prototype.recv_messageBox = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Frontend_messageBox_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'messageBox failed: unknown result';
};

FrontendClient.prototype.messageBoxAsync = function(msg, caption, icon, dontAskMgrKey, callback) {
  this.send_messageBoxAsync(msg, caption, icon, dontAskMgrKey, callback); 
};

FrontendClient.prototype.send_messageBoxAsync = function(msg, caption, icon, dontAskMgrKey, callback) {
  var params = {
    msg: msg,
    caption: caption,
    icon: icon,
    dontAskMgrKey: dontAskMgrKey
  };
  var args = new Frontend_messageBoxAsync_args(params);
  try {
    this.output.writeMessageBegin('messageBoxAsync', Thrift.MessageType.ONEWAY, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      this.output.getTransport().flush(true, null);
      callback();
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

FrontendClient.prototype.openFileDialog = function(title, startdir, filter, allowMultiple, existing, callback) {
  this.send_openFileDialog(title, startdir, filter, allowMultiple, existing, callback); 
  if (!callback) {
    return this.recv_openFileDialog();
  }
};

FrontendClient.prototype.send_openFileDialog = function(title, startdir, filter, allowMultiple, existing, callback) {
  var params = {
    title: title,
    startdir: startdir,
    filter: filter,
    allowMultiple: allowMultiple,
    existing: existing
  };
  var args = new Frontend_openFileDialog_args(params);
  try {
    this.output.writeMessageBegin('openFileDialog', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_openFileDialog();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

FrontendClient.prototype.recv_openFileDialog = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Frontend_openFileDialog_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'openFileDialog failed: unknown result';
};

FrontendClient.prototype.openIHostFileDialog = function(title, type, returnType, filters, options, startdir, defaultName, callback) {
  this.send_openIHostFileDialog(title, type, returnType, filters, options, startdir, defaultName, callback); 
  if (!callback) {
    return this.recv_openIHostFileDialog();
  }
};

FrontendClient.prototype.send_openIHostFileDialog = function(title, type, returnType, filters, options, startdir, defaultName, callback) {
  var params = {
    title: title,
    type: type,
    returnType: returnType,
    filters: filters,
    options: options,
    startdir: startdir,
    defaultName: defaultName
  };
  var args = new Frontend_openIHostFileDialog_args(params);
  try {
    this.output.writeMessageBegin('openIHostFileDialog', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_openIHostFileDialog();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

FrontendClient.prototype.recv_openIHostFileDialog = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Frontend_openIHostFileDialog_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'openIHostFileDialog failed: unknown result';
};

FrontendClient.prototype.showFileProperties = function(filePath, callback) {
  this.send_showFileProperties(filePath, callback); 
};

FrontendClient.prototype.send_showFileProperties = function(filePath, callback) {
  var params = {
    filePath: filePath
  };
  var args = new Frontend_showFileProperties_args(params);
  try {
    this.output.writeMessageBegin('showFileProperties', Thrift.MessageType.ONEWAY, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      this.output.getTransport().flush(true, null);
      callback();
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

FrontendClient.prototype.openFileExplorer = function(filePath, callback) {
  this.send_openFileExplorer(filePath, callback); 
};

FrontendClient.prototype.send_openFileExplorer = function(filePath, callback) {
  var params = {
    filePath: filePath
  };
  var args = new Frontend_openFileExplorer_args(params);
  try {
    this.output.writeMessageBegin('openFileExplorer', Thrift.MessageType.ONEWAY, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      this.output.getTransport().flush(true, null);
      callback();
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

FrontendClient.prototype.openDirectoryDialog = function(title, existing, startdir, callback) {
  this.send_openDirectoryDialog(title, existing, startdir, callback); 
  if (!callback) {
    return this.recv_openDirectoryDialog();
  }
};

FrontendClient.prototype.send_openDirectoryDialog = function(title, existing, startdir, callback) {
  var params = {
    title: title,
    existing: existing,
    startdir: startdir
  };
  var args = new Frontend_openDirectoryDialog_args(params);
  try {
    this.output.writeMessageBegin('openDirectoryDialog', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_openDirectoryDialog();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

FrontendClient.prototype.recv_openDirectoryDialog = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Frontend_openDirectoryDialog_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'openDirectoryDialog failed: unknown result';
};

FrontendClient.prototype.openSaveDialog = function(title, fileName, defExt, startDir, filter, callback) {
  this.send_openSaveDialog(title, fileName, defExt, startDir, filter, callback); 
  if (!callback) {
    return this.recv_openSaveDialog();
  }
};

FrontendClient.prototype.send_openSaveDialog = function(title, fileName, defExt, startDir, filter, callback) {
  var params = {
    title: title,
    fileName: fileName,
    defExt: defExt,
    startDir: startDir,
    filter: filter
  };
  var args = new Frontend_openSaveDialog_args(params);
  try {
    this.output.writeMessageBegin('openSaveDialog', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_openSaveDialog();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

FrontendClient.prototype.recv_openSaveDialog = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Frontend_openSaveDialog_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'openSaveDialog failed: unknown result';
};

FrontendClient.prototype.createProgressBar = function(msg, caption, minvalue, maxvalue, canCancel, indeterminate, callback) {
  this.send_createProgressBar(msg, caption, minvalue, maxvalue, canCancel, indeterminate, callback); 
  if (!callback) {
    return this.recv_createProgressBar();
  }
};

FrontendClient.prototype.send_createProgressBar = function(msg, caption, minvalue, maxvalue, canCancel, indeterminate, callback) {
  var params = {
    msg: msg,
    caption: caption,
    minvalue: minvalue,
    maxvalue: maxvalue,
    canCancel: canCancel,
    indeterminate: indeterminate
  };
  var args = new Frontend_createProgressBar_args(params);
  try {
    this.output.writeMessageBegin('createProgressBar', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_createProgressBar();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

FrontendClient.prototype.recv_createProgressBar = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Frontend_createProgressBar_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'createProgressBar failed: unknown result';
};

FrontendClient.prototype.updateProgressBarValue = function(id, value, callback) {
  this.send_updateProgressBarValue(id, value, callback); 
  if (!callback) {
    return this.recv_updateProgressBarValue();
  }
};

FrontendClient.prototype.send_updateProgressBarValue = function(id, value, callback) {
  var params = {
    id: id,
    value: value
  };
  var args = new Frontend_updateProgressBarValue_args(params);
  try {
    this.output.writeMessageBegin('updateProgressBarValue', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_updateProgressBarValue();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

FrontendClient.prototype.recv_updateProgressBarValue = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Frontend_updateProgressBarValue_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'updateProgressBarValue failed: unknown result';
};

FrontendClient.prototype.updateProgressBarMessage = function(id, message, callback) {
  this.send_updateProgressBarMessage(id, message, callback); 
  if (!callback) {
    return this.recv_updateProgressBarMessage();
  }
};

FrontendClient.prototype.send_updateProgressBarMessage = function(id, message, callback) {
  var params = {
    id: id,
    message: message
  };
  var args = new Frontend_updateProgressBarMessage_args(params);
  try {
    this.output.writeMessageBegin('updateProgressBarMessage', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_updateProgressBarMessage();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

FrontendClient.prototype.recv_updateProgressBarMessage = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Frontend_updateProgressBarMessage_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'updateProgressBarMessage failed: unknown result';
};

FrontendClient.prototype.closeProgressBar = function(id, callback) {
  this.send_closeProgressBar(id, callback); 
  if (!callback) {
  this.recv_closeProgressBar();
  }
};

FrontendClient.prototype.send_closeProgressBar = function(id, callback) {
  var params = {
    id: id
  };
  var args = new Frontend_closeProgressBar_args(params);
  try {
    this.output.writeMessageBegin('closeProgressBar', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_closeProgressBar();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

FrontendClient.prototype.recv_closeProgressBar = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Frontend_closeProgressBar_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};

FrontendClient.prototype.showView = function(id, callback) {
  this.send_showView(id, callback); 
  if (!callback) {
  this.recv_showView();
  }
};

FrontendClient.prototype.send_showView = function(id, callback) {
  var params = {
    id: id
  };
  var args = new Frontend_showView_args(params);
  try {
    this.output.writeMessageBegin('showView', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_showView();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

FrontendClient.prototype.recv_showView = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Frontend_showView_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};

FrontendClient.prototype.openElementSelectionDialog = function(title, message, elements, callback) {
  this.send_openElementSelectionDialog(title, message, elements, callback); 
  if (!callback) {
    return this.recv_openElementSelectionDialog();
  }
};

FrontendClient.prototype.send_openElementSelectionDialog = function(title, message, elements, callback) {
  var params = {
    title: title,
    message: message,
    elements: elements
  };
  var args = new Frontend_openElementSelectionDialog_args(params);
  try {
    this.output.writeMessageBegin('openElementSelectionDialog', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_openElementSelectionDialog();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

FrontendClient.prototype.recv_openElementSelectionDialog = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Frontend_openElementSelectionDialog_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'openElementSelectionDialog failed: unknown result';
};

FrontendClient.prototype.openMultipleElementSelectionDialog = function(title, message, elements, callback) {
  this.send_openMultipleElementSelectionDialog(title, message, elements, callback); 
  if (!callback) {
    return this.recv_openMultipleElementSelectionDialog();
  }
};

FrontendClient.prototype.send_openMultipleElementSelectionDialog = function(title, message, elements, callback) {
  var params = {
    title: title,
    message: message,
    elements: elements
  };
  var args = new Frontend_openMultipleElementSelectionDialog_args(params);
  try {
    this.output.writeMessageBegin('openMultipleElementSelectionDialog', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_openMultipleElementSelectionDialog();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

FrontendClient.prototype.recv_openMultipleElementSelectionDialog = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Frontend_openMultipleElementSelectionDialog_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'openMultipleElementSelectionDialog failed: unknown result';
};

FrontendClient.prototype.editSourceLocation = function(loc, callback) {
  this.send_editSourceLocation(loc, callback); 
  if (!callback) {
  this.recv_editSourceLocation();
  }
};

FrontendClient.prototype.send_editSourceLocation = function(loc, callback) {
  var params = {
    loc: loc
  };
  var args = new Frontend_editSourceLocation_args(params);
  try {
    this.output.writeMessageBegin('editSourceLocation', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_editSourceLocation();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

FrontendClient.prototype.recv_editSourceLocation = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Frontend_editSourceLocation_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};

FrontendClient.prototype.resolveAliasForFile = function(fileName, suggestedFile, callback) {
  this.send_resolveAliasForFile(fileName, suggestedFile, callback); 
  if (!callback) {
    return this.recv_resolveAliasForFile();
  }
};

FrontendClient.prototype.send_resolveAliasForFile = function(fileName, suggestedFile, callback) {
  var params = {
    fileName: fileName,
    suggestedFile: suggestedFile
  };
  var args = new Frontend_resolveAliasForFile_args(params);
  try {
    this.output.writeMessageBegin('resolveAliasForFile', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_resolveAliasForFile();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

FrontendClient.prototype.recv_resolveAliasForFile = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Frontend_resolveAliasForFile_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'resolveAliasForFile failed: unknown result';
};

FrontendClient.prototype.getActiveTheme = function(callback) {
  this.send_getActiveTheme(callback); 
  if (!callback) {
    return this.recv_getActiveTheme();
  }
};

FrontendClient.prototype.send_getActiveTheme = function(callback) {
  var args = new Frontend_getActiveTheme_args();
  try {
    this.output.writeMessageBegin('getActiveTheme', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_getActiveTheme();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

FrontendClient.prototype.recv_getActiveTheme = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Frontend_getActiveTheme_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getActiveTheme failed: unknown result';
};
