//
// Autogenerated by Thrift Compiler (0.14.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
if (typeof Int64 === 'undefined' && typeof require === 'function') {
  var Int64 = require('node-int64');
}


var ttypes = module.exports = {};
ttypes.DcResultConstant = {
  '0' : 'kDcOk',
  'kDcOk' : 0,
  '1' : 'kDcRequestedStop',
  'kDcRequestedStop' : 1,
  '2' : 'kDcOtherStop',
  'kDcOtherStop' : 2,
  '3' : 'kDcUnconditionalStop',
  'kDcUnconditionalStop' : 3,
  '4' : 'kDcSympatheticStop',
  'kDcSympatheticStop' : 4,
  '5' : 'kDcBusy',
  'kDcBusy' : 5,
  '6' : 'kDcError',
  'kDcError' : 6,
  '7' : 'kDcFatalError',
  'kDcFatalError' : 7,
  '8' : 'kDcLicenseViolation',
  'kDcLicenseViolation' : 8,
  '9' : 'kDcSilentFatalError',
  'kDcSilentFatalError' : 9,
  '10' : 'kDcFailure',
  'kDcFailure' : 10,
  '11' : 'kDcDllLoadLibFailed',
  'kDcDllLoadLibFailed' : 11,
  '12' : 'kDcDllFuncNotFound',
  'kDcDllFuncNotFound' : 12,
  '13' : 'kDcDllFuncSlotEmpty',
  'kDcDllFuncSlotEmpty' : 13,
  '14' : 'kDcDllVersionMismatch',
  'kDcDllVersionMismatch' : 14,
  '15' : 'kDcUnavailable',
  'kDcUnavailable' : 15
};
ttypes.ExprFormat = {
  '0' : 'kDefault',
  'kDefault' : 0,
  '1' : 'kBin',
  'kBin' : 1,
  '2' : 'kOct',
  'kOct' : 2,
  '3' : 'kDec',
  'kDec' : 3,
  '4' : 'kHex',
  'kHex' : 4,
  '5' : 'kChar',
  'kChar' : 5,
  '6' : 'kStr',
  'kStr' : 6,
  '7' : 'kNoCustom',
  'kNoCustom' : 7
};
ttypes.ContextType = {
  '0' : 'CurrentBase',
  'CurrentBase' : 0,
  '1' : 'CurrentInspection',
  'CurrentInspection' : 1,
  '2' : 'Stack',
  'Stack' : 2,
  '3' : 'Target',
  'Target' : 3,
  '4' : 'Task',
  'Task' : 4,
  '5' : 'Unknown',
  'Unknown' : 5
};
ttypes.AccessType = {
  '1' : 'kDkFetchAccess',
  'kDkFetchAccess' : 1,
  '2' : 'kDkReadAccess',
  'kDkReadAccess' : 2,
  '3' : 'kDkWriteAccess',
  'kDkWriteAccess' : 3,
  '4' : 'kDkReadWriteAccess',
  'kDkReadWriteAccess' : 4
};
var CSpyException = module.exports.CSpyException = function(args) {
  this.code = null;
  this.method = null;
  this.message = null;
  this.culprit = null;
  if (args) {
    if (args.code !== undefined && args.code !== null) {
      this.code = args.code;
    }
    if (args.method !== undefined && args.method !== null) {
      this.method = args.method;
    }
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
    if (args.culprit !== undefined && args.culprit !== null) {
      this.culprit = args.culprit;
    }
  }
};
Thrift.inherits(CSpyException, Thrift.TException);
CSpyException.prototype.name = 'CSpyException';
CSpyException.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.code = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.method = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.culprit = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CSpyException.prototype.write = function(output) {
  output.writeStructBegin('CSpyException');
  if (this.code !== null && this.code !== undefined) {
    output.writeFieldBegin('code', Thrift.Type.I32, 1);
    output.writeI32(this.code);
    output.writeFieldEnd();
  }
  if (this.method !== null && this.method !== undefined) {
    output.writeFieldBegin('method', Thrift.Type.STRING, 2);
    output.writeString(this.method);
    output.writeFieldEnd();
  }
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 3);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  if (this.culprit !== null && this.culprit !== undefined) {
    output.writeFieldBegin('culprit', Thrift.Type.STRING, 4);
    output.writeString(this.culprit);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Id = module.exports.Id = function(args) {
  this.value = null;
  this.type = null;
  if (args) {
    if (args.value !== undefined && args.value !== null) {
      this.value = args.value;
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
  }
};
Id.prototype = {};
Id.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.value = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.type = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Id.prototype.write = function(output) {
  output.writeStructBegin('Id');
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.STRING, 1);
    output.writeString(this.value);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.STRING, 2);
    output.writeString(this.type);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Success = module.exports.Success = function(args) {
  this.value = null;
  this.failureMessage = null;
  if (args) {
    if (args.value !== undefined && args.value !== null) {
      this.value = args.value;
    }
    if (args.failureMessage !== undefined && args.failureMessage !== null) {
      this.failureMessage = args.failureMessage;
    }
  }
};
Success.prototype = {};
Success.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.value = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.failureMessage = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Success.prototype.write = function(output) {
  output.writeStructBegin('Success');
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.BOOL, 1);
    output.writeBool(this.value);
    output.writeFieldEnd();
  }
  if (this.failureMessage !== null && this.failureMessage !== undefined) {
    output.writeFieldBegin('failureMessage', Thrift.Type.STRING, 2);
    output.writeString(this.failureMessage);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Zone = module.exports.Zone = function(args) {
  this.id = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
  }
};
Zone.prototype = {};
Zone.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Zone.prototype.write = function(output) {
  output.writeStructBegin('Zone');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ZoneInfo = module.exports.ZoneInfo = function(args) {
  this.id = null;
  this.name = null;
  this.minAddress = null;
  this.maxAddress = null;
  this.isRegular = null;
  this.isVisible = null;
  this.isBigEndian = null;
  this.bitsPerUnit = null;
  this.bytesPerUnit = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.minAddress !== undefined && args.minAddress !== null) {
      this.minAddress = args.minAddress;
    }
    if (args.maxAddress !== undefined && args.maxAddress !== null) {
      this.maxAddress = args.maxAddress;
    }
    if (args.isRegular !== undefined && args.isRegular !== null) {
      this.isRegular = args.isRegular;
    }
    if (args.isVisible !== undefined && args.isVisible !== null) {
      this.isVisible = args.isVisible;
    }
    if (args.isBigEndian !== undefined && args.isBigEndian !== null) {
      this.isBigEndian = args.isBigEndian;
    }
    if (args.bitsPerUnit !== undefined && args.bitsPerUnit !== null) {
      this.bitsPerUnit = args.bitsPerUnit;
    }
    if (args.bytesPerUnit !== undefined && args.bytesPerUnit !== null) {
      this.bytesPerUnit = args.bytesPerUnit;
    }
  }
};
ZoneInfo.prototype = {};
ZoneInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.minAddress = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.maxAddress = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.isRegular = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.isVisible = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.BOOL) {
        this.isBigEndian = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I32) {
        this.bitsPerUnit = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I32) {
        this.bytesPerUnit = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ZoneInfo.prototype.write = function(output) {
  output.writeStructBegin('ZoneInfo');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.minAddress !== null && this.minAddress !== undefined) {
    output.writeFieldBegin('minAddress', Thrift.Type.I64, 3);
    output.writeI64(this.minAddress);
    output.writeFieldEnd();
  }
  if (this.maxAddress !== null && this.maxAddress !== undefined) {
    output.writeFieldBegin('maxAddress', Thrift.Type.I64, 4);
    output.writeI64(this.maxAddress);
    output.writeFieldEnd();
  }
  if (this.isRegular !== null && this.isRegular !== undefined) {
    output.writeFieldBegin('isRegular', Thrift.Type.BOOL, 5);
    output.writeBool(this.isRegular);
    output.writeFieldEnd();
  }
  if (this.isVisible !== null && this.isVisible !== undefined) {
    output.writeFieldBegin('isVisible', Thrift.Type.BOOL, 6);
    output.writeBool(this.isVisible);
    output.writeFieldEnd();
  }
  if (this.isBigEndian !== null && this.isBigEndian !== undefined) {
    output.writeFieldBegin('isBigEndian', Thrift.Type.BOOL, 7);
    output.writeBool(this.isBigEndian);
    output.writeFieldEnd();
  }
  if (this.bitsPerUnit !== null && this.bitsPerUnit !== undefined) {
    output.writeFieldBegin('bitsPerUnit', Thrift.Type.I32, 8);
    output.writeI32(this.bitsPerUnit);
    output.writeFieldEnd();
  }
  if (this.bytesPerUnit !== null && this.bytesPerUnit !== undefined) {
    output.writeFieldBegin('bytesPerUnit', Thrift.Type.I32, 9);
    output.writeI32(this.bytesPerUnit);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Location = module.exports.Location = function(args) {
  this.zone = null;
  this.address = null;
  if (args) {
    if (args.zone !== undefined && args.zone !== null) {
      this.zone = new ttypes.Zone(args.zone);
    }
    if (args.address !== undefined && args.address !== null) {
      this.address = args.address;
    }
  }
};
Location.prototype = {};
Location.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.zone = new ttypes.Zone();
        this.zone.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.address = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Location.prototype.write = function(output) {
  output.writeStructBegin('Location');
  if (this.zone !== null && this.zone !== undefined) {
    output.writeFieldBegin('zone', Thrift.Type.STRUCT, 1);
    this.zone.write(output);
    output.writeFieldEnd();
  }
  if (this.address !== null && this.address !== undefined) {
    output.writeFieldBegin('address', Thrift.Type.I64, 2);
    output.writeI64(this.address);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SourceLocation = module.exports.SourceLocation = function(args) {
  this.filename = null;
  this.line = null;
  this.col = null;
  this.locations = null;
  if (args) {
    if (args.filename !== undefined && args.filename !== null) {
      this.filename = args.filename;
    }
    if (args.line !== undefined && args.line !== null) {
      this.line = args.line;
    }
    if (args.col !== undefined && args.col !== null) {
      this.col = args.col;
    }
    if (args.locations !== undefined && args.locations !== null) {
      this.locations = Thrift.copyList(args.locations, [ttypes.Location]);
    }
  }
};
SourceLocation.prototype = {};
SourceLocation.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.filename = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.line = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.col = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        this.locations = [];
        var _rtmp31 = input.readListBegin();
        var _size0 = _rtmp31.size || 0;
        for (var _i2 = 0; _i2 < _size0; ++_i2) {
          var elem3 = null;
          elem3 = new ttypes.Location();
          elem3.read(input);
          this.locations.push(elem3);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SourceLocation.prototype.write = function(output) {
  output.writeStructBegin('SourceLocation');
  if (this.filename !== null && this.filename !== undefined) {
    output.writeFieldBegin('filename', Thrift.Type.STRING, 1);
    output.writeString(this.filename);
    output.writeFieldEnd();
  }
  if (this.line !== null && this.line !== undefined) {
    output.writeFieldBegin('line', Thrift.Type.I32, 2);
    output.writeI32(this.line);
    output.writeFieldEnd();
  }
  if (this.col !== null && this.col !== undefined) {
    output.writeFieldBegin('col', Thrift.Type.I32, 3);
    output.writeI32(this.col);
    output.writeFieldEnd();
  }
  if (this.locations !== null && this.locations !== undefined) {
    output.writeFieldBegin('locations', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.locations.length);
    for (var iter4 in this.locations) {
      if (this.locations.hasOwnProperty(iter4)) {
        iter4 = this.locations[iter4];
        iter4.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SourceRange = module.exports.SourceRange = function(args) {
  this.filename = null;
  this.first = null;
  this.last = null;
  this.text = null;
  if (args) {
    if (args.filename !== undefined && args.filename !== null) {
      this.filename = args.filename;
    }
    if (args.first !== undefined && args.first !== null) {
      this.first = new ttypes.SourceLocation(args.first);
    }
    if (args.last !== undefined && args.last !== null) {
      this.last = new ttypes.SourceLocation(args.last);
    }
    if (args.text !== undefined && args.text !== null) {
      this.text = args.text;
    }
  }
};
SourceRange.prototype = {};
SourceRange.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.filename = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.first = new ttypes.SourceLocation();
        this.first.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.last = new ttypes.SourceLocation();
        this.last.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.text = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SourceRange.prototype.write = function(output) {
  output.writeStructBegin('SourceRange');
  if (this.filename !== null && this.filename !== undefined) {
    output.writeFieldBegin('filename', Thrift.Type.STRING, 1);
    output.writeString(this.filename);
    output.writeFieldEnd();
  }
  if (this.first !== null && this.first !== undefined) {
    output.writeFieldBegin('first', Thrift.Type.STRUCT, 2);
    this.first.write(output);
    output.writeFieldEnd();
  }
  if (this.last !== null && this.last !== undefined) {
    output.writeFieldBegin('last', Thrift.Type.STRUCT, 3);
    this.last.write(output);
    output.writeFieldEnd();
  }
  if (this.text !== null && this.text !== undefined) {
    output.writeFieldBegin('text', Thrift.Type.STRING, 4);
    output.writeString(this.text);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Symbol = module.exports.Symbol = function(args) {
  this.name = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
  }
};
Symbol.prototype = {};
Symbol.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Symbol.prototype.write = function(output) {
  output.writeStructBegin('Symbol');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ContextRef = module.exports.ContextRef = function(args) {
  this.type = null;
  this.level = null;
  this.core = null;
  this.task = null;
  if (args) {
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
    if (args.level !== undefined && args.level !== null) {
      this.level = args.level;
    }
    if (args.core !== undefined && args.core !== null) {
      this.core = args.core;
    }
    if (args.task !== undefined && args.task !== null) {
      this.task = args.task;
    }
  }
};
ContextRef.prototype = {};
ContextRef.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.level = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.core = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.task = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ContextRef.prototype.write = function(output) {
  output.writeStructBegin('ContextRef');
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 1);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.level !== null && this.level !== undefined) {
    output.writeFieldBegin('level', Thrift.Type.I32, 2);
    output.writeI32(this.level);
    output.writeFieldEnd();
  }
  if (this.core !== null && this.core !== undefined) {
    output.writeFieldBegin('core', Thrift.Type.I32, 3);
    output.writeI32(this.core);
    output.writeFieldEnd();
  }
  if (this.task !== null && this.task !== undefined) {
    output.writeFieldBegin('task', Thrift.Type.I32, 4);
    output.writeI32(this.task);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ContextInfo = module.exports.ContextInfo = function(args) {
  this.context = null;
  this.aliases = null;
  this.sourceRanges = null;
  this.execLocation = null;
  this.functionName = null;
  if (args) {
    if (args.context !== undefined && args.context !== null) {
      this.context = new ttypes.ContextRef(args.context);
    }
    if (args.aliases !== undefined && args.aliases !== null) {
      this.aliases = new ttypes.ContextRef(args.aliases);
    }
    if (args.sourceRanges !== undefined && args.sourceRanges !== null) {
      this.sourceRanges = Thrift.copyList(args.sourceRanges, [ttypes.SourceRange]);
    }
    if (args.execLocation !== undefined && args.execLocation !== null) {
      this.execLocation = new ttypes.Location(args.execLocation);
    }
    if (args.functionName !== undefined && args.functionName !== null) {
      this.functionName = args.functionName;
    }
  }
};
ContextInfo.prototype = {};
ContextInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.context = new ttypes.ContextRef();
        this.context.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.aliases = new ttypes.ContextRef();
        this.aliases.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.sourceRanges = [];
        var _rtmp36 = input.readListBegin();
        var _size5 = _rtmp36.size || 0;
        for (var _i7 = 0; _i7 < _size5; ++_i7) {
          var elem8 = null;
          elem8 = new ttypes.SourceRange();
          elem8.read(input);
          this.sourceRanges.push(elem8);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.execLocation = new ttypes.Location();
        this.execLocation.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.functionName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ContextInfo.prototype.write = function(output) {
  output.writeStructBegin('ContextInfo');
  if (this.context !== null && this.context !== undefined) {
    output.writeFieldBegin('context', Thrift.Type.STRUCT, 1);
    this.context.write(output);
    output.writeFieldEnd();
  }
  if (this.aliases !== null && this.aliases !== undefined) {
    output.writeFieldBegin('aliases', Thrift.Type.STRUCT, 5);
    this.aliases.write(output);
    output.writeFieldEnd();
  }
  if (this.sourceRanges !== null && this.sourceRanges !== undefined) {
    output.writeFieldBegin('sourceRanges', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.sourceRanges.length);
    for (var iter9 in this.sourceRanges) {
      if (this.sourceRanges.hasOwnProperty(iter9)) {
        iter9 = this.sourceRanges[iter9];
        iter9.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.execLocation !== null && this.execLocation !== undefined) {
    output.writeFieldBegin('execLocation', Thrift.Type.STRUCT, 3);
    this.execLocation.write(output);
    output.writeFieldEnd();
  }
  if (this.functionName !== null && this.functionName !== undefined) {
    output.writeFieldBegin('functionName', Thrift.Type.STRING, 4);
    output.writeString(this.functionName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var StackSettings = module.exports.StackSettings = function(args) {
  this.fillEnabled = null;
  this.overflowWarningsEnabled = null;
  this.spWarningsEnabled = null;
  this.warnLogOnly = null;
  this.warningThreshold = null;
  this.useTrigger = null;
  this.triggerName = null;
  this.limitDisplay = null;
  this.displayLimit = null;
  if (args) {
    if (args.fillEnabled !== undefined && args.fillEnabled !== null) {
      this.fillEnabled = args.fillEnabled;
    }
    if (args.overflowWarningsEnabled !== undefined && args.overflowWarningsEnabled !== null) {
      this.overflowWarningsEnabled = args.overflowWarningsEnabled;
    }
    if (args.spWarningsEnabled !== undefined && args.spWarningsEnabled !== null) {
      this.spWarningsEnabled = args.spWarningsEnabled;
    }
    if (args.warnLogOnly !== undefined && args.warnLogOnly !== null) {
      this.warnLogOnly = args.warnLogOnly;
    }
    if (args.warningThreshold !== undefined && args.warningThreshold !== null) {
      this.warningThreshold = args.warningThreshold;
    }
    if (args.useTrigger !== undefined && args.useTrigger !== null) {
      this.useTrigger = args.useTrigger;
    }
    if (args.triggerName !== undefined && args.triggerName !== null) {
      this.triggerName = args.triggerName;
    }
    if (args.limitDisplay !== undefined && args.limitDisplay !== null) {
      this.limitDisplay = args.limitDisplay;
    }
    if (args.displayLimit !== undefined && args.displayLimit !== null) {
      this.displayLimit = args.displayLimit;
    }
  }
};
StackSettings.prototype = {};
StackSettings.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.fillEnabled = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.overflowWarningsEnabled = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.spWarningsEnabled = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.warnLogOnly = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.warningThreshold = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.useTrigger = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.triggerName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.BOOL) {
        this.limitDisplay = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I32) {
        this.displayLimit = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

StackSettings.prototype.write = function(output) {
  output.writeStructBegin('StackSettings');
  if (this.fillEnabled !== null && this.fillEnabled !== undefined) {
    output.writeFieldBegin('fillEnabled', Thrift.Type.BOOL, 1);
    output.writeBool(this.fillEnabled);
    output.writeFieldEnd();
  }
  if (this.overflowWarningsEnabled !== null && this.overflowWarningsEnabled !== undefined) {
    output.writeFieldBegin('overflowWarningsEnabled', Thrift.Type.BOOL, 2);
    output.writeBool(this.overflowWarningsEnabled);
    output.writeFieldEnd();
  }
  if (this.spWarningsEnabled !== null && this.spWarningsEnabled !== undefined) {
    output.writeFieldBegin('spWarningsEnabled', Thrift.Type.BOOL, 3);
    output.writeBool(this.spWarningsEnabled);
    output.writeFieldEnd();
  }
  if (this.warnLogOnly !== null && this.warnLogOnly !== undefined) {
    output.writeFieldBegin('warnLogOnly', Thrift.Type.BOOL, 4);
    output.writeBool(this.warnLogOnly);
    output.writeFieldEnd();
  }
  if (this.warningThreshold !== null && this.warningThreshold !== undefined) {
    output.writeFieldBegin('warningThreshold', Thrift.Type.I32, 5);
    output.writeI32(this.warningThreshold);
    output.writeFieldEnd();
  }
  if (this.useTrigger !== null && this.useTrigger !== undefined) {
    output.writeFieldBegin('useTrigger', Thrift.Type.BOOL, 6);
    output.writeBool(this.useTrigger);
    output.writeFieldEnd();
  }
  if (this.triggerName !== null && this.triggerName !== undefined) {
    output.writeFieldBegin('triggerName', Thrift.Type.STRING, 7);
    output.writeString(this.triggerName);
    output.writeFieldEnd();
  }
  if (this.limitDisplay !== null && this.limitDisplay !== undefined) {
    output.writeFieldBegin('limitDisplay', Thrift.Type.BOOL, 8);
    output.writeBool(this.limitDisplay);
    output.writeFieldEnd();
  }
  if (this.displayLimit !== null && this.displayLimit !== undefined) {
    output.writeFieldBegin('displayLimit', Thrift.Type.I32, 9);
    output.writeI32(this.displayLimit);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Breakpoint = module.exports.Breakpoint = function(args) {
  this.id = null;
  this.ule = null;
  this.category = null;
  this.descriptor = null;
  this.description = null;
  this.enabled = null;
  this.isUleBased = null;
  this.accessType = null;
  this.valid = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.ule !== undefined && args.ule !== null) {
      this.ule = args.ule;
    }
    if (args.category !== undefined && args.category !== null) {
      this.category = args.category;
    }
    if (args.descriptor !== undefined && args.descriptor !== null) {
      this.descriptor = args.descriptor;
    }
    if (args.description !== undefined && args.description !== null) {
      this.description = args.description;
    }
    if (args.enabled !== undefined && args.enabled !== null) {
      this.enabled = args.enabled;
    }
    if (args.isUleBased !== undefined && args.isUleBased !== null) {
      this.isUleBased = args.isUleBased;
    }
    if (args.accessType !== undefined && args.accessType !== null) {
      this.accessType = args.accessType;
    }
    if (args.valid !== undefined && args.valid !== null) {
      this.valid = args.valid;
    }
  }
};
Breakpoint.prototype = {};
Breakpoint.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ule = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.category = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.descriptor = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.description = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.enabled = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.BOOL) {
        this.isUleBased = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I32) {
        this.accessType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.BOOL) {
        this.valid = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Breakpoint.prototype.write = function(output) {
  output.writeStructBegin('Breakpoint');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.ule !== null && this.ule !== undefined) {
    output.writeFieldBegin('ule', Thrift.Type.STRING, 2);
    output.writeString(this.ule);
    output.writeFieldEnd();
  }
  if (this.category !== null && this.category !== undefined) {
    output.writeFieldBegin('category', Thrift.Type.STRING, 3);
    output.writeString(this.category);
    output.writeFieldEnd();
  }
  if (this.descriptor !== null && this.descriptor !== undefined) {
    output.writeFieldBegin('descriptor', Thrift.Type.STRING, 4);
    output.writeString(this.descriptor);
    output.writeFieldEnd();
  }
  if (this.description !== null && this.description !== undefined) {
    output.writeFieldBegin('description', Thrift.Type.STRING, 5);
    output.writeString(this.description);
    output.writeFieldEnd();
  }
  if (this.enabled !== null && this.enabled !== undefined) {
    output.writeFieldBegin('enabled', Thrift.Type.BOOL, 6);
    output.writeBool(this.enabled);
    output.writeFieldEnd();
  }
  if (this.isUleBased !== null && this.isUleBased !== undefined) {
    output.writeFieldBegin('isUleBased', Thrift.Type.BOOL, 7);
    output.writeBool(this.isUleBased);
    output.writeFieldEnd();
  }
  if (this.accessType !== null && this.accessType !== undefined) {
    output.writeFieldBegin('accessType', Thrift.Type.I32, 8);
    output.writeI32(this.accessType);
    output.writeFieldEnd();
  }
  if (this.valid !== null && this.valid !== undefined) {
    output.writeFieldBegin('valid', Thrift.Type.BOOL, 9);
    output.writeBool(this.valid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

