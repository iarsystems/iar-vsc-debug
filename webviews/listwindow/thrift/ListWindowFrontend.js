//
// Autogenerated by Thrift Compiler (0.14.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
if (typeof Int64 === 'undefined' && typeof require === 'function') {
  var Int64 = require('node-int64');
}


//HELPER FUNCTIONS AND STRUCTURES

var ListWindowFrontend_notify_args = function(args) {
  this.note = null;
  if (args) {
    if (args.note !== undefined && args.note !== null) {
      this.note = new ttypes.Note(args.note);
    }
  }
};
ListWindowFrontend_notify_args.prototype = {};
ListWindowFrontend_notify_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.note = new ttypes.Note();
        this.note.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowFrontend_notify_args.prototype.write = function(output) {
  output.writeStructBegin('ListWindowFrontend_notify_args');
  if (this.note !== null && this.note !== undefined) {
    output.writeFieldBegin('note', Thrift.Type.STRUCT, 1);
    this.note.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowFrontend_notify_result = function(args) {
};
ListWindowFrontend_notify_result.prototype = {};
ListWindowFrontend_notify_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowFrontend_notify_result.prototype.write = function(output) {
  output.writeStructBegin('ListWindowFrontend_notify_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowFrontend_notifyToolbar_args = function(args) {
  this.note = null;
  if (args) {
    if (args.note !== undefined && args.note !== null) {
      this.note = new ttypes.ToolbarNote(args.note);
    }
  }
};
ListWindowFrontend_notifyToolbar_args.prototype = {};
ListWindowFrontend_notifyToolbar_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.note = new ttypes.ToolbarNote();
        this.note.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowFrontend_notifyToolbar_args.prototype.write = function(output) {
  output.writeStructBegin('ListWindowFrontend_notifyToolbar_args');
  if (this.note !== null && this.note !== undefined) {
    output.writeFieldBegin('note', Thrift.Type.STRUCT, 1);
    this.note.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowFrontend_notifyToolbar_result = function(args) {
};
ListWindowFrontend_notifyToolbar_result.prototype = {};
ListWindowFrontend_notifyToolbar_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowFrontend_notifyToolbar_result.prototype.write = function(output) {
  output.writeStructBegin('ListWindowFrontend_notifyToolbar_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowFrontendClient = exports.Client = function(input, output) {
  this.input = input;
  this.output = (!output) ? input : output;
  this.seqid = 0;
};
ListWindowFrontendClient.prototype = {};

ListWindowFrontendClient.prototype.notify = function(note, callback) {
  this.send_notify(note, callback); 
};

ListWindowFrontendClient.prototype.send_notify = function(note, callback) {
  var params = {
    note: note
  };
  var args = new ListWindowFrontend_notify_args(params);
  try {
    this.output.writeMessageBegin('notify', Thrift.MessageType.ONEWAY, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      this.output.getTransport().flush(true, null);
      callback();
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ListWindowFrontendClient.prototype.notifyToolbar = function(note, callback) {
  this.send_notifyToolbar(note, callback); 
};

ListWindowFrontendClient.prototype.send_notifyToolbar = function(note, callback) {
  var params = {
    note: note
  };
  var args = new ListWindowFrontend_notifyToolbar_args(params);
  try {
    this.output.writeMessageBegin('notifyToolbar', Thrift.MessageType.ONEWAY, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      this.output.getTransport().flush(true, null);
      callback();
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};
