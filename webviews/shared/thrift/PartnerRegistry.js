//
// Autogenerated by Thrift Compiler (0.14.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
if (typeof Int64 === 'undefined' && typeof require === 'function') {
  var Int64 = require('node-int64');
}


//HELPER FUNCTIONS AND STRUCTURES

var PartnerRegistry_GetAllPartners_args = function(args) {
};
PartnerRegistry_GetAllPartners_args.prototype = {};
PartnerRegistry_GetAllPartners_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PartnerRegistry_GetAllPartners_args.prototype.write = function(output) {
  output.writeStructBegin('PartnerRegistry_GetAllPartners_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PartnerRegistry_GetAllPartners_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.PartnerInformation]);
    }
  }
};
PartnerRegistry_GetAllPartners_result.prototype = {};
PartnerRegistry_GetAllPartners_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp315 = input.readListBegin();
        var _size14 = _rtmp315.size || 0;
        for (var _i16 = 0; _i16 < _size14; ++_i16) {
          var elem17 = null;
          elem17 = new ttypes.PartnerInformation();
          elem17.read(input);
          this.success.push(elem17);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PartnerRegistry_GetAllPartners_result.prototype.write = function(output) {
  output.writeStructBegin('PartnerRegistry_GetAllPartners_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter18 in this.success) {
      if (this.success.hasOwnProperty(iter18)) {
        iter18 = this.success[iter18];
        iter18.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PartnerRegistry_GetPartnerInfo_args = function(args) {
  this.who = null;
  if (args) {
    if (args.who !== undefined && args.who !== null) {
      this.who = args.who;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field who is unset!');
    }
  }
};
PartnerRegistry_GetPartnerInfo_args.prototype = {};
PartnerRegistry_GetPartnerInfo_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.who = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PartnerRegistry_GetPartnerInfo_args.prototype.write = function(output) {
  output.writeStructBegin('PartnerRegistry_GetPartnerInfo_args');
  if (this.who !== null && this.who !== undefined) {
    output.writeFieldBegin('who', Thrift.Type.I32, 1);
    output.writeI32(this.who);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PartnerRegistry_GetPartnerInfo_result = function(args) {
  this.success = null;
  this.partner = null;
  if (args instanceof ttypes.UnknownPartner) {
    this.partner = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.PartnerInformation(args.success);
    }
    if (args.partner !== undefined && args.partner !== null) {
      this.partner = args.partner;
    }
  }
};
PartnerRegistry_GetPartnerInfo_result.prototype = {};
PartnerRegistry_GetPartnerInfo_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.PartnerInformation();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.partner = new ttypes.UnknownPartner();
        this.partner.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PartnerRegistry_GetPartnerInfo_result.prototype.write = function(output) {
  output.writeStructBegin('PartnerRegistry_GetPartnerInfo_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.partner !== null && this.partner !== undefined) {
    output.writeFieldBegin('partner', Thrift.Type.STRUCT, 1);
    this.partner.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PartnerRegistry_AcknowledgePartnerIsAlive_args = function(args) {
  this.myId = null;
  if (args) {
    if (args.myId !== undefined && args.myId !== null) {
      this.myId = args.myId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field myId is unset!');
    }
  }
};
PartnerRegistry_AcknowledgePartnerIsAlive_args.prototype = {};
PartnerRegistry_AcknowledgePartnerIsAlive_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.myId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PartnerRegistry_AcknowledgePartnerIsAlive_args.prototype.write = function(output) {
  output.writeStructBegin('PartnerRegistry_AcknowledgePartnerIsAlive_args');
  if (this.myId !== null && this.myId !== undefined) {
    output.writeFieldBegin('myId', Thrift.Type.I32, 1);
    output.writeI32(this.myId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PartnerRegistry_AcknowledgePartnerIsAlive_result = function(args) {
  this.partner = null;
  if (args instanceof ttypes.UnknownPartner) {
    this.partner = args;
    return;
  }
  if (args) {
    if (args.partner !== undefined && args.partner !== null) {
      this.partner = args.partner;
    }
  }
};
PartnerRegistry_AcknowledgePartnerIsAlive_result.prototype = {};
PartnerRegistry_AcknowledgePartnerIsAlive_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.partner = new ttypes.UnknownPartner();
        this.partner.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PartnerRegistry_AcknowledgePartnerIsAlive_result.prototype.write = function(output) {
  output.writeStructBegin('PartnerRegistry_AcknowledgePartnerIsAlive_result');
  if (this.partner !== null && this.partner !== undefined) {
    output.writeFieldBegin('partner', Thrift.Type.STRUCT, 1);
    this.partner.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PartnerRegistry_IsPartnerAlive_args = function(args) {
  this.who = null;
  if (args) {
    if (args.who !== undefined && args.who !== null) {
      this.who = args.who;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field who is unset!');
    }
  }
};
PartnerRegistry_IsPartnerAlive_args.prototype = {};
PartnerRegistry_IsPartnerAlive_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.who = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PartnerRegistry_IsPartnerAlive_args.prototype.write = function(output) {
  output.writeStructBegin('PartnerRegistry_IsPartnerAlive_args');
  if (this.who !== null && this.who !== undefined) {
    output.writeFieldBegin('who', Thrift.Type.I32, 1);
    output.writeI32(this.who);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PartnerRegistry_IsPartnerAlive_result = function(args) {
  this.success = null;
  this.partner = null;
  if (args instanceof ttypes.UnknownPartner) {
    this.partner = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.partner !== undefined && args.partner !== null) {
      this.partner = args.partner;
    }
  }
};
PartnerRegistry_IsPartnerAlive_result.prototype = {};
PartnerRegistry_IsPartnerAlive_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.partner = new ttypes.UnknownPartner();
        this.partner.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PartnerRegistry_IsPartnerAlive_result.prototype.write = function(output) {
  output.writeStructBegin('PartnerRegistry_IsPartnerAlive_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.partner !== null && this.partner !== undefined) {
    output.writeFieldBegin('partner', Thrift.Type.STRUCT, 1);
    this.partner.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PartnerRegistry_SetPartnerInfo_args = function(args) {
  this.information = null;
  if (args) {
    if (args.information !== undefined && args.information !== null) {
      this.information = new ttypes.PartnerInformation(args.information);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field information is unset!');
    }
  }
};
PartnerRegistry_SetPartnerInfo_args.prototype = {};
PartnerRegistry_SetPartnerInfo_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.information = new ttypes.PartnerInformation();
        this.information.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PartnerRegistry_SetPartnerInfo_args.prototype.write = function(output) {
  output.writeStructBegin('PartnerRegistry_SetPartnerInfo_args');
  if (this.information !== null && this.information !== undefined) {
    output.writeFieldBegin('information', Thrift.Type.STRUCT, 1);
    this.information.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PartnerRegistry_SetPartnerInfo_result = function(args) {
};
PartnerRegistry_SetPartnerInfo_result.prototype = {};
PartnerRegistry_SetPartnerInfo_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PartnerRegistry_SetPartnerInfo_result.prototype.write = function(output) {
  output.writeStructBegin('PartnerRegistry_SetPartnerInfo_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PartnerRegistry_SetAllPartners_args = function(args) {
  this.allPartners = null;
  if (args) {
    if (args.allPartners !== undefined && args.allPartners !== null) {
      this.allPartners = Thrift.copyList(args.allPartners, [ttypes.PartnerInformation]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field allPartners is unset!');
    }
  }
};
PartnerRegistry_SetAllPartners_args.prototype = {};
PartnerRegistry_SetAllPartners_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.allPartners = [];
        var _rtmp320 = input.readListBegin();
        var _size19 = _rtmp320.size || 0;
        for (var _i21 = 0; _i21 < _size19; ++_i21) {
          var elem22 = null;
          elem22 = new ttypes.PartnerInformation();
          elem22.read(input);
          this.allPartners.push(elem22);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PartnerRegistry_SetAllPartners_args.prototype.write = function(output) {
  output.writeStructBegin('PartnerRegistry_SetAllPartners_args');
  if (this.allPartners !== null && this.allPartners !== undefined) {
    output.writeFieldBegin('allPartners', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.allPartners.length);
    for (var iter23 in this.allPartners) {
      if (this.allPartners.hasOwnProperty(iter23)) {
        iter23 = this.allPartners[iter23];
        iter23.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PartnerRegistry_SetAllPartners_result = function(args) {
};
PartnerRegistry_SetAllPartners_result.prototype = {};
PartnerRegistry_SetAllPartners_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PartnerRegistry_SetAllPartners_result.prototype.write = function(output) {
  output.writeStructBegin('PartnerRegistry_SetAllPartners_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PartnerRegistryClient = exports.Client = function(input, output) {
  this.input = input;
  this.output = (!output) ? input : output;
  this.seqid = 0;
};
Thrift.inherits(PartnerRegistryClient, HeartbeatServiceClient);

PartnerRegistryClient.prototype.GetAllPartners = function(callback) {
  this.send_GetAllPartners(callback); 
  if (!callback) {
    return this.recv_GetAllPartners();
  }
};

PartnerRegistryClient.prototype.send_GetAllPartners = function(callback) {
  var args = new PartnerRegistry_GetAllPartners_args();
  try {
    this.output.writeMessageBegin('GetAllPartners', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_GetAllPartners();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

PartnerRegistryClient.prototype.recv_GetAllPartners = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new PartnerRegistry_GetAllPartners_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'GetAllPartners failed: unknown result';
};

PartnerRegistryClient.prototype.GetPartnerInfo = function(who, callback) {
  this.send_GetPartnerInfo(who, callback); 
  if (!callback) {
    return this.recv_GetPartnerInfo();
  }
};

PartnerRegistryClient.prototype.send_GetPartnerInfo = function(who, callback) {
  var params = {
    who: who
  };
  var args = new PartnerRegistry_GetPartnerInfo_args(params);
  try {
    this.output.writeMessageBegin('GetPartnerInfo', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_GetPartnerInfo();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

PartnerRegistryClient.prototype.recv_GetPartnerInfo = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new PartnerRegistry_GetPartnerInfo_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.partner) {
    throw result.partner;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'GetPartnerInfo failed: unknown result';
};

PartnerRegistryClient.prototype.AcknowledgePartnerIsAlive = function(myId, callback) {
  this.send_AcknowledgePartnerIsAlive(myId, callback); 
  if (!callback) {
  this.recv_AcknowledgePartnerIsAlive();
  }
};

PartnerRegistryClient.prototype.send_AcknowledgePartnerIsAlive = function(myId, callback) {
  var params = {
    myId: myId
  };
  var args = new PartnerRegistry_AcknowledgePartnerIsAlive_args(params);
  try {
    this.output.writeMessageBegin('AcknowledgePartnerIsAlive', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_AcknowledgePartnerIsAlive();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

PartnerRegistryClient.prototype.recv_AcknowledgePartnerIsAlive = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new PartnerRegistry_AcknowledgePartnerIsAlive_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.partner) {
    throw result.partner;
  }
  return;
};

PartnerRegistryClient.prototype.IsPartnerAlive = function(who, callback) {
  this.send_IsPartnerAlive(who, callback); 
  if (!callback) {
    return this.recv_IsPartnerAlive();
  }
};

PartnerRegistryClient.prototype.send_IsPartnerAlive = function(who, callback) {
  var params = {
    who: who
  };
  var args = new PartnerRegistry_IsPartnerAlive_args(params);
  try {
    this.output.writeMessageBegin('IsPartnerAlive', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_IsPartnerAlive();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

PartnerRegistryClient.prototype.recv_IsPartnerAlive = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new PartnerRegistry_IsPartnerAlive_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.partner) {
    throw result.partner;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'IsPartnerAlive failed: unknown result';
};

PartnerRegistryClient.prototype.SetPartnerInfo = function(information, callback) {
  this.send_SetPartnerInfo(information, callback); 
  if (!callback) {
  this.recv_SetPartnerInfo();
  }
};

PartnerRegistryClient.prototype.send_SetPartnerInfo = function(information, callback) {
  var params = {
    information: information
  };
  var args = new PartnerRegistry_SetPartnerInfo_args(params);
  try {
    this.output.writeMessageBegin('SetPartnerInfo', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_SetPartnerInfo();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

PartnerRegistryClient.prototype.recv_SetPartnerInfo = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new PartnerRegistry_SetPartnerInfo_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};

PartnerRegistryClient.prototype.SetAllPartners = function(allPartners, callback) {
  this.send_SetAllPartners(allPartners, callback); 
  if (!callback) {
  this.recv_SetAllPartners();
  }
};

PartnerRegistryClient.prototype.send_SetAllPartners = function(allPartners, callback) {
  var params = {
    allPartners: allPartners
  };
  var args = new PartnerRegistry_SetAllPartners_args(params);
  try {
    this.output.writeMessageBegin('SetAllPartners', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_SetAllPartners();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

PartnerRegistryClient.prototype.recv_SetAllPartners = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new PartnerRegistry_SetAllPartners_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};
