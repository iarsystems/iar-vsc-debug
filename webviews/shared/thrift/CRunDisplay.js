//
// Autogenerated by Thrift Compiler (0.14.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
if (typeof Int64 === 'undefined' && typeof require === 'function') {
  var Int64 = require('node-int64');
}


//HELPER FUNCTIONS AND STRUCTURES

var CRunDisplay_itemAdded_args = function(args) {
  this.message = null;
  this.partnerNamespace = null;
  if (args) {
    if (args.message !== undefined && args.message !== null) {
      this.message = new ttypes.CRunMessage(args.message);
    }
    if (args.partnerNamespace !== undefined && args.partnerNamespace !== null) {
      this.partnerNamespace = args.partnerNamespace;
    }
  }
};
CRunDisplay_itemAdded_args.prototype = {};
CRunDisplay_itemAdded_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.message = new ttypes.CRunMessage();
        this.message.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.partnerNamespace = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRunDisplay_itemAdded_args.prototype.write = function(output) {
  output.writeStructBegin('CRunDisplay_itemAdded_args');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRUCT, 1);
    this.message.write(output);
    output.writeFieldEnd();
  }
  if (this.partnerNamespace !== null && this.partnerNamespace !== undefined) {
    output.writeFieldBegin('partnerNamespace', Thrift.Type.STRING, 2);
    output.writeString(this.partnerNamespace);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CRunDisplay_itemAdded_result = function(args) {
};
CRunDisplay_itemAdded_result.prototype = {};
CRunDisplay_itemAdded_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRunDisplay_itemAdded_result.prototype.write = function(output) {
  output.writeStructBegin('CRunDisplay_itemAdded_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CRunDisplay_itemUpdated_args = function(args) {
  this.message = null;
  this.partnerNamespace = null;
  if (args) {
    if (args.message !== undefined && args.message !== null) {
      this.message = new ttypes.CRunMessage(args.message);
    }
    if (args.partnerNamespace !== undefined && args.partnerNamespace !== null) {
      this.partnerNamespace = args.partnerNamespace;
    }
  }
};
CRunDisplay_itemUpdated_args.prototype = {};
CRunDisplay_itemUpdated_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.message = new ttypes.CRunMessage();
        this.message.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.partnerNamespace = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRunDisplay_itemUpdated_args.prototype.write = function(output) {
  output.writeStructBegin('CRunDisplay_itemUpdated_args');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRUCT, 1);
    this.message.write(output);
    output.writeFieldEnd();
  }
  if (this.partnerNamespace !== null && this.partnerNamespace !== undefined) {
    output.writeFieldBegin('partnerNamespace', Thrift.Type.STRING, 2);
    output.writeString(this.partnerNamespace);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CRunDisplay_itemUpdated_result = function(args) {
};
CRunDisplay_itemUpdated_result.prototype = {};
CRunDisplay_itemUpdated_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRunDisplay_itemUpdated_result.prototype.write = function(output) {
  output.writeStructBegin('CRunDisplay_itemUpdated_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CRunDisplay_itemRemoved_args = function(args) {
  this.index = null;
  this.partnerNamespace = null;
  if (args) {
    if (args.index !== undefined && args.index !== null) {
      this.index = args.index;
    }
    if (args.partnerNamespace !== undefined && args.partnerNamespace !== null) {
      this.partnerNamespace = args.partnerNamespace;
    }
  }
};
CRunDisplay_itemRemoved_args.prototype = {};
CRunDisplay_itemRemoved_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.index = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.partnerNamespace = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRunDisplay_itemRemoved_args.prototype.write = function(output) {
  output.writeStructBegin('CRunDisplay_itemRemoved_args');
  if (this.index !== null && this.index !== undefined) {
    output.writeFieldBegin('index', Thrift.Type.I32, 1);
    output.writeI32(this.index);
    output.writeFieldEnd();
  }
  if (this.partnerNamespace !== null && this.partnerNamespace !== undefined) {
    output.writeFieldBegin('partnerNamespace', Thrift.Type.STRING, 2);
    output.writeString(this.partnerNamespace);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CRunDisplay_itemRemoved_result = function(args) {
};
CRunDisplay_itemRemoved_result.prototype = {};
CRunDisplay_itemRemoved_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRunDisplay_itemRemoved_result.prototype.write = function(output) {
  output.writeStructBegin('CRunDisplay_itemRemoved_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CRunDisplay_updateAll_args = function(args) {
  this.partnerNamespace = null;
  if (args) {
    if (args.partnerNamespace !== undefined && args.partnerNamespace !== null) {
      this.partnerNamespace = args.partnerNamespace;
    }
  }
};
CRunDisplay_updateAll_args.prototype = {};
CRunDisplay_updateAll_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.partnerNamespace = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRunDisplay_updateAll_args.prototype.write = function(output) {
  output.writeStructBegin('CRunDisplay_updateAll_args');
  if (this.partnerNamespace !== null && this.partnerNamespace !== undefined) {
    output.writeFieldBegin('partnerNamespace', Thrift.Type.STRING, 1);
    output.writeString(this.partnerNamespace);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CRunDisplay_updateAll_result = function(args) {
};
CRunDisplay_updateAll_result.prototype = {};
CRunDisplay_updateAll_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRunDisplay_updateAll_result.prototype.write = function(output) {
  output.writeStructBegin('CRunDisplay_updateAll_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CRunDisplay_filtersChanged_args = function(args) {
  this.partnerNamespace = null;
  if (args) {
    if (args.partnerNamespace !== undefined && args.partnerNamespace !== null) {
      this.partnerNamespace = args.partnerNamespace;
    }
  }
};
CRunDisplay_filtersChanged_args.prototype = {};
CRunDisplay_filtersChanged_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.partnerNamespace = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRunDisplay_filtersChanged_args.prototype.write = function(output) {
  output.writeStructBegin('CRunDisplay_filtersChanged_args');
  if (this.partnerNamespace !== null && this.partnerNamespace !== undefined) {
    output.writeFieldBegin('partnerNamespace', Thrift.Type.STRING, 1);
    output.writeString(this.partnerNamespace);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CRunDisplay_filtersChanged_result = function(args) {
};
CRunDisplay_filtersChanged_result.prototype = {};
CRunDisplay_filtersChanged_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRunDisplay_filtersChanged_result.prototype.write = function(output) {
  output.writeStructBegin('CRunDisplay_filtersChanged_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CRunDisplayClient = exports.Client = function(input, output) {
  this.input = input;
  this.output = (!output) ? input : output;
  this.seqid = 0;
};
CRunDisplayClient.prototype = {};

CRunDisplayClient.prototype.itemAdded = function(message, partnerNamespace, callback) {
  this.send_itemAdded(message, partnerNamespace, callback); 
  if (!callback) {
  this.recv_itemAdded();
  }
};

CRunDisplayClient.prototype.send_itemAdded = function(message, partnerNamespace, callback) {
  var params = {
    message: message,
    partnerNamespace: partnerNamespace
  };
  var args = new CRunDisplay_itemAdded_args(params);
  try {
    this.output.writeMessageBegin('itemAdded', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_itemAdded();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

CRunDisplayClient.prototype.recv_itemAdded = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CRunDisplay_itemAdded_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};

CRunDisplayClient.prototype.itemUpdated = function(message, partnerNamespace, callback) {
  this.send_itemUpdated(message, partnerNamespace, callback); 
  if (!callback) {
  this.recv_itemUpdated();
  }
};

CRunDisplayClient.prototype.send_itemUpdated = function(message, partnerNamespace, callback) {
  var params = {
    message: message,
    partnerNamespace: partnerNamespace
  };
  var args = new CRunDisplay_itemUpdated_args(params);
  try {
    this.output.writeMessageBegin('itemUpdated', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_itemUpdated();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

CRunDisplayClient.prototype.recv_itemUpdated = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CRunDisplay_itemUpdated_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};

CRunDisplayClient.prototype.itemRemoved = function(index, partnerNamespace, callback) {
  this.send_itemRemoved(index, partnerNamespace, callback); 
  if (!callback) {
  this.recv_itemRemoved();
  }
};

CRunDisplayClient.prototype.send_itemRemoved = function(index, partnerNamespace, callback) {
  var params = {
    index: index,
    partnerNamespace: partnerNamespace
  };
  var args = new CRunDisplay_itemRemoved_args(params);
  try {
    this.output.writeMessageBegin('itemRemoved', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_itemRemoved();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

CRunDisplayClient.prototype.recv_itemRemoved = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CRunDisplay_itemRemoved_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};

CRunDisplayClient.prototype.updateAll = function(partnerNamespace, callback) {
  this.send_updateAll(partnerNamespace, callback); 
  if (!callback) {
  this.recv_updateAll();
  }
};

CRunDisplayClient.prototype.send_updateAll = function(partnerNamespace, callback) {
  var params = {
    partnerNamespace: partnerNamespace
  };
  var args = new CRunDisplay_updateAll_args(params);
  try {
    this.output.writeMessageBegin('updateAll', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_updateAll();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

CRunDisplayClient.prototype.recv_updateAll = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CRunDisplay_updateAll_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};

CRunDisplayClient.prototype.filtersChanged = function(partnerNamespace, callback) {
  this.send_filtersChanged(partnerNamespace, callback); 
  if (!callback) {
  this.recv_filtersChanged();
  }
};

CRunDisplayClient.prototype.send_filtersChanged = function(partnerNamespace, callback) {
  var params = {
    partnerNamespace: partnerNamespace
  };
  var args = new CRunDisplay_filtersChanged_args(params);
  try {
    this.output.writeMessageBegin('filtersChanged', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_filtersChanged();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

CRunDisplayClient.prototype.recv_filtersChanged = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CRunDisplay_filtersChanged_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};
