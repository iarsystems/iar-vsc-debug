//
// Autogenerated by Thrift Compiler (0.14.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
import Int64 = require('node-int64');


export declare class OptionsServiceError extends Thrift.TException {
  description: string;

    constructor(args?: { description: string; });
  read(input: Object): void;
  write(input: Object): void;
}

export declare class CreateSessionRequest {
  projectPath: string;
  configurationName: string;

    constructor(args?: { projectPath: string; configurationName: string; });
  read(input: Object): void;
  write(input: Object): void;
}

export declare class CreateSessionResponse {
  sessionId: Id;
  success: Success;

    constructor(args?: { sessionId: Id; success: Success; });
  read(input: Object): void;
  write(input: Object): void;
}

/**
 * Defines the data needed for a constructed mock test session
 * 
 * This data is used for the Mock used for testing and it will build data based on the
 * given categories xml string, and the list of xml strings for pages.
 * 
 */
export declare class CreateSessionWithDataRequest {
  categories: string;
  pages: { [k: string]: string; };

    constructor(args?: { categories: string; pages: { [k: string]: string; }; });
  read(input: Object): void;
  write(input: Object): void;
}

/**
 * Defines the data needed for updating one specific option value
 * 
 * This data is used for updating one option to a given value, if possible.
 */
export declare class UpdateOptionValueRequest {
  sessionId: Id;
  optionId: string;
  newValue: string;

    constructor(args?: { sessionId: Id; optionId: string; newValue: string; });
  read(input: Object): void;
  write(input: Object): void;
}

/**
 * Defines the response for setting an option value
 */
export declare class UpdateOptionValueResponse {
  sessionId: Id;
  result: Success;
  optionId: string;

    constructor(args?: { sessionId: Id; result: Success; optionId: string; });
  read(input: Object): void;
  write(input: Object): void;
}

export declare class DestroySessionRequest {
  sessionId: Id;

    constructor(args?: { sessionId: Id; });
  read(input: Object): void;
  write(input: Object): void;
}

export declare class DestroySessionResponse {
  sessionId: Id;
  success: Success;

    constructor(args?: { sessionId: Id; success: Success; });
  read(input: Object): void;
  write(input: Object): void;
}

export declare class Tree {
  id: Id;
  data: string;

    constructor(args?: { id: Id; data: string; });
  read(input: Object): void;
  write(input: Object): void;
}

export declare class GetCategoryTreeRequest {
  sessionId: Id;

    constructor(args?: { sessionId: Id; });
  read(input: Object): void;
  write(input: Object): void;
}

export declare class GetCategoryTreeResponse {
  sessionId: Id;
  tree: Tree;
  success: Success;

    constructor(args?: { sessionId: Id; tree: Tree; success: Success; });
  read(input: Object): void;
  write(input: Object): void;
}

export declare class GetOptionTreeRequest {
  sessionId: Id;
  treeId: Id;

    constructor(args?: { sessionId: Id; treeId: Id; });
  read(input: Object): void;
  write(input: Object): void;
}

export declare class GetOptionTreeResponse {
  sessionId: Id;
  tree: Tree;
  success: Success;

    constructor(args?: { sessionId: Id; tree: Tree; success: Success; });
  read(input: Object): void;
  write(input: Object): void;
}

export declare class OptionValue {
  optionDefinitionId: string;
  data: string;

    constructor(args?: { optionDefinitionId: string; data: string; });
  read(input: Object): void;
  write(input: Object): void;
}

export declare class VerificationError {
  optionDefinitionId: string;
  errorMessage: string;

    constructor(args?: { optionDefinitionId: string; errorMessage: string; });
  read(input: Object): void;
  write(input: Object): void;
}

export declare class VerifyOptionStateRequest {
  sessionId: Id;
  optionValues: OptionValue[];

    constructor(args?: { sessionId: Id; optionValues: OptionValue[]; });
  read(input: Object): void;
  write(input: Object): void;
}

export declare class VerifyOptionStateResponse {
  sessionId: Id;
  tree: Tree;
  success: Success;
  verificationErrors: VerificationError[];

    constructor(args?: { sessionId: Id; tree: Tree; success: Success; verificationErrors: VerificationError[]; });
  read(input: Object): void;
  write(input: Object): void;
}

export declare class CommitOptionStateRequest {
  sessionId: Id;

    constructor(args?: { sessionId: Id; });
  read(input: Object): void;
  write(input: Object): void;
}

export declare class CommitOptionStateResponse {
  sessionId: Id;
  success: Success;

    constructor(args?: { sessionId: Id; success: Success; });
  read(input: Object): void;
  write(input: Object): void;
}

export declare var SERVICE_ID: string;
