/// <reference path="HeartbeatService.d.ts" />
//
// Autogenerated by Thrift Compiler (0.14.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//

import Int64 = require('node-int64');

import { timeline } from "./timeline_types";


/**
 * Service for retrieving Timeline data from the backend
 */
export declare class Client extends HeartbeatService.Client {
  input: Thrift.TJSONProtocol;
  output: Thrift.TJSONProtocol;
  seqid: number;

  constructor(input: Thrift.TJSONProtocol, output?: Thrift.TJSONProtocol);

  getChannels(): Q.Promise<TimelineChannelInfo[]>;

  getChannels(callback?: (data: TimelineChannelInfo[])=>void): void;

  getCPUClock(): Q.Promise<Int64>;

  getCPUClock(callback?: (data: Int64)=>void): void;

  readData(id: string, startTime: Int64, endTime: Int64): Q.Promise<string>;

  readData(id: string, startTime: Int64, endTime: Int64, callback?: (data: string)=>void): void;

  readOverflows(id: string, startTime: Int64, endTime: Int64): Q.Promise<string>;

  readOverflows(id: string, startTime: Int64, endTime: Int64, callback?: (data: string)=>void): void;

  enable(id: string, enabled: boolean): Q.Promise<void>;

  enable(id: string, enabled: boolean, callback?: (data: void)=>void): void;

  isEnabled(id: string): Q.Promise<boolean>;

  isEnabled(id: string, callback?: (data: boolean)=>void): void;
}
