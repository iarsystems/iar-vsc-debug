//
// Autogenerated by Thrift Compiler (0.14.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
if (typeof Int64 === 'undefined' && typeof require === 'function') {
  var Int64 = require('node-int64');
}


//HELPER FUNCTIONS AND STRUCTURES

var HeartbeatService_isAlive_args = function(args) {
};
HeartbeatService_isAlive_args.prototype = {};
HeartbeatService_isAlive_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

HeartbeatService_isAlive_args.prototype.write = function(output) {
  output.writeStructBegin('HeartbeatService_isAlive_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var HeartbeatService_isAlive_result = function(args) {
};
HeartbeatService_isAlive_result.prototype = {};
HeartbeatService_isAlive_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

HeartbeatService_isAlive_result.prototype.write = function(output) {
  output.writeStructBegin('HeartbeatService_isAlive_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var HeartbeatServiceClient = exports.Client = function(input, output) {
  this.input = input;
  this.output = (!output) ? input : output;
  this.seqid = 0;
};
HeartbeatServiceClient.prototype = {};

HeartbeatServiceClient.prototype.isAlive = function(callback) {
  this.send_isAlive(callback); 
  if (!callback) {
  this.recv_isAlive();
  }
};

HeartbeatServiceClient.prototype.send_isAlive = function(callback) {
  var args = new HeartbeatService_isAlive_args();
  try {
    this.output.writeMessageBegin('isAlive', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_isAlive();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

HeartbeatServiceClient.prototype.recv_isAlive = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new HeartbeatService_isAlive_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};
