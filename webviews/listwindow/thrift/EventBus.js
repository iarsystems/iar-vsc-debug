//
// Autogenerated by Thrift Compiler (0.14.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
if (typeof Int64 === 'undefined' && typeof require === 'function') {
  var Int64 = require('node-int64');
}


//HELPER FUNCTIONS AND STRUCTURES

var EventBus_Fire_args = function(args) {
  this.toBeFired = null;
  if (args) {
    if (args.toBeFired !== undefined && args.toBeFired !== null) {
      this.toBeFired = new ttypes.Event(args.toBeFired);
    }
  }
};
EventBus_Fire_args.prototype = {};
EventBus_Fire_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.toBeFired = new ttypes.Event();
        this.toBeFired.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EventBus_Fire_args.prototype.write = function(output) {
  output.writeStructBegin('EventBus_Fire_args');
  if (this.toBeFired !== null && this.toBeFired !== undefined) {
    output.writeFieldBegin('toBeFired', Thrift.Type.STRUCT, 1);
    this.toBeFired.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var EventBus_Fire_result = function(args) {
};
EventBus_Fire_result.prototype = {};
EventBus_Fire_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EventBus_Fire_result.prototype.write = function(output) {
  output.writeStructBegin('EventBus_Fire_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var EventBus_RegisterWithVersion_args = function(args) {
  this.clientLocation = null;
  this.myId = null;
  this.ampVersion = null;
  if (args) {
    if (args.clientLocation !== undefined && args.clientLocation !== null) {
      this.clientLocation = new ServiceRegistry_ttypes.ServiceLocation(args.clientLocation);
    }
    if (args.myId !== undefined && args.myId !== null) {
      this.myId = args.myId;
    }
    if (args.ampVersion !== undefined && args.ampVersion !== null) {
      this.ampVersion = args.ampVersion;
    }
  }
};
EventBus_RegisterWithVersion_args.prototype = {};
EventBus_RegisterWithVersion_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.clientLocation = new ServiceRegistry_ttypes.ServiceLocation();
        this.clientLocation.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.myId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.ampVersion = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EventBus_RegisterWithVersion_args.prototype.write = function(output) {
  output.writeStructBegin('EventBus_RegisterWithVersion_args');
  if (this.clientLocation !== null && this.clientLocation !== undefined) {
    output.writeFieldBegin('clientLocation', Thrift.Type.STRUCT, 1);
    this.clientLocation.write(output);
    output.writeFieldEnd();
  }
  if (this.myId !== null && this.myId !== undefined) {
    output.writeFieldBegin('myId', Thrift.Type.I32, 2);
    output.writeI32(this.myId);
    output.writeFieldEnd();
  }
  if (this.ampVersion !== null && this.ampVersion !== undefined) {
    output.writeFieldBegin('ampVersion', Thrift.Type.I32, 3);
    output.writeI32(this.ampVersion);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var EventBus_RegisterWithVersion_result = function(args) {
  this.regFaild = null;
  if (args instanceof ttypes.EventBusRegistrationFailed) {
    this.regFaild = args;
    return;
  }
  if (args) {
    if (args.regFaild !== undefined && args.regFaild !== null) {
      this.regFaild = args.regFaild;
    }
  }
};
EventBus_RegisterWithVersion_result.prototype = {};
EventBus_RegisterWithVersion_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.regFaild = new ttypes.EventBusRegistrationFailed();
        this.regFaild.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EventBus_RegisterWithVersion_result.prototype.write = function(output) {
  output.writeStructBegin('EventBus_RegisterWithVersion_result');
  if (this.regFaild !== null && this.regFaild !== undefined) {
    output.writeFieldBegin('regFaild', Thrift.Type.STRUCT, 1);
    this.regFaild.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var EventBus_Register_args = function(args) {
  this.clientLocation = null;
  this.myId = null;
  if (args) {
    if (args.clientLocation !== undefined && args.clientLocation !== null) {
      this.clientLocation = new ServiceRegistry_ttypes.ServiceLocation(args.clientLocation);
    }
    if (args.myId !== undefined && args.myId !== null) {
      this.myId = args.myId;
    }
  }
};
EventBus_Register_args.prototype = {};
EventBus_Register_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.clientLocation = new ServiceRegistry_ttypes.ServiceLocation();
        this.clientLocation.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.myId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EventBus_Register_args.prototype.write = function(output) {
  output.writeStructBegin('EventBus_Register_args');
  if (this.clientLocation !== null && this.clientLocation !== undefined) {
    output.writeFieldBegin('clientLocation', Thrift.Type.STRUCT, 1);
    this.clientLocation.write(output);
    output.writeFieldEnd();
  }
  if (this.myId !== null && this.myId !== undefined) {
    output.writeFieldBegin('myId', Thrift.Type.I32, 2);
    output.writeI32(this.myId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var EventBus_Register_result = function(args) {
  this.regFaild = null;
  if (args instanceof ttypes.EventBusRegistrationFailed) {
    this.regFaild = args;
    return;
  }
  if (args) {
    if (args.regFaild !== undefined && args.regFaild !== null) {
      this.regFaild = args.regFaild;
    }
  }
};
EventBus_Register_result.prototype = {};
EventBus_Register_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.regFaild = new ttypes.EventBusRegistrationFailed();
        this.regFaild.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EventBus_Register_result.prototype.write = function(output) {
  output.writeStructBegin('EventBus_Register_result');
  if (this.regFaild !== null && this.regFaild !== undefined) {
    output.writeFieldBegin('regFaild', Thrift.Type.STRUCT, 1);
    this.regFaild.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var EventBusClient = exports.Client = function(input, output) {
  this.input = input;
  this.output = (!output) ? input : output;
  this.seqid = 0;
};
Thrift.inherits(EventBusClient, HeartbeatServiceClient);

EventBusClient.prototype.Fire = function(toBeFired, callback) {
  this.send_Fire(toBeFired, callback); 
};

EventBusClient.prototype.send_Fire = function(toBeFired, callback) {
  var params = {
    toBeFired: toBeFired
  };
  var args = new EventBus_Fire_args(params);
  try {
    this.output.writeMessageBegin('Fire', Thrift.MessageType.ONEWAY, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      this.output.getTransport().flush(true, null);
      callback();
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

EventBusClient.prototype.RegisterWithVersion = function(clientLocation, myId, ampVersion, callback) {
  this.send_RegisterWithVersion(clientLocation, myId, ampVersion, callback); 
  if (!callback) {
  this.recv_RegisterWithVersion();
  }
};

EventBusClient.prototype.send_RegisterWithVersion = function(clientLocation, myId, ampVersion, callback) {
  var params = {
    clientLocation: clientLocation,
    myId: myId,
    ampVersion: ampVersion
  };
  var args = new EventBus_RegisterWithVersion_args(params);
  try {
    this.output.writeMessageBegin('RegisterWithVersion', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_RegisterWithVersion();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

EventBusClient.prototype.recv_RegisterWithVersion = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new EventBus_RegisterWithVersion_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.regFaild) {
    throw result.regFaild;
  }
  return;
};

EventBusClient.prototype.Register = function(clientLocation, myId, callback) {
  this.send_Register(clientLocation, myId, callback); 
  if (!callback) {
  this.recv_Register();
  }
};

EventBusClient.prototype.send_Register = function(clientLocation, myId, callback) {
  var params = {
    clientLocation: clientLocation,
    myId: myId
  };
  var args = new EventBus_Register_args(params);
  try {
    this.output.writeMessageBegin('Register', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_Register();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

EventBusClient.prototype.recv_Register = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new EventBus_Register_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.regFaild) {
    throw result.regFaild;
  }
  return;
};
