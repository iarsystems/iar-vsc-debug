//
// Autogenerated by Thrift Compiler (0.14.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
if (typeof Int64 === 'undefined' && typeof require === 'function') {
  var Int64 = require('node-int64');
}


//HELPER FUNCTIONS AND STRUCTURES

var PowerLogSetup_setRate_args = function(args) {
  this.sampleRate = null;
  if (args) {
    if (args.sampleRate !== undefined && args.sampleRate !== null) {
      this.sampleRate = args.sampleRate;
    }
  }
};
PowerLogSetup_setRate_args.prototype = {};
PowerLogSetup_setRate_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.sampleRate = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PowerLogSetup_setRate_args.prototype.write = function(output) {
  output.writeStructBegin('PowerLogSetup_setRate_args');
  if (this.sampleRate !== null && this.sampleRate !== undefined) {
    output.writeFieldBegin('sampleRate', Thrift.Type.I32, 1);
    output.writeI32(this.sampleRate);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PowerLogSetup_setRate_result = function(args) {
};
PowerLogSetup_setRate_result.prototype = {};
PowerLogSetup_setRate_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PowerLogSetup_setRate_result.prototype.write = function(output) {
  output.writeStructBegin('PowerLogSetup_setRate_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PowerLogSetup_getRateOfSample_args = function(args) {
};
PowerLogSetup_getRateOfSample_args.prototype = {};
PowerLogSetup_getRateOfSample_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PowerLogSetup_getRateOfSample_args.prototype.write = function(output) {
  output.writeStructBegin('PowerLogSetup_getRateOfSample_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PowerLogSetup_getRateOfSample_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
PowerLogSetup_getRateOfSample_result.prototype = {};
PowerLogSetup_getRateOfSample_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PowerLogSetup_getRateOfSample_result.prototype.write = function(output) {
  output.writeStructBegin('PowerLogSetup_getRateOfSample_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PowerLogSetup_getMaxRate_args = function(args) {
};
PowerLogSetup_getMaxRate_args.prototype = {};
PowerLogSetup_getMaxRate_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PowerLogSetup_getMaxRate_args.prototype.write = function(output) {
  output.writeStructBegin('PowerLogSetup_getMaxRate_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PowerLogSetup_getMaxRate_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
PowerLogSetup_getMaxRate_result.prototype = {};
PowerLogSetup_getMaxRate_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PowerLogSetup_getMaxRate_result.prototype.write = function(output) {
  output.writeStructBegin('PowerLogSetup_getMaxRate_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PowerLogSetupClient = exports.Client = function(input, output) {
  this.input = input;
  this.output = (!output) ? input : output;
  this.seqid = 0;
};
Thrift.inherits(PowerLogSetupClient, ListWindowBackendClient);

PowerLogSetupClient.prototype.setRate = function(sampleRate, callback) {
  this.send_setRate(sampleRate, callback); 
  if (!callback) {
  this.recv_setRate();
  }
};

PowerLogSetupClient.prototype.send_setRate = function(sampleRate, callback) {
  var params = {
    sampleRate: sampleRate
  };
  var args = new PowerLogSetup_setRate_args(params);
  try {
    this.output.writeMessageBegin('setRate', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_setRate();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

PowerLogSetupClient.prototype.recv_setRate = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new PowerLogSetup_setRate_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};

PowerLogSetupClient.prototype.getRateOfSample = function(callback) {
  this.send_getRateOfSample(callback); 
  if (!callback) {
    return this.recv_getRateOfSample();
  }
};

PowerLogSetupClient.prototype.send_getRateOfSample = function(callback) {
  var args = new PowerLogSetup_getRateOfSample_args();
  try {
    this.output.writeMessageBegin('getRateOfSample', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_getRateOfSample();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

PowerLogSetupClient.prototype.recv_getRateOfSample = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new PowerLogSetup_getRateOfSample_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getRateOfSample failed: unknown result';
};

PowerLogSetupClient.prototype.getMaxRate = function(callback) {
  this.send_getMaxRate(callback); 
  if (!callback) {
    return this.recv_getMaxRate();
  }
};

PowerLogSetupClient.prototype.send_getMaxRate = function(callback) {
  var args = new PowerLogSetup_getMaxRate_args();
  try {
    this.output.writeMessageBegin('getMaxRate', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_getMaxRate();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

PowerLogSetupClient.prototype.recv_getMaxRate = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new PowerLogSetup_getMaxRate_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getMaxRate failed: unknown result';
};
