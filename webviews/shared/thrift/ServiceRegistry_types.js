//
// Autogenerated by Thrift Compiler (0.14.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
if (typeof Int64 === 'undefined' && typeof require === 'function') {
  var Int64 = require('node-int64');
}


var ttypes = module.exports = {};
ttypes.Protocol = {
  '0' : 'Binary',
  'Binary' : 0,
  '1' : 'Json',
  'Json' : 1
};
ttypes.Transport = {
  '0' : 'Socket',
  'Socket' : 0,
  '1' : 'Pipe',
  'Pipe' : 1
};
var ServiceLocation = module.exports.ServiceLocation = function(args) {
  this.host = null;
  this.port = null;
  this.protocol = null;
  this.transport = null;
  if (args) {
    if (args.host !== undefined && args.host !== null) {
      this.host = args.host;
    }
    if (args.port !== undefined && args.port !== null) {
      this.port = args.port;
    }
    if (args.protocol !== undefined && args.protocol !== null) {
      this.protocol = args.protocol;
    }
    if (args.transport !== undefined && args.transport !== null) {
      this.transport = args.transport;
    }
  }
};
ServiceLocation.prototype = {};
ServiceLocation.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.host = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.port = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.protocol = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.transport = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ServiceLocation.prototype.write = function(output) {
  output.writeStructBegin('ServiceLocation');
  if (this.host !== null && this.host !== undefined) {
    output.writeFieldBegin('host', Thrift.Type.STRING, 1);
    output.writeString(this.host);
    output.writeFieldEnd();
  }
  if (this.port !== null && this.port !== undefined) {
    output.writeFieldBegin('port', Thrift.Type.I32, 2);
    output.writeI32(this.port);
    output.writeFieldEnd();
  }
  if (this.protocol !== null && this.protocol !== undefined) {
    output.writeFieldBegin('protocol', Thrift.Type.I32, 3);
    output.writeI32(this.protocol);
    output.writeFieldEnd();
  }
  if (this.transport !== null && this.transport !== undefined) {
    output.writeFieldBegin('transport', Thrift.Type.I32, 4);
    output.writeI32(this.transport);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ServiceException = module.exports.ServiceException = function(args) {
  this.message = null;
  this.serviceName = null;
  this.exceptionDescr = null;
  if (args) {
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
    if (args.serviceName !== undefined && args.serviceName !== null) {
      this.serviceName = args.serviceName;
    }
    if (args.exceptionDescr !== undefined && args.exceptionDescr !== null) {
      this.exceptionDescr = args.exceptionDescr;
    }
  }
};
Thrift.inherits(ServiceException, Thrift.TException);
ServiceException.prototype.name = 'ServiceException';
ServiceException.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.serviceName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.exceptionDescr = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ServiceException.prototype.write = function(output) {
  output.writeStructBegin('ServiceException');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  if (this.serviceName !== null && this.serviceName !== undefined) {
    output.writeFieldBegin('serviceName', Thrift.Type.STRING, 2);
    output.writeString(this.serviceName);
    output.writeFieldEnd();
  }
  if (this.exceptionDescr !== null && this.exceptionDescr !== undefined) {
    output.writeFieldBegin('exceptionDescr', Thrift.Type.STRING, 3);
    output.writeString(this.exceptionDescr);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ttypes.IAR_SERVICE_REGISTRY_ENVVAR = 'IAR_SERVICE_REGISTRY';
ttypes.IAR_CSPY_PIPE_PREFIX = 'iar-cspy';
ttypes.SERVICE_REGISTRY_SERVICE = 'com.iar.thrift.service.registry';
