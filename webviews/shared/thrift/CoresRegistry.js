//
// Autogenerated by Thrift Compiler (0.14.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
if (typeof Int64 === 'undefined' && typeof require === 'function') {
  var Int64 = require('node-int64');
}


//HELPER FUNCTIONS AND STRUCTURES

var CoresRegistry_NumberOfCores_args = function(args) {
};
CoresRegistry_NumberOfCores_args.prototype = {};
CoresRegistry_NumberOfCores_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CoresRegistry_NumberOfCores_args.prototype.write = function(output) {
  output.writeStructBegin('CoresRegistry_NumberOfCores_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CoresRegistry_NumberOfCores_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
CoresRegistry_NumberOfCores_result.prototype = {};
CoresRegistry_NumberOfCores_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CoresRegistry_NumberOfCores_result.prototype.write = function(output) {
  output.writeStructBegin('CoresRegistry_NumberOfCores_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CoresRegistry_AllCores_args = function(args) {
};
CoresRegistry_AllCores_args.prototype = {};
CoresRegistry_AllCores_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CoresRegistry_AllCores_args.prototype.write = function(output) {
  output.writeStructBegin('CoresRegistry_AllCores_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CoresRegistry_AllCores_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.CoreInfo]);
    }
  }
};
CoresRegistry_AllCores_result.prototype = {};
CoresRegistry_AllCores_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp325 = input.readListBegin();
        var _size24 = _rtmp325.size || 0;
        for (var _i26 = 0; _i26 < _size24; ++_i26) {
          var elem27 = null;
          elem27 = new ttypes.CoreInfo();
          elem27.read(input);
          this.success.push(elem27);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CoresRegistry_AllCores_result.prototype.write = function(output) {
  output.writeStructBegin('CoresRegistry_AllCores_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter28 in this.success) {
      if (this.success.hasOwnProperty(iter28)) {
        iter28 = this.success[iter28];
        iter28.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CoresRegistry_GetInfo_args = function(args) {
  this.coreNumber = null;
  if (args) {
    if (args.coreNumber !== undefined && args.coreNumber !== null) {
      this.coreNumber = args.coreNumber;
    }
  }
};
CoresRegistry_GetInfo_args.prototype = {};
CoresRegistry_GetInfo_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.coreNumber = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CoresRegistry_GetInfo_args.prototype.write = function(output) {
  output.writeStructBegin('CoresRegistry_GetInfo_args');
  if (this.coreNumber !== null && this.coreNumber !== undefined) {
    output.writeFieldBegin('coreNumber', Thrift.Type.I32, 1);
    output.writeI32(this.coreNumber);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CoresRegistry_GetInfo_result = function(args) {
  this.success = null;
  this.partner = null;
  if (args instanceof ttypes.UnknownPartner) {
    this.partner = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.CoreInfo(args.success);
    }
    if (args.partner !== undefined && args.partner !== null) {
      this.partner = args.partner;
    }
  }
};
CoresRegistry_GetInfo_result.prototype = {};
CoresRegistry_GetInfo_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.CoreInfo();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.partner = new ttypes.UnknownPartner();
        this.partner.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CoresRegistry_GetInfo_result.prototype.write = function(output) {
  output.writeStructBegin('CoresRegistry_GetInfo_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.partner !== null && this.partner !== undefined) {
    output.writeFieldBegin('partner', Thrift.Type.STRUCT, 1);
    this.partner.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CoresRegistry_SetInfo_args = function(args) {
  this.updated = null;
  if (args) {
    if (args.updated !== undefined && args.updated !== null) {
      this.updated = new ttypes.CoreInfo(args.updated);
    }
  }
};
CoresRegistry_SetInfo_args.prototype = {};
CoresRegistry_SetInfo_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.updated = new ttypes.CoreInfo();
        this.updated.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CoresRegistry_SetInfo_args.prototype.write = function(output) {
  output.writeStructBegin('CoresRegistry_SetInfo_args');
  if (this.updated !== null && this.updated !== undefined) {
    output.writeFieldBegin('updated', Thrift.Type.STRUCT, 1);
    this.updated.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CoresRegistry_SetInfo_result = function(args) {
};
CoresRegistry_SetInfo_result.prototype = {};
CoresRegistry_SetInfo_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CoresRegistry_SetInfo_result.prototype.write = function(output) {
  output.writeStructBegin('CoresRegistry_SetInfo_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CoresRegistry_SetInfoPartial_args = function(args) {
  this.updated = null;
  this.props = null;
  if (args) {
    if (args.updated !== undefined && args.updated !== null) {
      this.updated = args.updated;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field updated is unset!');
    }
    if (args.props !== undefined && args.props !== null) {
      this.props = Thrift.copyMap(args.props, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field props is unset!');
    }
  }
};
CoresRegistry_SetInfoPartial_args.prototype = {};
CoresRegistry_SetInfoPartial_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.updated = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.MAP) {
        this.props = {};
        var _rtmp330 = input.readMapBegin();
        var _size29 = _rtmp330.size || 0;
        for (var _i31 = 0; _i31 < _size29; ++_i31) {
          if (_i31 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key32 = null;
          var val33 = null;
          key32 = input.readString().value;
          val33 = input.readString().value;
          this.props[key32] = val33;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CoresRegistry_SetInfoPartial_args.prototype.write = function(output) {
  output.writeStructBegin('CoresRegistry_SetInfoPartial_args');
  if (this.updated !== null && this.updated !== undefined) {
    output.writeFieldBegin('updated', Thrift.Type.I32, 1);
    output.writeI32(this.updated);
    output.writeFieldEnd();
  }
  if (this.props !== null && this.props !== undefined) {
    output.writeFieldBegin('props', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.props));
    for (var kiter34 in this.props) {
      if (this.props.hasOwnProperty(kiter34)) {
        var viter35 = this.props[kiter34];
        output.writeString(kiter34);
        output.writeString(viter35);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CoresRegistry_SetInfoPartial_result = function(args) {
};
CoresRegistry_SetInfoPartial_result.prototype = {};
CoresRegistry_SetInfoPartial_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CoresRegistry_SetInfoPartial_result.prototype.write = function(output) {
  output.writeStructBegin('CoresRegistry_SetInfoPartial_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CoresRegistry_PartnerCores_args = function(args) {
  this.partner = null;
  if (args) {
    if (args.partner !== undefined && args.partner !== null) {
      this.partner = args.partner;
    }
  }
};
CoresRegistry_PartnerCores_args.prototype = {};
CoresRegistry_PartnerCores_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.partner = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CoresRegistry_PartnerCores_args.prototype.write = function(output) {
  output.writeStructBegin('CoresRegistry_PartnerCores_args');
  if (this.partner !== null && this.partner !== undefined) {
    output.writeFieldBegin('partner', Thrift.Type.I32, 1);
    output.writeI32(this.partner);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CoresRegistry_PartnerCores_result = function(args) {
  this.success = null;
  this.partner = null;
  if (args instanceof ttypes.UnknownPartner) {
    this.partner = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.CoreRange(args.success);
    }
    if (args.partner !== undefined && args.partner !== null) {
      this.partner = args.partner;
    }
  }
};
CoresRegistry_PartnerCores_result.prototype = {};
CoresRegistry_PartnerCores_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.CoreRange();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.partner = new ttypes.UnknownPartner();
        this.partner.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CoresRegistry_PartnerCores_result.prototype.write = function(output) {
  output.writeStructBegin('CoresRegistry_PartnerCores_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.partner !== null && this.partner !== undefined) {
    output.writeFieldBegin('partner', Thrift.Type.STRUCT, 1);
    this.partner.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CoresRegistry_SetNumberOfCores_args = function(args) {
  this.partner = null;
  this.numberOfCores = null;
  if (args) {
    if (args.partner !== undefined && args.partner !== null) {
      this.partner = args.partner;
    }
    if (args.numberOfCores !== undefined && args.numberOfCores !== null) {
      this.numberOfCores = args.numberOfCores;
    }
  }
};
CoresRegistry_SetNumberOfCores_args.prototype = {};
CoresRegistry_SetNumberOfCores_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.partner = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.numberOfCores = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CoresRegistry_SetNumberOfCores_args.prototype.write = function(output) {
  output.writeStructBegin('CoresRegistry_SetNumberOfCores_args');
  if (this.partner !== null && this.partner !== undefined) {
    output.writeFieldBegin('partner', Thrift.Type.I32, 1);
    output.writeI32(this.partner);
    output.writeFieldEnd();
  }
  if (this.numberOfCores !== null && this.numberOfCores !== undefined) {
    output.writeFieldBegin('numberOfCores', Thrift.Type.I32, 2);
    output.writeI32(this.numberOfCores);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CoresRegistry_SetNumberOfCores_result = function(args) {
  this.success = null;
  this.partner = null;
  if (args instanceof ttypes.UnknownPartner) {
    this.partner = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.CoreRange(args.success);
    }
    if (args.partner !== undefined && args.partner !== null) {
      this.partner = args.partner;
    }
  }
};
CoresRegistry_SetNumberOfCores_result.prototype = {};
CoresRegistry_SetNumberOfCores_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.CoreRange();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.partner = new ttypes.UnknownPartner();
        this.partner.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CoresRegistry_SetNumberOfCores_result.prototype.write = function(output) {
  output.writeStructBegin('CoresRegistry_SetNumberOfCores_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.partner !== null && this.partner !== undefined) {
    output.writeFieldBegin('partner', Thrift.Type.STRUCT, 1);
    this.partner.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CoresRegistry_ResetAfterDebugSession_args = function(args) {
};
CoresRegistry_ResetAfterDebugSession_args.prototype = {};
CoresRegistry_ResetAfterDebugSession_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CoresRegistry_ResetAfterDebugSession_args.prototype.write = function(output) {
  output.writeStructBegin('CoresRegistry_ResetAfterDebugSession_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CoresRegistry_ResetAfterDebugSession_result = function(args) {
};
CoresRegistry_ResetAfterDebugSession_result.prototype = {};
CoresRegistry_ResetAfterDebugSession_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CoresRegistry_ResetAfterDebugSession_result.prototype.write = function(output) {
  output.writeStructBegin('CoresRegistry_ResetAfterDebugSession_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CoresRegistryClient = exports.Client = function(input, output) {
  this.input = input;
  this.output = (!output) ? input : output;
  this.seqid = 0;
};
Thrift.inherits(CoresRegistryClient, HeartbeatServiceClient);

CoresRegistryClient.prototype.NumberOfCores = function(callback) {
  this.send_NumberOfCores(callback); 
  if (!callback) {
    return this.recv_NumberOfCores();
  }
};

CoresRegistryClient.prototype.send_NumberOfCores = function(callback) {
  var args = new CoresRegistry_NumberOfCores_args();
  try {
    this.output.writeMessageBegin('NumberOfCores', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_NumberOfCores();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

CoresRegistryClient.prototype.recv_NumberOfCores = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CoresRegistry_NumberOfCores_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'NumberOfCores failed: unknown result';
};

CoresRegistryClient.prototype.AllCores = function(callback) {
  this.send_AllCores(callback); 
  if (!callback) {
    return this.recv_AllCores();
  }
};

CoresRegistryClient.prototype.send_AllCores = function(callback) {
  var args = new CoresRegistry_AllCores_args();
  try {
    this.output.writeMessageBegin('AllCores', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_AllCores();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

CoresRegistryClient.prototype.recv_AllCores = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CoresRegistry_AllCores_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'AllCores failed: unknown result';
};

CoresRegistryClient.prototype.GetInfo = function(coreNumber, callback) {
  this.send_GetInfo(coreNumber, callback); 
  if (!callback) {
    return this.recv_GetInfo();
  }
};

CoresRegistryClient.prototype.send_GetInfo = function(coreNumber, callback) {
  var params = {
    coreNumber: coreNumber
  };
  var args = new CoresRegistry_GetInfo_args(params);
  try {
    this.output.writeMessageBegin('GetInfo', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_GetInfo();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

CoresRegistryClient.prototype.recv_GetInfo = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CoresRegistry_GetInfo_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.partner) {
    throw result.partner;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'GetInfo failed: unknown result';
};

CoresRegistryClient.prototype.SetInfo = function(updated, callback) {
  this.send_SetInfo(updated, callback); 
};

CoresRegistryClient.prototype.send_SetInfo = function(updated, callback) {
  var params = {
    updated: updated
  };
  var args = new CoresRegistry_SetInfo_args(params);
  try {
    this.output.writeMessageBegin('SetInfo', Thrift.MessageType.ONEWAY, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      this.output.getTransport().flush(true, null);
      callback();
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

CoresRegistryClient.prototype.SetInfoPartial = function(updated, props, callback) {
  this.send_SetInfoPartial(updated, props, callback); 
};

CoresRegistryClient.prototype.send_SetInfoPartial = function(updated, props, callback) {
  var params = {
    updated: updated,
    props: props
  };
  var args = new CoresRegistry_SetInfoPartial_args(params);
  try {
    this.output.writeMessageBegin('SetInfoPartial', Thrift.MessageType.ONEWAY, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      this.output.getTransport().flush(true, null);
      callback();
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

CoresRegistryClient.prototype.PartnerCores = function(partner, callback) {
  this.send_PartnerCores(partner, callback); 
  if (!callback) {
    return this.recv_PartnerCores();
  }
};

CoresRegistryClient.prototype.send_PartnerCores = function(partner, callback) {
  var params = {
    partner: partner
  };
  var args = new CoresRegistry_PartnerCores_args(params);
  try {
    this.output.writeMessageBegin('PartnerCores', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_PartnerCores();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

CoresRegistryClient.prototype.recv_PartnerCores = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CoresRegistry_PartnerCores_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.partner) {
    throw result.partner;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'PartnerCores failed: unknown result';
};

CoresRegistryClient.prototype.SetNumberOfCores = function(partner, numberOfCores, callback) {
  this.send_SetNumberOfCores(partner, numberOfCores, callback); 
  if (!callback) {
    return this.recv_SetNumberOfCores();
  }
};

CoresRegistryClient.prototype.send_SetNumberOfCores = function(partner, numberOfCores, callback) {
  var params = {
    partner: partner,
    numberOfCores: numberOfCores
  };
  var args = new CoresRegistry_SetNumberOfCores_args(params);
  try {
    this.output.writeMessageBegin('SetNumberOfCores', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_SetNumberOfCores();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

CoresRegistryClient.prototype.recv_SetNumberOfCores = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CoresRegistry_SetNumberOfCores_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.partner) {
    throw result.partner;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'SetNumberOfCores failed: unknown result';
};

CoresRegistryClient.prototype.ResetAfterDebugSession = function(callback) {
  this.send_ResetAfterDebugSession(callback); 
  if (!callback) {
  this.recv_ResetAfterDebugSession();
  }
};

CoresRegistryClient.prototype.send_ResetAfterDebugSession = function(callback) {
  var args = new CoresRegistry_ResetAfterDebugSession_args();
  try {
    this.output.writeMessageBegin('ResetAfterDebugSession', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_ResetAfterDebugSession();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

CoresRegistryClient.prototype.recv_ResetAfterDebugSession = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CoresRegistry_ResetAfterDebugSession_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};
