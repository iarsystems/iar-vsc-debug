//
// Autogenerated by Thrift Compiler (0.14.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//

import Int64 = require('node-int64');

import { ServiceRegistry } from "./ServiceRegistry_types";


export declare class Client {
  input: Thrift.TJSONProtocol;
  output: Thrift.TJSONProtocol;
  seqid: number;

  constructor(input: Thrift.TJSONProtocol, output?: Thrift.TJSONProtocol);

  waitForService(serviceName: string, timeout: number): Q.Promise<ServiceLocation>;

  waitForService(serviceName: string, timeout: number, callback?: (data: ServiceLocation)=>void): void;

  registerService(serviceName: string, location: ServiceLocation): Q.Promise<void>;

  registerService(serviceName: string, location: ServiceLocation, callback?: (data: void)=>void): void;

  deregisterService(serviceName: string): Q.Promise<void>;

  deregisterService(serviceName: string, callback?: (data: void)=>void): void;

  addServiceListener(filterRegex: string, serviceListenerId: string): Q.Promise<void>;

  addServiceListener(filterRegex: string, serviceListenerId: string, callback?: (data: void)=>void): void;

  removeServiceListener(serviceListenerId: string): Q.Promise<void>;

  removeServiceListener(serviceListenerId: string, callback?: (data: void)=>void): void;

  getServices(): Q.Promise<{ [k: string]: ServiceLocation; }>;

  getServices(callback?: (data: { [k: string]: ServiceLocation; })=>void): void;

  isAlive(): Q.Promise<void>;

  isAlive(callback?: (data: void)=>void): void;

  getSupportedTransports(): Q.Promise<Transport[]>;

  getSupportedTransports(callback?: (data: Transport[])=>void): void;

  createNamespace(name: string): Q.Promise<ServiceLocation>;

  createNamespace(name: string, callback?: (data: ServiceLocation)=>void): void;

  removeNamespace(name: string): Q.Promise<void>;

  removeNamespace(name: string, callback?: (data: void)=>void): void;

  getNamespaces(): Q.Promise<string[]>;

  getNamespaces(callback?: (data: string[])=>void): void;
}
