/// <reference path="HeartbeatService.d.ts" />
//
// Autogenerated by Thrift Compiler (0.14.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//

import Int64 = require('node-int64');

import { breakpoints } from "./breakpoints_types";


export declare class Client extends HeartbeatService.Client {
  input: Thrift.TJSONProtocol;
  output: Thrift.TJSONProtocol;
  seqid: number;

  constructor(input: Thrift.TJSONProtocol, output?: Thrift.TJSONProtocol);

  getBreakpoints(): Q.Promise<Breakpoint[]>;

  getBreakpoints(callback?: (data: Breakpoint[])=>void): void;

  getBreakpoint(id: number): Q.Promise<Breakpoint>;

  getBreakpoint(id: number, callback?: (data: Breakpoint)=>void): void;

  setBreakpointFromDescriptor(descriptor: string): Q.Promise<Breakpoint>;

  setBreakpointFromDescriptor(descriptor: string, callback?: (data: Breakpoint)=>void): void;

  setBreakpointOnUle(ule: string, accessType: AccessType): Q.Promise<Breakpoint>;

  setBreakpointOnUle(ule: string, accessType: AccessType, callback?: (data: Breakpoint)=>void): void;

  setBreakpointOnUleWithCategory(ule: string, accessType: AccessType, categoryId: string): Q.Promise<Breakpoint>;

  setBreakpointOnUleWithCategory(ule: string, accessType: AccessType, categoryId: string, callback?: (data: Breakpoint)=>void): void;

  enableBreakpoint(id: number, enable: boolean): Q.Promise<boolean>;

  enableBreakpoint(id: number, enable: boolean, callback?: (data: boolean)=>void): void;

  removeBreakpoint(id: number): Q.Promise<boolean>;

  removeBreakpoint(id: number, callback?: (data: boolean)=>void): void;

  getRecentlyHitBreakpoints(): Q.Promise<Breakpoint[]>;

  getRecentlyHitBreakpoints(callback?: (data: Breakpoint[])=>void): void;
}
