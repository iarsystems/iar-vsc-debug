//
// Autogenerated by Thrift Compiler (0.14.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
if (typeof Int64 === 'undefined' && typeof require === 'function') {
  var Int64 = require('node-int64');
}


//HELPER FUNCTIONS AND STRUCTURES

var ListWindowBackend_connect_args = function(args) {
  this.listener = null;
  if (args) {
    if (args.listener !== undefined && args.listener !== null) {
      this.listener = new ServiceRegistry_ttypes.ServiceLocation(args.listener);
    }
  }
};
ListWindowBackend_connect_args.prototype = {};
ListWindowBackend_connect_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.listener = new ServiceRegistry_ttypes.ServiceLocation();
        this.listener.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_connect_args.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_connect_args');
  if (this.listener !== null && this.listener !== undefined) {
    output.writeFieldBegin('listener', Thrift.Type.STRUCT, 1);
    this.listener.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_connect_result = function(args) {
};
ListWindowBackend_connect_result.prototype = {};
ListWindowBackend_connect_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_connect_result.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_connect_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_disconnect_args = function(args) {
};
ListWindowBackend_disconnect_args.prototype = {};
ListWindowBackend_disconnect_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_disconnect_args.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_disconnect_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_disconnect_result = function(args) {
};
ListWindowBackend_disconnect_result.prototype = {};
ListWindowBackend_disconnect_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_disconnect_result.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_disconnect_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_setContentStorageFile_args = function(args) {
  this.filename = null;
  if (args) {
    if (args.filename !== undefined && args.filename !== null) {
      this.filename = args.filename;
    }
  }
};
ListWindowBackend_setContentStorageFile_args.prototype = {};
ListWindowBackend_setContentStorageFile_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.filename = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_setContentStorageFile_args.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_setContentStorageFile_args');
  if (this.filename !== null && this.filename !== undefined) {
    output.writeFieldBegin('filename', Thrift.Type.STRING, 1);
    output.writeString(this.filename);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_setContentStorageFile_result = function(args) {
};
ListWindowBackend_setContentStorageFile_result.prototype = {};
ListWindowBackend_setContentStorageFile_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_setContentStorageFile_result.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_setContentStorageFile_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_getNumberOfRows_args = function(args) {
};
ListWindowBackend_getNumberOfRows_args.prototype = {};
ListWindowBackend_getNumberOfRows_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_getNumberOfRows_args.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_getNumberOfRows_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_getNumberOfRows_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
ListWindowBackend_getNumberOfRows_result.prototype = {};
ListWindowBackend_getNumberOfRows_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.I64) {
        this.success = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_getNumberOfRows_result.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_getNumberOfRows_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I64, 0);
    output.writeI64(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_getRow_args = function(args) {
  this.index = null;
  if (args) {
    if (args.index !== undefined && args.index !== null) {
      this.index = args.index;
    }
  }
};
ListWindowBackend_getRow_args.prototype = {};
ListWindowBackend_getRow_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.index = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_getRow_args.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_getRow_args');
  if (this.index !== null && this.index !== undefined) {
    output.writeFieldBegin('index', Thrift.Type.I64, 1);
    output.writeI64(this.index);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_getRow_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Row(args.success);
    }
  }
};
ListWindowBackend_getRow_result.prototype = {};
ListWindowBackend_getRow_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Row();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_getRow_result.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_getRow_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_setVisibleRows_args = function(args) {
  this.first = null;
  this.last = null;
  if (args) {
    if (args.first !== undefined && args.first !== null) {
      this.first = args.first;
    }
    if (args.last !== undefined && args.last !== null) {
      this.last = args.last;
    }
  }
};
ListWindowBackend_setVisibleRows_args.prototype = {};
ListWindowBackend_setVisibleRows_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.first = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.last = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_setVisibleRows_args.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_setVisibleRows_args');
  if (this.first !== null && this.first !== undefined) {
    output.writeFieldBegin('first', Thrift.Type.I64, 1);
    output.writeI64(this.first);
    output.writeFieldEnd();
  }
  if (this.last !== null && this.last !== undefined) {
    output.writeFieldBegin('last', Thrift.Type.I64, 2);
    output.writeI64(this.last);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_setVisibleRows_result = function(args) {
};
ListWindowBackend_setVisibleRows_result.prototype = {};
ListWindowBackend_setVisibleRows_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_setVisibleRows_result.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_setVisibleRows_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_show_args = function(args) {
  this.on = null;
  if (args) {
    if (args.on !== undefined && args.on !== null) {
      this.on = args.on;
    }
  }
};
ListWindowBackend_show_args.prototype = {};
ListWindowBackend_show_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.on = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_show_args.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_show_args');
  if (this.on !== null && this.on !== undefined) {
    output.writeFieldBegin('on', Thrift.Type.BOOL, 1);
    output.writeBool(this.on);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_show_result = function(args) {
};
ListWindowBackend_show_result.prototype = {};
ListWindowBackend_show_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_show_result.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_show_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_getColumnInfo_args = function(args) {
};
ListWindowBackend_getColumnInfo_args.prototype = {};
ListWindowBackend_getColumnInfo_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_getColumnInfo_args.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_getColumnInfo_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_getColumnInfo_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.Column]);
    }
  }
};
ListWindowBackend_getColumnInfo_result.prototype = {};
ListWindowBackend_getColumnInfo_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp341 = input.readListBegin();
        var _size40 = _rtmp341.size || 0;
        for (var _i42 = 0; _i42 < _size40; ++_i42) {
          var elem43 = null;
          elem43 = new ttypes.Column();
          elem43.read(input);
          this.success.push(elem43);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_getColumnInfo_result.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_getColumnInfo_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter44 in this.success) {
      if (this.success.hasOwnProperty(iter44)) {
        iter44 = this.success[iter44];
        iter44.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_getListSpec_args = function(args) {
};
ListWindowBackend_getListSpec_args.prototype = {};
ListWindowBackend_getListSpec_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_getListSpec_args.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_getListSpec_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_getListSpec_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.ListSpec(args.success);
    }
  }
};
ListWindowBackend_getListSpec_result.prototype = {};
ListWindowBackend_getListSpec_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ListSpec();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_getListSpec_result.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_getListSpec_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_toggleExpansion_args = function(args) {
  this.index = null;
  if (args) {
    if (args.index !== undefined && args.index !== null) {
      this.index = args.index;
    }
  }
};
ListWindowBackend_toggleExpansion_args.prototype = {};
ListWindowBackend_toggleExpansion_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.index = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_toggleExpansion_args.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_toggleExpansion_args');
  if (this.index !== null && this.index !== undefined) {
    output.writeFieldBegin('index', Thrift.Type.I64, 1);
    output.writeI64(this.index);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_toggleExpansion_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
ListWindowBackend_toggleExpansion_result.prototype = {};
ListWindowBackend_toggleExpansion_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_toggleExpansion_result.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_toggleExpansion_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_toggleCheckmark_args = function(args) {
  this.index = null;
  if (args) {
    if (args.index !== undefined && args.index !== null) {
      this.index = args.index;
    }
  }
};
ListWindowBackend_toggleCheckmark_args.prototype = {};
ListWindowBackend_toggleCheckmark_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.index = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_toggleCheckmark_args.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_toggleCheckmark_args');
  if (this.index !== null && this.index !== undefined) {
    output.writeFieldBegin('index', Thrift.Type.I64, 1);
    output.writeI64(this.index);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_toggleCheckmark_result = function(args) {
};
ListWindowBackend_toggleCheckmark_result.prototype = {};
ListWindowBackend_toggleCheckmark_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_toggleCheckmark_result.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_toggleCheckmark_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_getContextMenu_args = function(args) {
  this.row = null;
  this.col = null;
  if (args) {
    if (args.row !== undefined && args.row !== null) {
      this.row = args.row;
    }
    if (args.col !== undefined && args.col !== null) {
      this.col = args.col;
    }
  }
};
ListWindowBackend_getContextMenu_args.prototype = {};
ListWindowBackend_getContextMenu_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.row = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.col = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_getContextMenu_args.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_getContextMenu_args');
  if (this.row !== null && this.row !== undefined) {
    output.writeFieldBegin('row', Thrift.Type.I64, 1);
    output.writeI64(this.row);
    output.writeFieldEnd();
  }
  if (this.col !== null && this.col !== undefined) {
    output.writeFieldBegin('col', Thrift.Type.I32, 2);
    output.writeI32(this.col);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_getContextMenu_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.MenuItem]);
    }
  }
};
ListWindowBackend_getContextMenu_result.prototype = {};
ListWindowBackend_getContextMenu_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp346 = input.readListBegin();
        var _size45 = _rtmp346.size || 0;
        for (var _i47 = 0; _i47 < _size45; ++_i47) {
          var elem48 = null;
          elem48 = new ttypes.MenuItem();
          elem48.read(input);
          this.success.push(elem48);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_getContextMenu_result.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_getContextMenu_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter49 in this.success) {
      if (this.success.hasOwnProperty(iter49)) {
        iter49 = this.success[iter49];
        iter49.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_handleContextMenu_args = function(args) {
  this.command = null;
  if (args) {
    if (args.command !== undefined && args.command !== null) {
      this.command = args.command;
    }
  }
};
ListWindowBackend_handleContextMenu_args.prototype = {};
ListWindowBackend_handleContextMenu_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.command = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_handleContextMenu_args.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_handleContextMenu_args');
  if (this.command !== null && this.command !== undefined) {
    output.writeFieldBegin('command', Thrift.Type.I32, 1);
    output.writeI32(this.command);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_handleContextMenu_result = function(args) {
};
ListWindowBackend_handleContextMenu_result.prototype = {};
ListWindowBackend_handleContextMenu_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_handleContextMenu_result.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_handleContextMenu_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_getDisplayName_args = function(args) {
};
ListWindowBackend_getDisplayName_args.prototype = {};
ListWindowBackend_getDisplayName_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_getDisplayName_args.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_getDisplayName_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_getDisplayName_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
ListWindowBackend_getDisplayName_result.prototype = {};
ListWindowBackend_getDisplayName_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_getDisplayName_result.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_getDisplayName_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_scroll_args = function(args) {
  this.op = null;
  this.first = null;
  this.last = null;
  if (args) {
    if (args.op !== undefined && args.op !== null) {
      this.op = args.op;
    }
    if (args.first !== undefined && args.first !== null) {
      this.first = args.first;
    }
    if (args.last !== undefined && args.last !== null) {
      this.last = args.last;
    }
  }
};
ListWindowBackend_scroll_args.prototype = {};
ListWindowBackend_scroll_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.op = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.first = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.last = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_scroll_args.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_scroll_args');
  if (this.op !== null && this.op !== undefined) {
    output.writeFieldBegin('op', Thrift.Type.I32, 1);
    output.writeI32(this.op);
    output.writeFieldEnd();
  }
  if (this.first !== null && this.first !== undefined) {
    output.writeFieldBegin('first', Thrift.Type.I64, 2);
    output.writeI64(this.first);
    output.writeFieldEnd();
  }
  if (this.last !== null && this.last !== undefined) {
    output.writeFieldBegin('last', Thrift.Type.I64, 3);
    output.writeI64(this.last);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_scroll_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
ListWindowBackend_scroll_result.prototype = {};
ListWindowBackend_scroll_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.I64) {
        this.success = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_scroll_result.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_scroll_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I64, 0);
    output.writeI64(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_click_args = function(args) {
  this.row = null;
  this.col = null;
  this.flag = null;
  if (args) {
    if (args.row !== undefined && args.row !== null) {
      this.row = args.row;
    }
    if (args.col !== undefined && args.col !== null) {
      this.col = args.col;
    }
    if (args.flag !== undefined && args.flag !== null) {
      this.flag = args.flag;
    }
  }
};
ListWindowBackend_click_args.prototype = {};
ListWindowBackend_click_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.row = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.col = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.flag = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_click_args.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_click_args');
  if (this.row !== null && this.row !== undefined) {
    output.writeFieldBegin('row', Thrift.Type.I64, 1);
    output.writeI64(this.row);
    output.writeFieldEnd();
  }
  if (this.col !== null && this.col !== undefined) {
    output.writeFieldBegin('col', Thrift.Type.I32, 2);
    output.writeI32(this.col);
    output.writeFieldEnd();
  }
  if (this.flag !== null && this.flag !== undefined) {
    output.writeFieldBegin('flag', Thrift.Type.I32, 3);
    output.writeI32(this.flag);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_click_result = function(args) {
};
ListWindowBackend_click_result.prototype = {};
ListWindowBackend_click_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_click_result.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_click_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_doubleClick_args = function(args) {
  this.row = null;
  this.col = null;
  if (args) {
    if (args.row !== undefined && args.row !== null) {
      this.row = args.row;
    }
    if (args.col !== undefined && args.col !== null) {
      this.col = args.col;
    }
  }
};
ListWindowBackend_doubleClick_args.prototype = {};
ListWindowBackend_doubleClick_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.row = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.col = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_doubleClick_args.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_doubleClick_args');
  if (this.row !== null && this.row !== undefined) {
    output.writeFieldBegin('row', Thrift.Type.I64, 1);
    output.writeI64(this.row);
    output.writeFieldEnd();
  }
  if (this.col !== null && this.col !== undefined) {
    output.writeFieldBegin('col', Thrift.Type.I32, 2);
    output.writeI32(this.col);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_doubleClick_result = function(args) {
};
ListWindowBackend_doubleClick_result.prototype = {};
ListWindowBackend_doubleClick_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_doubleClick_result.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_doubleClick_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_getEditableString_args = function(args) {
  this.row = null;
  this.col = null;
  if (args) {
    if (args.row !== undefined && args.row !== null) {
      this.row = args.row;
    }
    if (args.col !== undefined && args.col !== null) {
      this.col = args.col;
    }
  }
};
ListWindowBackend_getEditableString_args.prototype = {};
ListWindowBackend_getEditableString_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.row = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.col = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_getEditableString_args.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_getEditableString_args');
  if (this.row !== null && this.row !== undefined) {
    output.writeFieldBegin('row', Thrift.Type.I64, 1);
    output.writeI64(this.row);
    output.writeFieldEnd();
  }
  if (this.col !== null && this.col !== undefined) {
    output.writeFieldBegin('col', Thrift.Type.I32, 2);
    output.writeI32(this.col);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_getEditableString_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.EditInfo(args.success);
    }
  }
};
ListWindowBackend_getEditableString_result.prototype = {};
ListWindowBackend_getEditableString_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.EditInfo();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_getEditableString_result.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_getEditableString_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_setValue_args = function(args) {
  this.row = null;
  this.col = null;
  this.value = null;
  if (args) {
    if (args.row !== undefined && args.row !== null) {
      this.row = args.row;
    }
    if (args.col !== undefined && args.col !== null) {
      this.col = args.col;
    }
    if (args.value !== undefined && args.value !== null) {
      this.value = args.value;
    }
  }
};
ListWindowBackend_setValue_args.prototype = {};
ListWindowBackend_setValue_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.row = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.col = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.value = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_setValue_args.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_setValue_args');
  if (this.row !== null && this.row !== undefined) {
    output.writeFieldBegin('row', Thrift.Type.I64, 1);
    output.writeI64(this.row);
    output.writeFieldEnd();
  }
  if (this.col !== null && this.col !== undefined) {
    output.writeFieldBegin('col', Thrift.Type.I32, 2);
    output.writeI32(this.col);
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.STRING, 3);
    output.writeString(this.value);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_setValue_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
ListWindowBackend_setValue_result.prototype = {};
ListWindowBackend_setValue_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_setValue_result.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_setValue_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_getSelection_args = function(args) {
};
ListWindowBackend_getSelection_args.prototype = {};
ListWindowBackend_getSelection_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_getSelection_args.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_getSelection_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_getSelection_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.SelRange]);
    }
  }
};
ListWindowBackend_getSelection_result.prototype = {};
ListWindowBackend_getSelection_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp351 = input.readListBegin();
        var _size50 = _rtmp351.size || 0;
        for (var _i52 = 0; _i52 < _size50; ++_i52) {
          var elem53 = null;
          elem53 = new ttypes.SelRange();
          elem53.read(input);
          this.success.push(elem53);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_getSelection_result.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_getSelection_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter54 in this.success) {
      if (this.success.hasOwnProperty(iter54)) {
        iter54 = this.success[iter54];
        iter54.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_getToolTip_args = function(args) {
  this.row = null;
  this.col = null;
  this.pos = null;
  if (args) {
    if (args.row !== undefined && args.row !== null) {
      this.row = args.row;
    }
    if (args.col !== undefined && args.col !== null) {
      this.col = args.col;
    }
    if (args.pos !== undefined && args.pos !== null) {
      this.pos = args.pos;
    }
  }
};
ListWindowBackend_getToolTip_args.prototype = {};
ListWindowBackend_getToolTip_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.row = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.col = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.pos = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_getToolTip_args.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_getToolTip_args');
  if (this.row !== null && this.row !== undefined) {
    output.writeFieldBegin('row', Thrift.Type.I64, 1);
    output.writeI64(this.row);
    output.writeFieldEnd();
  }
  if (this.col !== null && this.col !== undefined) {
    output.writeFieldBegin('col', Thrift.Type.I32, 2);
    output.writeI32(this.col);
    output.writeFieldEnd();
  }
  if (this.pos !== null && this.pos !== undefined) {
    output.writeFieldBegin('pos', Thrift.Type.I32, 3);
    output.writeI32(this.pos);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_getToolTip_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Tooltip(args.success);
    }
  }
};
ListWindowBackend_getToolTip_result.prototype = {};
ListWindowBackend_getToolTip_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Tooltip();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_getToolTip_result.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_getToolTip_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_drop_args = function(args) {
  this.row = null;
  this.col = null;
  this.text = null;
  if (args) {
    if (args.row !== undefined && args.row !== null) {
      this.row = args.row;
    }
    if (args.col !== undefined && args.col !== null) {
      this.col = args.col;
    }
    if (args.text !== undefined && args.text !== null) {
      this.text = args.text;
    }
  }
};
ListWindowBackend_drop_args.prototype = {};
ListWindowBackend_drop_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.row = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.col = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.text = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_drop_args.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_drop_args');
  if (this.row !== null && this.row !== undefined) {
    output.writeFieldBegin('row', Thrift.Type.I64, 1);
    output.writeI64(this.row);
    output.writeFieldEnd();
  }
  if (this.col !== null && this.col !== undefined) {
    output.writeFieldBegin('col', Thrift.Type.I32, 2);
    output.writeI32(this.col);
    output.writeFieldEnd();
  }
  if (this.text !== null && this.text !== undefined) {
    output.writeFieldBegin('text', Thrift.Type.STRING, 3);
    output.writeString(this.text);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_drop_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
ListWindowBackend_drop_result.prototype = {};
ListWindowBackend_drop_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_drop_result.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_drop_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_dropLocal_args = function(args) {
  this.row = null;
  this.col = null;
  this.text = null;
  this.srcRow = null;
  this.srcCol = null;
  if (args) {
    if (args.row !== undefined && args.row !== null) {
      this.row = args.row;
    }
    if (args.col !== undefined && args.col !== null) {
      this.col = args.col;
    }
    if (args.text !== undefined && args.text !== null) {
      this.text = args.text;
    }
    if (args.srcRow !== undefined && args.srcRow !== null) {
      this.srcRow = args.srcRow;
    }
    if (args.srcCol !== undefined && args.srcCol !== null) {
      this.srcCol = args.srcCol;
    }
  }
};
ListWindowBackend_dropLocal_args.prototype = {};
ListWindowBackend_dropLocal_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.row = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.col = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.text = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.srcRow = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.srcCol = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_dropLocal_args.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_dropLocal_args');
  if (this.row !== null && this.row !== undefined) {
    output.writeFieldBegin('row', Thrift.Type.I64, 1);
    output.writeI64(this.row);
    output.writeFieldEnd();
  }
  if (this.col !== null && this.col !== undefined) {
    output.writeFieldBegin('col', Thrift.Type.I32, 2);
    output.writeI32(this.col);
    output.writeFieldEnd();
  }
  if (this.text !== null && this.text !== undefined) {
    output.writeFieldBegin('text', Thrift.Type.STRING, 3);
    output.writeString(this.text);
    output.writeFieldEnd();
  }
  if (this.srcRow !== null && this.srcRow !== undefined) {
    output.writeFieldBegin('srcRow', Thrift.Type.I64, 4);
    output.writeI64(this.srcRow);
    output.writeFieldEnd();
  }
  if (this.srcCol !== null && this.srcCol !== undefined) {
    output.writeFieldBegin('srcCol', Thrift.Type.I32, 5);
    output.writeI32(this.srcCol);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_dropLocal_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
ListWindowBackend_dropLocal_result.prototype = {};
ListWindowBackend_dropLocal_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_dropLocal_result.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_dropLocal_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_getDrag_args = function(args) {
  this.row = null;
  this.col = null;
  if (args) {
    if (args.row !== undefined && args.row !== null) {
      this.row = args.row;
    }
    if (args.col !== undefined && args.col !== null) {
      this.col = args.col;
    }
  }
};
ListWindowBackend_getDrag_args.prototype = {};
ListWindowBackend_getDrag_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.row = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.col = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_getDrag_args.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_getDrag_args');
  if (this.row !== null && this.row !== undefined) {
    output.writeFieldBegin('row', Thrift.Type.I64, 1);
    output.writeI64(this.row);
    output.writeFieldEnd();
  }
  if (this.col !== null && this.col !== undefined) {
    output.writeFieldBegin('col', Thrift.Type.I32, 2);
    output.writeI32(this.col);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_getDrag_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Drag(args.success);
    }
  }
};
ListWindowBackend_getDrag_result.prototype = {};
ListWindowBackend_getDrag_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Drag();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_getDrag_result.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_getDrag_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_getHelpTag_args = function(args) {
};
ListWindowBackend_getHelpTag_args.prototype = {};
ListWindowBackend_getHelpTag_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_getHelpTag_args.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_getHelpTag_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_getHelpTag_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.HelpTag(args.success);
    }
  }
};
ListWindowBackend_getHelpTag_result.prototype = {};
ListWindowBackend_getHelpTag_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.HelpTag();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_getHelpTag_result.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_getHelpTag_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_columnClick_args = function(args) {
  this.col = null;
  if (args) {
    if (args.col !== undefined && args.col !== null) {
      this.col = args.col;
    }
  }
};
ListWindowBackend_columnClick_args.prototype = {};
ListWindowBackend_columnClick_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.col = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_columnClick_args.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_columnClick_args');
  if (this.col !== null && this.col !== undefined) {
    output.writeFieldBegin('col', Thrift.Type.I32, 1);
    output.writeI32(this.col);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_columnClick_result = function(args) {
};
ListWindowBackend_columnClick_result.prototype = {};
ListWindowBackend_columnClick_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_columnClick_result.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_columnClick_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_handleChar_args = function(args) {
  this.c = null;
  this.repeat = null;
  if (args) {
    if (args.c !== undefined && args.c !== null) {
      this.c = args.c;
    }
    if (args.repeat !== undefined && args.repeat !== null) {
      this.repeat = args.repeat;
    }
  }
};
ListWindowBackend_handleChar_args.prototype = {};
ListWindowBackend_handleChar_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.c = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.repeat = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_handleChar_args.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_handleChar_args');
  if (this.c !== null && this.c !== undefined) {
    output.writeFieldBegin('c', Thrift.Type.I32, 1);
    output.writeI32(this.c);
    output.writeFieldEnd();
  }
  if (this.repeat !== null && this.repeat !== undefined) {
    output.writeFieldBegin('repeat', Thrift.Type.I32, 2);
    output.writeI32(this.repeat);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_handleChar_result = function(args) {
};
ListWindowBackend_handleChar_result.prototype = {};
ListWindowBackend_handleChar_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_handleChar_result.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_handleChar_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_handleKeyDown_args = function(args) {
  this.c = null;
  this.repeat = null;
  this.shift = null;
  this.ctrl = null;
  if (args) {
    if (args.c !== undefined && args.c !== null) {
      this.c = args.c;
    }
    if (args.repeat !== undefined && args.repeat !== null) {
      this.repeat = args.repeat;
    }
    if (args.shift !== undefined && args.shift !== null) {
      this.shift = args.shift;
    }
    if (args.ctrl !== undefined && args.ctrl !== null) {
      this.ctrl = args.ctrl;
    }
  }
};
ListWindowBackend_handleKeyDown_args.prototype = {};
ListWindowBackend_handleKeyDown_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.c = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.repeat = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.shift = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.ctrl = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_handleKeyDown_args.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_handleKeyDown_args');
  if (this.c !== null && this.c !== undefined) {
    output.writeFieldBegin('c', Thrift.Type.I32, 1);
    output.writeI32(this.c);
    output.writeFieldEnd();
  }
  if (this.repeat !== null && this.repeat !== undefined) {
    output.writeFieldBegin('repeat', Thrift.Type.I32, 2);
    output.writeI32(this.repeat);
    output.writeFieldEnd();
  }
  if (this.shift !== null && this.shift !== undefined) {
    output.writeFieldBegin('shift', Thrift.Type.BOOL, 3);
    output.writeBool(this.shift);
    output.writeFieldEnd();
  }
  if (this.ctrl !== null && this.ctrl !== undefined) {
    output.writeFieldBegin('ctrl', Thrift.Type.BOOL, 4);
    output.writeBool(this.ctrl);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_handleKeyDown_result = function(args) {
};
ListWindowBackend_handleKeyDown_result.prototype = {};
ListWindowBackend_handleKeyDown_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_handleKeyDown_result.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_handleKeyDown_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_keyNavigate_args = function(args) {
  this.op = null;
  this.repeat = null;
  this.flags = null;
  this.rowsInPage = null;
  if (args) {
    if (args.op !== undefined && args.op !== null) {
      this.op = args.op;
    }
    if (args.repeat !== undefined && args.repeat !== null) {
      this.repeat = args.repeat;
    }
    if (args.flags !== undefined && args.flags !== null) {
      this.flags = args.flags;
    }
    if (args.rowsInPage !== undefined && args.rowsInPage !== null) {
      this.rowsInPage = args.rowsInPage;
    }
  }
};
ListWindowBackend_keyNavigate_args.prototype = {};
ListWindowBackend_keyNavigate_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.op = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.repeat = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.flags = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.rowsInPage = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_keyNavigate_args.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_keyNavigate_args');
  if (this.op !== null && this.op !== undefined) {
    output.writeFieldBegin('op', Thrift.Type.I32, 1);
    output.writeI32(this.op);
    output.writeFieldEnd();
  }
  if (this.repeat !== null && this.repeat !== undefined) {
    output.writeFieldBegin('repeat', Thrift.Type.I32, 2);
    output.writeI32(this.repeat);
    output.writeFieldEnd();
  }
  if (this.flags !== null && this.flags !== undefined) {
    output.writeFieldBegin('flags', Thrift.Type.I32, 3);
    output.writeI32(this.flags);
    output.writeFieldEnd();
  }
  if (this.rowsInPage !== null && this.rowsInPage !== undefined) {
    output.writeFieldBegin('rowsInPage', Thrift.Type.I32, 4);
    output.writeI32(this.rowsInPage);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_keyNavigate_result = function(args) {
};
ListWindowBackend_keyNavigate_result.prototype = {};
ListWindowBackend_keyNavigate_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_keyNavigate_result.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_keyNavigate_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_toggleMoreOrLess_args = function(args) {
  this.row = null;
  if (args) {
    if (args.row !== undefined && args.row !== null) {
      this.row = args.row;
    }
  }
};
ListWindowBackend_toggleMoreOrLess_args.prototype = {};
ListWindowBackend_toggleMoreOrLess_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.row = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_toggleMoreOrLess_args.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_toggleMoreOrLess_args');
  if (this.row !== null && this.row !== undefined) {
    output.writeFieldBegin('row', Thrift.Type.I64, 1);
    output.writeI64(this.row);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_toggleMoreOrLess_result = function(args) {
};
ListWindowBackend_toggleMoreOrLess_result.prototype = {};
ListWindowBackend_toggleMoreOrLess_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_toggleMoreOrLess_result.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_toggleMoreOrLess_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_dropOutsideContent_args = function(args) {
};
ListWindowBackend_dropOutsideContent_args.prototype = {};
ListWindowBackend_dropOutsideContent_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_dropOutsideContent_args.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_dropOutsideContent_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_dropOutsideContent_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
ListWindowBackend_dropOutsideContent_result.prototype = {};
ListWindowBackend_dropOutsideContent_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_dropOutsideContent_result.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_dropOutsideContent_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_isSliding_args = function(args) {
};
ListWindowBackend_isSliding_args.prototype = {};
ListWindowBackend_isSliding_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_isSliding_args.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_isSliding_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_isSliding_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
ListWindowBackend_isSliding_result.prototype = {};
ListWindowBackend_isSliding_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_isSliding_result.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_isSliding_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_getChunkInfo_args = function(args) {
};
ListWindowBackend_getChunkInfo_args.prototype = {};
ListWindowBackend_getChunkInfo_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_getChunkInfo_args.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_getChunkInfo_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_getChunkInfo_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.ChunkInfo(args.success);
    }
  }
};
ListWindowBackend_getChunkInfo_result.prototype = {};
ListWindowBackend_getChunkInfo_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ChunkInfo();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_getChunkInfo_result.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_getChunkInfo_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_addAfter_args = function(args) {
  this.minToAdd = null;
  this.maxToTrim = null;
  if (args) {
    if (args.minToAdd !== undefined && args.minToAdd !== null) {
      this.minToAdd = args.minToAdd;
    }
    if (args.maxToTrim !== undefined && args.maxToTrim !== null) {
      this.maxToTrim = args.maxToTrim;
    }
  }
};
ListWindowBackend_addAfter_args.prototype = {};
ListWindowBackend_addAfter_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.minToAdd = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.maxToTrim = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_addAfter_args.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_addAfter_args');
  if (this.minToAdd !== null && this.minToAdd !== undefined) {
    output.writeFieldBegin('minToAdd', Thrift.Type.I32, 1);
    output.writeI32(this.minToAdd);
    output.writeFieldEnd();
  }
  if (this.maxToTrim !== null && this.maxToTrim !== undefined) {
    output.writeFieldBegin('maxToTrim', Thrift.Type.I32, 2);
    output.writeI32(this.maxToTrim);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_addAfter_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.AddRowsResult(args.success);
    }
  }
};
ListWindowBackend_addAfter_result.prototype = {};
ListWindowBackend_addAfter_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.AddRowsResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_addAfter_result.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_addAfter_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_addBefore_args = function(args) {
  this.minToAdd = null;
  this.maxToTrim = null;
  if (args) {
    if (args.minToAdd !== undefined && args.minToAdd !== null) {
      this.minToAdd = args.minToAdd;
    }
    if (args.maxToTrim !== undefined && args.maxToTrim !== null) {
      this.maxToTrim = args.maxToTrim;
    }
  }
};
ListWindowBackend_addBefore_args.prototype = {};
ListWindowBackend_addBefore_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.minToAdd = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.maxToTrim = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_addBefore_args.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_addBefore_args');
  if (this.minToAdd !== null && this.minToAdd !== undefined) {
    output.writeFieldBegin('minToAdd', Thrift.Type.I32, 1);
    output.writeI32(this.minToAdd);
    output.writeFieldEnd();
  }
  if (this.maxToTrim !== null && this.maxToTrim !== undefined) {
    output.writeFieldBegin('maxToTrim', Thrift.Type.I32, 2);
    output.writeI32(this.maxToTrim);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_addBefore_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.AddRowsResult(args.success);
    }
  }
};
ListWindowBackend_addBefore_result.prototype = {};
ListWindowBackend_addBefore_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.AddRowsResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_addBefore_result.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_addBefore_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_navigateToFraction_args = function(args) {
  this.fraction = null;
  this.chunkPos = null;
  this.minLines = null;
  if (args) {
    if (args.fraction !== undefined && args.fraction !== null) {
      this.fraction = args.fraction;
    }
    if (args.chunkPos !== undefined && args.chunkPos !== null) {
      this.chunkPos = args.chunkPos;
    }
    if (args.minLines !== undefined && args.minLines !== null) {
      this.minLines = args.minLines;
    }
  }
};
ListWindowBackend_navigateToFraction_args.prototype = {};
ListWindowBackend_navigateToFraction_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.DOUBLE) {
        this.fraction = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.chunkPos = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.minLines = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_navigateToFraction_args.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_navigateToFraction_args');
  if (this.fraction !== null && this.fraction !== undefined) {
    output.writeFieldBegin('fraction', Thrift.Type.DOUBLE, 1);
    output.writeDouble(this.fraction);
    output.writeFieldEnd();
  }
  if (this.chunkPos !== null && this.chunkPos !== undefined) {
    output.writeFieldBegin('chunkPos', Thrift.Type.I32, 3);
    output.writeI32(this.chunkPos);
    output.writeFieldEnd();
  }
  if (this.minLines !== null && this.minLines !== undefined) {
    output.writeFieldBegin('minLines', Thrift.Type.I32, 2);
    output.writeI32(this.minLines);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_navigateToFraction_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.NavigateResult(args.success);
    }
  }
};
ListWindowBackend_navigateToFraction_result.prototype = {};
ListWindowBackend_navigateToFraction_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.NavigateResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_navigateToFraction_result.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_navigateToFraction_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_navigateTo_args = function(args) {
  this.toWhat = null;
  this.chunkPos = null;
  this.minLines = null;
  if (args) {
    if (args.toWhat !== undefined && args.toWhat !== null) {
      this.toWhat = args.toWhat;
    }
    if (args.chunkPos !== undefined && args.chunkPos !== null) {
      this.chunkPos = args.chunkPos;
    }
    if (args.minLines !== undefined && args.minLines !== null) {
      this.minLines = args.minLines;
    }
  }
};
ListWindowBackend_navigateTo_args.prototype = {};
ListWindowBackend_navigateTo_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.toWhat = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.chunkPos = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.minLines = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_navigateTo_args.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_navigateTo_args');
  if (this.toWhat !== null && this.toWhat !== undefined) {
    output.writeFieldBegin('toWhat', Thrift.Type.STRING, 1);
    output.writeString(this.toWhat);
    output.writeFieldEnd();
  }
  if (this.chunkPos !== null && this.chunkPos !== undefined) {
    output.writeFieldBegin('chunkPos', Thrift.Type.I32, 3);
    output.writeI32(this.chunkPos);
    output.writeFieldEnd();
  }
  if (this.minLines !== null && this.minLines !== undefined) {
    output.writeFieldBegin('minLines', Thrift.Type.I32, 2);
    output.writeI32(this.minLines);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_navigateTo_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.NavigateResult(args.success);
    }
  }
};
ListWindowBackend_navigateTo_result.prototype = {};
ListWindowBackend_navigateTo_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.NavigateResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_navigateTo_result.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_navigateTo_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_getSel_args = function(args) {
};
ListWindowBackend_getSel_args.prototype = {};
ListWindowBackend_getSel_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_getSel_args.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_getSel_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_getSel_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.SelectionResult(args.success);
    }
  }
};
ListWindowBackend_getSel_result.prototype = {};
ListWindowBackend_getSel_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.SelectionResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_getSel_result.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_getSel_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_setSel_args = function(args) {
  this.row = null;
  if (args) {
    if (args.row !== undefined && args.row !== null) {
      this.row = args.row;
    }
  }
};
ListWindowBackend_setSel_args.prototype = {};
ListWindowBackend_setSel_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.row = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_setSel_args.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_setSel_args');
  if (this.row !== null && this.row !== undefined) {
    output.writeFieldBegin('row', Thrift.Type.I32, 1);
    output.writeI32(this.row);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_setSel_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.SelectionResult(args.success);
    }
  }
};
ListWindowBackend_setSel_result.prototype = {};
ListWindowBackend_setSel_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.SelectionResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_setSel_result.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_setSel_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_keyNav_args = function(args) {
  this.op = null;
  this.repeat = null;
  this.rowsInPage = null;
  if (args) {
    if (args.op !== undefined && args.op !== null) {
      this.op = args.op;
    }
    if (args.repeat !== undefined && args.repeat !== null) {
      this.repeat = args.repeat;
    }
    if (args.rowsInPage !== undefined && args.rowsInPage !== null) {
      this.rowsInPage = args.rowsInPage;
    }
  }
};
ListWindowBackend_keyNav_args.prototype = {};
ListWindowBackend_keyNav_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.op = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.repeat = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.rowsInPage = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_keyNav_args.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_keyNav_args');
  if (this.op !== null && this.op !== undefined) {
    output.writeFieldBegin('op', Thrift.Type.I32, 1);
    output.writeI32(this.op);
    output.writeFieldEnd();
  }
  if (this.repeat !== null && this.repeat !== undefined) {
    output.writeFieldBegin('repeat', Thrift.Type.I32, 2);
    output.writeI32(this.repeat);
    output.writeFieldEnd();
  }
  if (this.rowsInPage !== null && this.rowsInPage !== undefined) {
    output.writeFieldBegin('rowsInPage', Thrift.Type.I32, 3);
    output.writeI32(this.rowsInPage);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_keyNav_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
ListWindowBackend_keyNav_result.prototype = {};
ListWindowBackend_keyNav_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_keyNav_result.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_keyNav_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_getToolbarDefinition_args = function(args) {
};
ListWindowBackend_getToolbarDefinition_args.prototype = {};
ListWindowBackend_getToolbarDefinition_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_getToolbarDefinition_args.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_getToolbarDefinition_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_getToolbarDefinition_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
ListWindowBackend_getToolbarDefinition_result.prototype = {};
ListWindowBackend_getToolbarDefinition_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_getToolbarDefinition_result.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_getToolbarDefinition_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_setToolbarItemValue_args = function(args) {
  this.id = null;
  this.property = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.property !== undefined && args.property !== null) {
      this.property = args.property;
    }
  }
};
ListWindowBackend_setToolbarItemValue_args.prototype = {};
ListWindowBackend_setToolbarItemValue_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.property = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_setToolbarItemValue_args.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_setToolbarItemValue_args');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.property !== null && this.property !== undefined) {
    output.writeFieldBegin('property', Thrift.Type.STRING, 2);
    output.writeString(this.property);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_setToolbarItemValue_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
ListWindowBackend_setToolbarItemValue_result.prototype = {};
ListWindowBackend_setToolbarItemValue_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_setToolbarItemValue_result.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_setToolbarItemValue_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_getToolbarItemValue_args = function(args) {
  this.id = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
  }
};
ListWindowBackend_getToolbarItemValue_args.prototype = {};
ListWindowBackend_getToolbarItemValue_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_getToolbarItemValue_args.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_getToolbarItemValue_args');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_getToolbarItemValue_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
ListWindowBackend_getToolbarItemValue_result.prototype = {};
ListWindowBackend_getToolbarItemValue_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_getToolbarItemValue_result.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_getToolbarItemValue_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_getToolbarItemState_args = function(args) {
  this.id = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
  }
};
ListWindowBackend_getToolbarItemState_args.prototype = {};
ListWindowBackend_getToolbarItemState_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_getToolbarItemState_args.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_getToolbarItemState_args');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_getToolbarItemState_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.ToolbarItemState(args.success);
    }
  }
};
ListWindowBackend_getToolbarItemState_result.prototype = {};
ListWindowBackend_getToolbarItemState_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ToolbarItemState();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_getToolbarItemState_result.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_getToolbarItemState_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_getToolbarItemTooltip_args = function(args) {
  this.id = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
  }
};
ListWindowBackend_getToolbarItemTooltip_args.prototype = {};
ListWindowBackend_getToolbarItemTooltip_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_getToolbarItemTooltip_args.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_getToolbarItemTooltip_args');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackend_getToolbarItemTooltip_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
ListWindowBackend_getToolbarItemTooltip_result.prototype = {};
ListWindowBackend_getToolbarItemTooltip_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowBackend_getToolbarItemTooltip_result.prototype.write = function(output) {
  output.writeStructBegin('ListWindowBackend_getToolbarItemTooltip_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowBackendClient = exports.Client = function(input, output) {
  this.input = input;
  this.output = (!output) ? input : output;
  this.seqid = 0;
};
Thrift.inherits(ListWindowBackendClient, HeartbeatServiceClient);

ListWindowBackendClient.prototype.connect = function(listener, callback) {
  this.send_connect(listener, callback); 
  if (!callback) {
  this.recv_connect();
  }
};

ListWindowBackendClient.prototype.send_connect = function(listener, callback) {
  var params = {
    listener: listener
  };
  var args = new ListWindowBackend_connect_args(params);
  try {
    this.output.writeMessageBegin('connect', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_connect();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ListWindowBackendClient.prototype.recv_connect = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ListWindowBackend_connect_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};

ListWindowBackendClient.prototype.disconnect = function(callback) {
  this.send_disconnect(callback); 
  if (!callback) {
  this.recv_disconnect();
  }
};

ListWindowBackendClient.prototype.send_disconnect = function(callback) {
  var args = new ListWindowBackend_disconnect_args();
  try {
    this.output.writeMessageBegin('disconnect', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_disconnect();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ListWindowBackendClient.prototype.recv_disconnect = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ListWindowBackend_disconnect_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};

ListWindowBackendClient.prototype.setContentStorageFile = function(filename, callback) {
  this.send_setContentStorageFile(filename, callback); 
  if (!callback) {
  this.recv_setContentStorageFile();
  }
};

ListWindowBackendClient.prototype.send_setContentStorageFile = function(filename, callback) {
  var params = {
    filename: filename
  };
  var args = new ListWindowBackend_setContentStorageFile_args(params);
  try {
    this.output.writeMessageBegin('setContentStorageFile', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_setContentStorageFile();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ListWindowBackendClient.prototype.recv_setContentStorageFile = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ListWindowBackend_setContentStorageFile_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};

ListWindowBackendClient.prototype.getNumberOfRows = function(callback) {
  this.send_getNumberOfRows(callback); 
  if (!callback) {
    return this.recv_getNumberOfRows();
  }
};

ListWindowBackendClient.prototype.send_getNumberOfRows = function(callback) {
  var args = new ListWindowBackend_getNumberOfRows_args();
  try {
    this.output.writeMessageBegin('getNumberOfRows', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_getNumberOfRows();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ListWindowBackendClient.prototype.recv_getNumberOfRows = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ListWindowBackend_getNumberOfRows_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getNumberOfRows failed: unknown result';
};

ListWindowBackendClient.prototype.getRow = function(index, callback) {
  this.send_getRow(index, callback); 
  if (!callback) {
    return this.recv_getRow();
  }
};

ListWindowBackendClient.prototype.send_getRow = function(index, callback) {
  var params = {
    index: index
  };
  var args = new ListWindowBackend_getRow_args(params);
  try {
    this.output.writeMessageBegin('getRow', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_getRow();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ListWindowBackendClient.prototype.recv_getRow = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ListWindowBackend_getRow_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getRow failed: unknown result';
};

ListWindowBackendClient.prototype.setVisibleRows = function(first, last, callback) {
  this.send_setVisibleRows(first, last, callback); 
  if (!callback) {
  this.recv_setVisibleRows();
  }
};

ListWindowBackendClient.prototype.send_setVisibleRows = function(first, last, callback) {
  var params = {
    first: first,
    last: last
  };
  var args = new ListWindowBackend_setVisibleRows_args(params);
  try {
    this.output.writeMessageBegin('setVisibleRows', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_setVisibleRows();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ListWindowBackendClient.prototype.recv_setVisibleRows = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ListWindowBackend_setVisibleRows_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};

ListWindowBackendClient.prototype.show = function(on, callback) {
  this.send_show(on, callback); 
};

ListWindowBackendClient.prototype.send_show = function(on, callback) {
  var params = {
    on: on
  };
  var args = new ListWindowBackend_show_args(params);
  try {
    this.output.writeMessageBegin('show', Thrift.MessageType.ONEWAY, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      this.output.getTransport().flush(true, null);
      callback();
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ListWindowBackendClient.prototype.getColumnInfo = function(callback) {
  this.send_getColumnInfo(callback); 
  if (!callback) {
    return this.recv_getColumnInfo();
  }
};

ListWindowBackendClient.prototype.send_getColumnInfo = function(callback) {
  var args = new ListWindowBackend_getColumnInfo_args();
  try {
    this.output.writeMessageBegin('getColumnInfo', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_getColumnInfo();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ListWindowBackendClient.prototype.recv_getColumnInfo = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ListWindowBackend_getColumnInfo_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getColumnInfo failed: unknown result';
};

ListWindowBackendClient.prototype.getListSpec = function(callback) {
  this.send_getListSpec(callback); 
  if (!callback) {
    return this.recv_getListSpec();
  }
};

ListWindowBackendClient.prototype.send_getListSpec = function(callback) {
  var args = new ListWindowBackend_getListSpec_args();
  try {
    this.output.writeMessageBegin('getListSpec', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_getListSpec();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ListWindowBackendClient.prototype.recv_getListSpec = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ListWindowBackend_getListSpec_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getListSpec failed: unknown result';
};

ListWindowBackendClient.prototype.toggleExpansion = function(index, callback) {
  this.send_toggleExpansion(index, callback); 
  if (!callback) {
    return this.recv_toggleExpansion();
  }
};

ListWindowBackendClient.prototype.send_toggleExpansion = function(index, callback) {
  var params = {
    index: index
  };
  var args = new ListWindowBackend_toggleExpansion_args(params);
  try {
    this.output.writeMessageBegin('toggleExpansion', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_toggleExpansion();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ListWindowBackendClient.prototype.recv_toggleExpansion = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ListWindowBackend_toggleExpansion_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'toggleExpansion failed: unknown result';
};

ListWindowBackendClient.prototype.toggleCheckmark = function(index, callback) {
  this.send_toggleCheckmark(index, callback); 
  if (!callback) {
  this.recv_toggleCheckmark();
  }
};

ListWindowBackendClient.prototype.send_toggleCheckmark = function(index, callback) {
  var params = {
    index: index
  };
  var args = new ListWindowBackend_toggleCheckmark_args(params);
  try {
    this.output.writeMessageBegin('toggleCheckmark', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_toggleCheckmark();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ListWindowBackendClient.prototype.recv_toggleCheckmark = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ListWindowBackend_toggleCheckmark_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};

ListWindowBackendClient.prototype.getContextMenu = function(row, col, callback) {
  this.send_getContextMenu(row, col, callback); 
  if (!callback) {
    return this.recv_getContextMenu();
  }
};

ListWindowBackendClient.prototype.send_getContextMenu = function(row, col, callback) {
  var params = {
    row: row,
    col: col
  };
  var args = new ListWindowBackend_getContextMenu_args(params);
  try {
    this.output.writeMessageBegin('getContextMenu', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_getContextMenu();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ListWindowBackendClient.prototype.recv_getContextMenu = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ListWindowBackend_getContextMenu_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getContextMenu failed: unknown result';
};

ListWindowBackendClient.prototype.handleContextMenu = function(command, callback) {
  this.send_handleContextMenu(command, callback); 
};

ListWindowBackendClient.prototype.send_handleContextMenu = function(command, callback) {
  var params = {
    command: command
  };
  var args = new ListWindowBackend_handleContextMenu_args(params);
  try {
    this.output.writeMessageBegin('handleContextMenu', Thrift.MessageType.ONEWAY, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      this.output.getTransport().flush(true, null);
      callback();
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ListWindowBackendClient.prototype.getDisplayName = function(callback) {
  this.send_getDisplayName(callback); 
  if (!callback) {
    return this.recv_getDisplayName();
  }
};

ListWindowBackendClient.prototype.send_getDisplayName = function(callback) {
  var args = new ListWindowBackend_getDisplayName_args();
  try {
    this.output.writeMessageBegin('getDisplayName', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_getDisplayName();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ListWindowBackendClient.prototype.recv_getDisplayName = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ListWindowBackend_getDisplayName_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getDisplayName failed: unknown result';
};

ListWindowBackendClient.prototype.scroll = function(op, first, last, callback) {
  this.send_scroll(op, first, last, callback); 
  if (!callback) {
    return this.recv_scroll();
  }
};

ListWindowBackendClient.prototype.send_scroll = function(op, first, last, callback) {
  var params = {
    op: op,
    first: first,
    last: last
  };
  var args = new ListWindowBackend_scroll_args(params);
  try {
    this.output.writeMessageBegin('scroll', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_scroll();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ListWindowBackendClient.prototype.recv_scroll = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ListWindowBackend_scroll_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'scroll failed: unknown result';
};

ListWindowBackendClient.prototype.click = function(row, col, flag, callback) {
  this.send_click(row, col, flag, callback); 
  if (!callback) {
  this.recv_click();
  }
};

ListWindowBackendClient.prototype.send_click = function(row, col, flag, callback) {
  var params = {
    row: row,
    col: col,
    flag: flag
  };
  var args = new ListWindowBackend_click_args(params);
  try {
    this.output.writeMessageBegin('click', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_click();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ListWindowBackendClient.prototype.recv_click = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ListWindowBackend_click_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};

ListWindowBackendClient.prototype.doubleClick = function(row, col, callback) {
  this.send_doubleClick(row, col, callback); 
  if (!callback) {
  this.recv_doubleClick();
  }
};

ListWindowBackendClient.prototype.send_doubleClick = function(row, col, callback) {
  var params = {
    row: row,
    col: col
  };
  var args = new ListWindowBackend_doubleClick_args(params);
  try {
    this.output.writeMessageBegin('doubleClick', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_doubleClick();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ListWindowBackendClient.prototype.recv_doubleClick = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ListWindowBackend_doubleClick_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};

ListWindowBackendClient.prototype.getEditableString = function(row, col, callback) {
  this.send_getEditableString(row, col, callback); 
  if (!callback) {
    return this.recv_getEditableString();
  }
};

ListWindowBackendClient.prototype.send_getEditableString = function(row, col, callback) {
  var params = {
    row: row,
    col: col
  };
  var args = new ListWindowBackend_getEditableString_args(params);
  try {
    this.output.writeMessageBegin('getEditableString', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_getEditableString();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ListWindowBackendClient.prototype.recv_getEditableString = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ListWindowBackend_getEditableString_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getEditableString failed: unknown result';
};

ListWindowBackendClient.prototype.setValue = function(row, col, value, callback) {
  this.send_setValue(row, col, value, callback); 
  if (!callback) {
    return this.recv_setValue();
  }
};

ListWindowBackendClient.prototype.send_setValue = function(row, col, value, callback) {
  var params = {
    row: row,
    col: col,
    value: value
  };
  var args = new ListWindowBackend_setValue_args(params);
  try {
    this.output.writeMessageBegin('setValue', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_setValue();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ListWindowBackendClient.prototype.recv_setValue = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ListWindowBackend_setValue_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'setValue failed: unknown result';
};

ListWindowBackendClient.prototype.getSelection = function(callback) {
  this.send_getSelection(callback); 
  if (!callback) {
    return this.recv_getSelection();
  }
};

ListWindowBackendClient.prototype.send_getSelection = function(callback) {
  var args = new ListWindowBackend_getSelection_args();
  try {
    this.output.writeMessageBegin('getSelection', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_getSelection();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ListWindowBackendClient.prototype.recv_getSelection = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ListWindowBackend_getSelection_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getSelection failed: unknown result';
};

ListWindowBackendClient.prototype.getToolTip = function(row, col, pos, callback) {
  this.send_getToolTip(row, col, pos, callback); 
  if (!callback) {
    return this.recv_getToolTip();
  }
};

ListWindowBackendClient.prototype.send_getToolTip = function(row, col, pos, callback) {
  var params = {
    row: row,
    col: col,
    pos: pos
  };
  var args = new ListWindowBackend_getToolTip_args(params);
  try {
    this.output.writeMessageBegin('getToolTip', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_getToolTip();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ListWindowBackendClient.prototype.recv_getToolTip = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ListWindowBackend_getToolTip_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getToolTip failed: unknown result';
};

ListWindowBackendClient.prototype.drop = function(row, col, text, callback) {
  this.send_drop(row, col, text, callback); 
  if (!callback) {
    return this.recv_drop();
  }
};

ListWindowBackendClient.prototype.send_drop = function(row, col, text, callback) {
  var params = {
    row: row,
    col: col,
    text: text
  };
  var args = new ListWindowBackend_drop_args(params);
  try {
    this.output.writeMessageBegin('drop', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_drop();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ListWindowBackendClient.prototype.recv_drop = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ListWindowBackend_drop_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'drop failed: unknown result';
};

ListWindowBackendClient.prototype.dropLocal = function(row, col, text, srcRow, srcCol, callback) {
  this.send_dropLocal(row, col, text, srcRow, srcCol, callback); 
  if (!callback) {
    return this.recv_dropLocal();
  }
};

ListWindowBackendClient.prototype.send_dropLocal = function(row, col, text, srcRow, srcCol, callback) {
  var params = {
    row: row,
    col: col,
    text: text,
    srcRow: srcRow,
    srcCol: srcCol
  };
  var args = new ListWindowBackend_dropLocal_args(params);
  try {
    this.output.writeMessageBegin('dropLocal', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_dropLocal();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ListWindowBackendClient.prototype.recv_dropLocal = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ListWindowBackend_dropLocal_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'dropLocal failed: unknown result';
};

ListWindowBackendClient.prototype.getDrag = function(row, col, callback) {
  this.send_getDrag(row, col, callback); 
  if (!callback) {
    return this.recv_getDrag();
  }
};

ListWindowBackendClient.prototype.send_getDrag = function(row, col, callback) {
  var params = {
    row: row,
    col: col
  };
  var args = new ListWindowBackend_getDrag_args(params);
  try {
    this.output.writeMessageBegin('getDrag', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_getDrag();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ListWindowBackendClient.prototype.recv_getDrag = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ListWindowBackend_getDrag_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getDrag failed: unknown result';
};

ListWindowBackendClient.prototype.getHelpTag = function(callback) {
  this.send_getHelpTag(callback); 
  if (!callback) {
    return this.recv_getHelpTag();
  }
};

ListWindowBackendClient.prototype.send_getHelpTag = function(callback) {
  var args = new ListWindowBackend_getHelpTag_args();
  try {
    this.output.writeMessageBegin('getHelpTag', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_getHelpTag();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ListWindowBackendClient.prototype.recv_getHelpTag = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ListWindowBackend_getHelpTag_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getHelpTag failed: unknown result';
};

ListWindowBackendClient.prototype.columnClick = function(col, callback) {
  this.send_columnClick(col, callback); 
  if (!callback) {
  this.recv_columnClick();
  }
};

ListWindowBackendClient.prototype.send_columnClick = function(col, callback) {
  var params = {
    col: col
  };
  var args = new ListWindowBackend_columnClick_args(params);
  try {
    this.output.writeMessageBegin('columnClick', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_columnClick();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ListWindowBackendClient.prototype.recv_columnClick = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ListWindowBackend_columnClick_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};

ListWindowBackendClient.prototype.handleChar = function(c, repeat, callback) {
  this.send_handleChar(c, repeat, callback); 
  if (!callback) {
  this.recv_handleChar();
  }
};

ListWindowBackendClient.prototype.send_handleChar = function(c, repeat, callback) {
  var params = {
    c: c,
    repeat: repeat
  };
  var args = new ListWindowBackend_handleChar_args(params);
  try {
    this.output.writeMessageBegin('handleChar', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_handleChar();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ListWindowBackendClient.prototype.recv_handleChar = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ListWindowBackend_handleChar_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};

ListWindowBackendClient.prototype.handleKeyDown = function(c, repeat, shift, ctrl, callback) {
  this.send_handleKeyDown(c, repeat, shift, ctrl, callback); 
  if (!callback) {
  this.recv_handleKeyDown();
  }
};

ListWindowBackendClient.prototype.send_handleKeyDown = function(c, repeat, shift, ctrl, callback) {
  var params = {
    c: c,
    repeat: repeat,
    shift: shift,
    ctrl: ctrl
  };
  var args = new ListWindowBackend_handleKeyDown_args(params);
  try {
    this.output.writeMessageBegin('handleKeyDown', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_handleKeyDown();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ListWindowBackendClient.prototype.recv_handleKeyDown = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ListWindowBackend_handleKeyDown_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};

ListWindowBackendClient.prototype.keyNavigate = function(op, repeat, flags, rowsInPage, callback) {
  this.send_keyNavigate(op, repeat, flags, rowsInPage, callback); 
  if (!callback) {
  this.recv_keyNavigate();
  }
};

ListWindowBackendClient.prototype.send_keyNavigate = function(op, repeat, flags, rowsInPage, callback) {
  var params = {
    op: op,
    repeat: repeat,
    flags: flags,
    rowsInPage: rowsInPage
  };
  var args = new ListWindowBackend_keyNavigate_args(params);
  try {
    this.output.writeMessageBegin('keyNavigate', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_keyNavigate();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ListWindowBackendClient.prototype.recv_keyNavigate = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ListWindowBackend_keyNavigate_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};

ListWindowBackendClient.prototype.toggleMoreOrLess = function(row, callback) {
  this.send_toggleMoreOrLess(row, callback); 
  if (!callback) {
  this.recv_toggleMoreOrLess();
  }
};

ListWindowBackendClient.prototype.send_toggleMoreOrLess = function(row, callback) {
  var params = {
    row: row
  };
  var args = new ListWindowBackend_toggleMoreOrLess_args(params);
  try {
    this.output.writeMessageBegin('toggleMoreOrLess', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_toggleMoreOrLess();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ListWindowBackendClient.prototype.recv_toggleMoreOrLess = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ListWindowBackend_toggleMoreOrLess_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};

ListWindowBackendClient.prototype.dropOutsideContent = function(callback) {
  this.send_dropOutsideContent(callback); 
  if (!callback) {
    return this.recv_dropOutsideContent();
  }
};

ListWindowBackendClient.prototype.send_dropOutsideContent = function(callback) {
  var args = new ListWindowBackend_dropOutsideContent_args();
  try {
    this.output.writeMessageBegin('dropOutsideContent', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_dropOutsideContent();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ListWindowBackendClient.prototype.recv_dropOutsideContent = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ListWindowBackend_dropOutsideContent_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'dropOutsideContent failed: unknown result';
};

ListWindowBackendClient.prototype.isSliding = function(callback) {
  this.send_isSliding(callback); 
  if (!callback) {
    return this.recv_isSliding();
  }
};

ListWindowBackendClient.prototype.send_isSliding = function(callback) {
  var args = new ListWindowBackend_isSliding_args();
  try {
    this.output.writeMessageBegin('isSliding', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_isSliding();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ListWindowBackendClient.prototype.recv_isSliding = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ListWindowBackend_isSliding_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'isSliding failed: unknown result';
};

ListWindowBackendClient.prototype.getChunkInfo = function(callback) {
  this.send_getChunkInfo(callback); 
  if (!callback) {
    return this.recv_getChunkInfo();
  }
};

ListWindowBackendClient.prototype.send_getChunkInfo = function(callback) {
  var args = new ListWindowBackend_getChunkInfo_args();
  try {
    this.output.writeMessageBegin('getChunkInfo', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_getChunkInfo();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ListWindowBackendClient.prototype.recv_getChunkInfo = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ListWindowBackend_getChunkInfo_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getChunkInfo failed: unknown result';
};

ListWindowBackendClient.prototype.addAfter = function(minToAdd, maxToTrim, callback) {
  this.send_addAfter(minToAdd, maxToTrim, callback); 
  if (!callback) {
    return this.recv_addAfter();
  }
};

ListWindowBackendClient.prototype.send_addAfter = function(minToAdd, maxToTrim, callback) {
  var params = {
    minToAdd: minToAdd,
    maxToTrim: maxToTrim
  };
  var args = new ListWindowBackend_addAfter_args(params);
  try {
    this.output.writeMessageBegin('addAfter', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_addAfter();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ListWindowBackendClient.prototype.recv_addAfter = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ListWindowBackend_addAfter_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'addAfter failed: unknown result';
};

ListWindowBackendClient.prototype.addBefore = function(minToAdd, maxToTrim, callback) {
  this.send_addBefore(minToAdd, maxToTrim, callback); 
  if (!callback) {
    return this.recv_addBefore();
  }
};

ListWindowBackendClient.prototype.send_addBefore = function(minToAdd, maxToTrim, callback) {
  var params = {
    minToAdd: minToAdd,
    maxToTrim: maxToTrim
  };
  var args = new ListWindowBackend_addBefore_args(params);
  try {
    this.output.writeMessageBegin('addBefore', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_addBefore();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ListWindowBackendClient.prototype.recv_addBefore = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ListWindowBackend_addBefore_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'addBefore failed: unknown result';
};

ListWindowBackendClient.prototype.navigateToFraction = function(fraction, chunkPos, minLines, callback) {
  this.send_navigateToFraction(fraction, chunkPos, minLines, callback); 
  if (!callback) {
    return this.recv_navigateToFraction();
  }
};

ListWindowBackendClient.prototype.send_navigateToFraction = function(fraction, chunkPos, minLines, callback) {
  var params = {
    fraction: fraction,
    chunkPos: chunkPos,
    minLines: minLines
  };
  var args = new ListWindowBackend_navigateToFraction_args(params);
  try {
    this.output.writeMessageBegin('navigateToFraction', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_navigateToFraction();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ListWindowBackendClient.prototype.recv_navigateToFraction = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ListWindowBackend_navigateToFraction_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'navigateToFraction failed: unknown result';
};

ListWindowBackendClient.prototype.navigateTo = function(toWhat, chunkPos, minLines, callback) {
  this.send_navigateTo(toWhat, chunkPos, minLines, callback); 
  if (!callback) {
    return this.recv_navigateTo();
  }
};

ListWindowBackendClient.prototype.send_navigateTo = function(toWhat, chunkPos, minLines, callback) {
  var params = {
    toWhat: toWhat,
    chunkPos: chunkPos,
    minLines: minLines
  };
  var args = new ListWindowBackend_navigateTo_args(params);
  try {
    this.output.writeMessageBegin('navigateTo', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_navigateTo();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ListWindowBackendClient.prototype.recv_navigateTo = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ListWindowBackend_navigateTo_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'navigateTo failed: unknown result';
};

ListWindowBackendClient.prototype.getSel = function(callback) {
  this.send_getSel(callback); 
  if (!callback) {
    return this.recv_getSel();
  }
};

ListWindowBackendClient.prototype.send_getSel = function(callback) {
  var args = new ListWindowBackend_getSel_args();
  try {
    this.output.writeMessageBegin('getSel', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_getSel();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ListWindowBackendClient.prototype.recv_getSel = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ListWindowBackend_getSel_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getSel failed: unknown result';
};

ListWindowBackendClient.prototype.setSel = function(row, callback) {
  this.send_setSel(row, callback); 
  if (!callback) {
    return this.recv_setSel();
  }
};

ListWindowBackendClient.prototype.send_setSel = function(row, callback) {
  var params = {
    row: row
  };
  var args = new ListWindowBackend_setSel_args(params);
  try {
    this.output.writeMessageBegin('setSel', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_setSel();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ListWindowBackendClient.prototype.recv_setSel = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ListWindowBackend_setSel_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'setSel failed: unknown result';
};

ListWindowBackendClient.prototype.keyNav = function(op, repeat, rowsInPage, callback) {
  this.send_keyNav(op, repeat, rowsInPage, callback); 
  if (!callback) {
    return this.recv_keyNav();
  }
};

ListWindowBackendClient.prototype.send_keyNav = function(op, repeat, rowsInPage, callback) {
  var params = {
    op: op,
    repeat: repeat,
    rowsInPage: rowsInPage
  };
  var args = new ListWindowBackend_keyNav_args(params);
  try {
    this.output.writeMessageBegin('keyNav', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_keyNav();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ListWindowBackendClient.prototype.recv_keyNav = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ListWindowBackend_keyNav_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'keyNav failed: unknown result';
};

ListWindowBackendClient.prototype.getToolbarDefinition = function(callback) {
  this.send_getToolbarDefinition(callback); 
  if (!callback) {
    return this.recv_getToolbarDefinition();
  }
};

ListWindowBackendClient.prototype.send_getToolbarDefinition = function(callback) {
  var args = new ListWindowBackend_getToolbarDefinition_args();
  try {
    this.output.writeMessageBegin('getToolbarDefinition', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_getToolbarDefinition();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ListWindowBackendClient.prototype.recv_getToolbarDefinition = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ListWindowBackend_getToolbarDefinition_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getToolbarDefinition failed: unknown result';
};

ListWindowBackendClient.prototype.setToolbarItemValue = function(id, property, callback) {
  this.send_setToolbarItemValue(id, property, callback); 
  if (!callback) {
    return this.recv_setToolbarItemValue();
  }
};

ListWindowBackendClient.prototype.send_setToolbarItemValue = function(id, property, callback) {
  var params = {
    id: id,
    property: property
  };
  var args = new ListWindowBackend_setToolbarItemValue_args(params);
  try {
    this.output.writeMessageBegin('setToolbarItemValue', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_setToolbarItemValue();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ListWindowBackendClient.prototype.recv_setToolbarItemValue = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ListWindowBackend_setToolbarItemValue_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'setToolbarItemValue failed: unknown result';
};

ListWindowBackendClient.prototype.getToolbarItemValue = function(id, callback) {
  this.send_getToolbarItemValue(id, callback); 
  if (!callback) {
    return this.recv_getToolbarItemValue();
  }
};

ListWindowBackendClient.prototype.send_getToolbarItemValue = function(id, callback) {
  var params = {
    id: id
  };
  var args = new ListWindowBackend_getToolbarItemValue_args(params);
  try {
    this.output.writeMessageBegin('getToolbarItemValue', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_getToolbarItemValue();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ListWindowBackendClient.prototype.recv_getToolbarItemValue = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ListWindowBackend_getToolbarItemValue_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getToolbarItemValue failed: unknown result';
};

ListWindowBackendClient.prototype.getToolbarItemState = function(id, callback) {
  this.send_getToolbarItemState(id, callback); 
  if (!callback) {
    return this.recv_getToolbarItemState();
  }
};

ListWindowBackendClient.prototype.send_getToolbarItemState = function(id, callback) {
  var params = {
    id: id
  };
  var args = new ListWindowBackend_getToolbarItemState_args(params);
  try {
    this.output.writeMessageBegin('getToolbarItemState', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_getToolbarItemState();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ListWindowBackendClient.prototype.recv_getToolbarItemState = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ListWindowBackend_getToolbarItemState_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getToolbarItemState failed: unknown result';
};

ListWindowBackendClient.prototype.getToolbarItemTooltip = function(id, callback) {
  this.send_getToolbarItemTooltip(id, callback); 
  if (!callback) {
    return this.recv_getToolbarItemTooltip();
  }
};

ListWindowBackendClient.prototype.send_getToolbarItemTooltip = function(id, callback) {
  var params = {
    id: id
  };
  var args = new ListWindowBackend_getToolbarItemTooltip_args(params);
  try {
    this.output.writeMessageBegin('getToolbarItemTooltip', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_getToolbarItemTooltip();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ListWindowBackendClient.prototype.recv_getToolbarItemTooltip = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ListWindowBackend_getToolbarItemTooltip_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getToolbarItemTooltip failed: unknown result';
};
