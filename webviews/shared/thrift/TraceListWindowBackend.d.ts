/// <reference path="ListWindowBackend.d.ts" />
//
// Autogenerated by Thrift Compiler (0.14.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//

import Int64 = require('node-int64');

import { listwindow } from "./listwindow_types";


export declare class Client extends ListWindowBackend.Client {
  input: Thrift.TJSONProtocol;
  output: Thrift.TJSONProtocol;
  seqid: number;

  constructor(input: Thrift.TJSONProtocol, output?: Thrift.TJSONProtocol);

  isEnabled(): Q.Promise<boolean>;

  isEnabled(callback?: (data: boolean)=>void): void;

  canEnable(): Q.Promise<boolean>;

  canEnable(callback?: (data: boolean)=>void): void;

  setEnabled(on: boolean): Q.Promise<void>;

  setEnabled(on: boolean, callback?: (data: void)=>void): void;

  canClear(): Q.Promise<boolean>;

  canClear(callback?: (data: boolean)=>void): void;

  clear(): Q.Promise<void>;

  clear(callback?: (data: void)=>void): void;

  isMixedMode(): Q.Promise<boolean>;

  isMixedMode(callback?: (data: boolean)=>void): void;

  canUseMixedMode(): Q.Promise<boolean>;

  canUseMixedMode(callback?: (data: boolean)=>void): void;

  setMixedMode(on: boolean): Q.Promise<void>;

  setMixedMode(on: boolean, callback?: (data: void)=>void): void;

  canSave(): Q.Promise<boolean>;

  canSave(callback?: (data: boolean)=>void): void;

  save(filename: string): Q.Promise<void>;

  save(filename: string, callback?: (data: void)=>void): void;

  getDefaultSaveFilename(): Q.Promise<string>;

  getDefaultSaveFilename(callback?: (data: string)=>void): void;

  getDefaultSaveFilenameExt(): Q.Promise<string>;

  getDefaultSaveFilenameExt(callback?: (data: string)=>void): void;

  canFind(): Q.Promise<boolean>;

  canFind(callback?: (data: boolean)=>void): void;

  getFindParams(): Q.Promise<TraceFindParams>;

  getFindParams(callback?: (data: TraceFindParams)=>void): void;

  find(params: TraceFindParams): Q.Promise<void>;

  find(params: TraceFindParams, callback?: (data: void)=>void): void;

  findLocal(params: TraceFindParams): Q.Promise<void>;

  findLocal(params: TraceFindParams, callback?: (data: void)=>void): void;

  canBrowse(): Q.Promise<boolean>;

  canBrowse(callback?: (data: boolean)=>void): void;

  isBrowsing(): Q.Promise<boolean>;

  isBrowsing(callback?: (data: boolean)=>void): void;

  setBrowseMode(on: boolean): Q.Promise<void>;

  setBrowseMode(on: boolean, callback?: (data: void)=>void): void;

  getProgress(): Q.Promise<TraceProgress>;

  getProgress(callback?: (data: TraceProgress)=>void): void;

  supportsTraceSettings(): Q.Promise<boolean>;

  supportsTraceSettings(callback?: (data: boolean)=>void): void;
}
