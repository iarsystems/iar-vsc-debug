//
// Autogenerated by Thrift Compiler (0.14.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
if (typeof Int64 === 'undefined' && typeof require === 'function') {
  var Int64 = require('node-int64');
}


//HELPER FUNCTIONS AND STRUCTURES

var DebuggerStarter_Configure_args = function(args) {
  this.stageDir = null;
  this.defaultTool = null;
  if (args) {
    if (args.stageDir !== undefined && args.stageDir !== null) {
      this.stageDir = args.stageDir;
    }
    if (args.defaultTool !== undefined && args.defaultTool !== null) {
      this.defaultTool = args.defaultTool;
    }
  }
};
DebuggerStarter_Configure_args.prototype = {};
DebuggerStarter_Configure_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.stageDir = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.defaultTool = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DebuggerStarter_Configure_args.prototype.write = function(output) {
  output.writeStructBegin('DebuggerStarter_Configure_args');
  if (this.stageDir !== null && this.stageDir !== undefined) {
    output.writeFieldBegin('stageDir', Thrift.Type.STRING, 1);
    output.writeString(this.stageDir);
    output.writeFieldEnd();
  }
  if (this.defaultTool !== null && this.defaultTool !== undefined) {
    output.writeFieldBegin('defaultTool', Thrift.Type.I32, 2);
    output.writeI32(this.defaultTool);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DebuggerStarter_Configure_result = function(args) {
};
DebuggerStarter_Configure_result.prototype = {};
DebuggerStarter_Configure_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DebuggerStarter_Configure_result.prototype.write = function(output) {
  output.writeStructBegin('DebuggerStarter_Configure_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DebuggerStarter_StartServiceRegistry_args = function(args) {
};
DebuggerStarter_StartServiceRegistry_args.prototype = {};
DebuggerStarter_StartServiceRegistry_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DebuggerStarter_StartServiceRegistry_args.prototype.write = function(output) {
  output.writeStructBegin('DebuggerStarter_StartServiceRegistry_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DebuggerStarter_StartServiceRegistry_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ServiceRegistry_ttypes.ServiceLocation(args.success);
    }
  }
};
DebuggerStarter_StartServiceRegistry_result.prototype = {};
DebuggerStarter_StartServiceRegistry_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ServiceRegistry_ttypes.ServiceLocation();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DebuggerStarter_StartServiceRegistry_result.prototype.write = function(output) {
  output.writeStructBegin('DebuggerStarter_StartServiceRegistry_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DebuggerStarter_StartDebuggers_args = function(args) {
  this.parentServiceRegistryLoc = null;
  this.sharedServiceRegistryLoc = null;
  if (args) {
    if (args.parentServiceRegistryLoc !== undefined && args.parentServiceRegistryLoc !== null) {
      this.parentServiceRegistryLoc = new ServiceRegistry_ttypes.ServiceLocation(args.parentServiceRegistryLoc);
    }
    if (args.sharedServiceRegistryLoc !== undefined && args.sharedServiceRegistryLoc !== null) {
      this.sharedServiceRegistryLoc = new ServiceRegistry_ttypes.ServiceLocation(args.sharedServiceRegistryLoc);
    }
  }
};
DebuggerStarter_StartDebuggers_args.prototype = {};
DebuggerStarter_StartDebuggers_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.parentServiceRegistryLoc = new ServiceRegistry_ttypes.ServiceLocation();
        this.parentServiceRegistryLoc.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.sharedServiceRegistryLoc = new ServiceRegistry_ttypes.ServiceLocation();
        this.sharedServiceRegistryLoc.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DebuggerStarter_StartDebuggers_args.prototype.write = function(output) {
  output.writeStructBegin('DebuggerStarter_StartDebuggers_args');
  if (this.parentServiceRegistryLoc !== null && this.parentServiceRegistryLoc !== undefined) {
    output.writeFieldBegin('parentServiceRegistryLoc', Thrift.Type.STRUCT, 1);
    this.parentServiceRegistryLoc.write(output);
    output.writeFieldEnd();
  }
  if (this.sharedServiceRegistryLoc !== null && this.sharedServiceRegistryLoc !== undefined) {
    output.writeFieldBegin('sharedServiceRegistryLoc', Thrift.Type.STRUCT, 2);
    this.sharedServiceRegistryLoc.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DebuggerStarter_StartDebuggers_result = function(args) {
  this.success = null;
  this.fsp = null;
  this.se = null;
  if (args instanceof ttypes.FailedToStartPartner) {
    this.fsp = args;
    return;
  }
  if (args instanceof ServiceRegistry_ttypes.ServiceException) {
    this.se = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ServiceRegistry_ttypes.ServiceLocation]);
    }
    if (args.fsp !== undefined && args.fsp !== null) {
      this.fsp = args.fsp;
    }
    if (args.se !== undefined && args.se !== null) {
      this.se = args.se;
    }
  }
};
DebuggerStarter_StartDebuggers_result.prototype = {};
DebuggerStarter_StartDebuggers_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp342 = input.readListBegin();
        var _size41 = _rtmp342.size || 0;
        for (var _i43 = 0; _i43 < _size41; ++_i43) {
          var elem44 = null;
          elem44 = new ServiceRegistry_ttypes.ServiceLocation();
          elem44.read(input);
          this.success.push(elem44);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.fsp = new ttypes.FailedToStartPartner();
        this.fsp.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.se = new ServiceRegistry_ttypes.ServiceException();
        this.se.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DebuggerStarter_StartDebuggers_result.prototype.write = function(output) {
  output.writeStructBegin('DebuggerStarter_StartDebuggers_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter45 in this.success) {
      if (this.success.hasOwnProperty(iter45)) {
        iter45 = this.success[iter45];
        iter45.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.fsp !== null && this.fsp !== undefined) {
    output.writeFieldBegin('fsp', Thrift.Type.STRUCT, 1);
    this.fsp.write(output);
    output.writeFieldEnd();
  }
  if (this.se !== null && this.se !== undefined) {
    output.writeFieldBegin('se', Thrift.Type.STRUCT, 2);
    this.se.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DebuggerStarter_TerminateDebuggers_args = function(args) {
};
DebuggerStarter_TerminateDebuggers_args.prototype = {};
DebuggerStarter_TerminateDebuggers_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DebuggerStarter_TerminateDebuggers_args.prototype.write = function(output) {
  output.writeStructBegin('DebuggerStarter_TerminateDebuggers_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DebuggerStarter_TerminateDebuggers_result = function(args) {
  this.se = null;
  if (args instanceof ServiceRegistry_ttypes.ServiceException) {
    this.se = args;
    return;
  }
  if (args) {
    if (args.se !== undefined && args.se !== null) {
      this.se = args.se;
    }
  }
};
DebuggerStarter_TerminateDebuggers_result.prototype = {};
DebuggerStarter_TerminateDebuggers_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.se = new ServiceRegistry_ttypes.ServiceException();
        this.se.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DebuggerStarter_TerminateDebuggers_result.prototype.write = function(output) {
  output.writeStructBegin('DebuggerStarter_TerminateDebuggers_result');
  if (this.se !== null && this.se !== undefined) {
    output.writeFieldBegin('se', Thrift.Type.STRUCT, 1);
    this.se.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DebuggerStarter_GetPartnerNamespace_args = function(args) {
  this.partnerId = null;
  this.sharedServiceRegistryLoc = null;
  if (args) {
    if (args.partnerId !== undefined && args.partnerId !== null) {
      this.partnerId = args.partnerId;
    }
    if (args.sharedServiceRegistryLoc !== undefined && args.sharedServiceRegistryLoc !== null) {
      this.sharedServiceRegistryLoc = new ServiceRegistry_ttypes.ServiceLocation(args.sharedServiceRegistryLoc);
    }
  }
};
DebuggerStarter_GetPartnerNamespace_args.prototype = {};
DebuggerStarter_GetPartnerNamespace_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.partnerId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.sharedServiceRegistryLoc = new ServiceRegistry_ttypes.ServiceLocation();
        this.sharedServiceRegistryLoc.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DebuggerStarter_GetPartnerNamespace_args.prototype.write = function(output) {
  output.writeStructBegin('DebuggerStarter_GetPartnerNamespace_args');
  if (this.partnerId !== null && this.partnerId !== undefined) {
    output.writeFieldBegin('partnerId', Thrift.Type.I32, 1);
    output.writeI32(this.partnerId);
    output.writeFieldEnd();
  }
  if (this.sharedServiceRegistryLoc !== null && this.sharedServiceRegistryLoc !== undefined) {
    output.writeFieldBegin('sharedServiceRegistryLoc', Thrift.Type.STRUCT, 2);
    this.sharedServiceRegistryLoc.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DebuggerStarter_GetPartnerNamespace_result = function(args) {
  this.success = null;
  this.partner = null;
  if (args instanceof ttypes.UnknownPartner) {
    this.partner = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.partner !== undefined && args.partner !== null) {
      this.partner = args.partner;
    }
  }
};
DebuggerStarter_GetPartnerNamespace_result.prototype = {};
DebuggerStarter_GetPartnerNamespace_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.partner = new ttypes.UnknownPartner();
        this.partner.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DebuggerStarter_GetPartnerNamespace_result.prototype.write = function(output) {
  output.writeStructBegin('DebuggerStarter_GetPartnerNamespace_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.partner !== null && this.partner !== undefined) {
    output.writeFieldBegin('partner', Thrift.Type.STRUCT, 1);
    this.partner.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DebuggerStarterClient = exports.Client = function(input, output) {
  this.input = input;
  this.output = (!output) ? input : output;
  this.seqid = 0;
};
Thrift.inherits(DebuggerStarterClient, HeartbeatServiceClient);

DebuggerStarterClient.prototype.Configure = function(stageDir, defaultTool, callback) {
  this.send_Configure(stageDir, defaultTool, callback); 
  if (!callback) {
  this.recv_Configure();
  }
};

DebuggerStarterClient.prototype.send_Configure = function(stageDir, defaultTool, callback) {
  var params = {
    stageDir: stageDir,
    defaultTool: defaultTool
  };
  var args = new DebuggerStarter_Configure_args(params);
  try {
    this.output.writeMessageBegin('Configure', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_Configure();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

DebuggerStarterClient.prototype.recv_Configure = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new DebuggerStarter_Configure_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};

DebuggerStarterClient.prototype.StartServiceRegistry = function(callback) {
  this.send_StartServiceRegistry(callback); 
  if (!callback) {
    return this.recv_StartServiceRegistry();
  }
};

DebuggerStarterClient.prototype.send_StartServiceRegistry = function(callback) {
  var args = new DebuggerStarter_StartServiceRegistry_args();
  try {
    this.output.writeMessageBegin('StartServiceRegistry', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_StartServiceRegistry();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

DebuggerStarterClient.prototype.recv_StartServiceRegistry = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new DebuggerStarter_StartServiceRegistry_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'StartServiceRegistry failed: unknown result';
};

DebuggerStarterClient.prototype.StartDebuggers = function(parentServiceRegistryLoc, sharedServiceRegistryLoc, callback) {
  this.send_StartDebuggers(parentServiceRegistryLoc, sharedServiceRegistryLoc, callback); 
  if (!callback) {
    return this.recv_StartDebuggers();
  }
};

DebuggerStarterClient.prototype.send_StartDebuggers = function(parentServiceRegistryLoc, sharedServiceRegistryLoc, callback) {
  var params = {
    parentServiceRegistryLoc: parentServiceRegistryLoc,
    sharedServiceRegistryLoc: sharedServiceRegistryLoc
  };
  var args = new DebuggerStarter_StartDebuggers_args(params);
  try {
    this.output.writeMessageBegin('StartDebuggers', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_StartDebuggers();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

DebuggerStarterClient.prototype.recv_StartDebuggers = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new DebuggerStarter_StartDebuggers_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.fsp) {
    throw result.fsp;
  }
  if (null !== result.se) {
    throw result.se;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'StartDebuggers failed: unknown result';
};

DebuggerStarterClient.prototype.TerminateDebuggers = function(callback) {
  this.send_TerminateDebuggers(callback); 
  if (!callback) {
  this.recv_TerminateDebuggers();
  }
};

DebuggerStarterClient.prototype.send_TerminateDebuggers = function(callback) {
  var args = new DebuggerStarter_TerminateDebuggers_args();
  try {
    this.output.writeMessageBegin('TerminateDebuggers', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_TerminateDebuggers();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

DebuggerStarterClient.prototype.recv_TerminateDebuggers = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new DebuggerStarter_TerminateDebuggers_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.se) {
    throw result.se;
  }
  return;
};

DebuggerStarterClient.prototype.GetPartnerNamespace = function(partnerId, sharedServiceRegistryLoc, callback) {
  this.send_GetPartnerNamespace(partnerId, sharedServiceRegistryLoc, callback); 
  if (!callback) {
    return this.recv_GetPartnerNamespace();
  }
};

DebuggerStarterClient.prototype.send_GetPartnerNamespace = function(partnerId, sharedServiceRegistryLoc, callback) {
  var params = {
    partnerId: partnerId,
    sharedServiceRegistryLoc: sharedServiceRegistryLoc
  };
  var args = new DebuggerStarter_GetPartnerNamespace_args(params);
  try {
    this.output.writeMessageBegin('GetPartnerNamespace', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_GetPartnerNamespace();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

DebuggerStarterClient.prototype.recv_GetPartnerNamespace = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new DebuggerStarter_GetPartnerNamespace_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.partner) {
    throw result.partner;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'GetPartnerNamespace failed: unknown result';
};
