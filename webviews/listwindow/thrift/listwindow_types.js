//
// Autogenerated by Thrift Compiler (0.14.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
if (typeof Int64 === 'undefined' && typeof require === 'function') {
  var Int64 = require('node-int64');
}


var ttypes = module.exports = {};
ttypes.Alignment = {
  '0' : 'kLeft',
  'kLeft' : 0,
  '1' : 'kRight',
  'kRight' : 1,
  '2' : 'kCenter',
  'kCenter' : 2
};
ttypes.TextStyle = {
  '0' : 'kFixedPlain',
  'kFixedPlain' : 0,
  '1' : 'kFixedBold',
  'kFixedBold' : 1,
  '2' : 'kFixedItalic',
  'kFixedItalic' : 2,
  '3' : 'kFixedBoldItalic',
  'kFixedBoldItalic' : 3,
  '4' : 'kProportionalPlain',
  'kProportionalPlain' : 4,
  '5' : 'kProportionalBold',
  'kProportionalBold' : 5,
  '6' : 'kProportionalItalic',
  'kProportionalItalic' : 6,
  '7' : 'kProportionalBoldItalic',
  'kProportionalBoldItalic' : 7
};
ttypes.KeyNavOperation = {
  '0' : 'kPrevItem',
  'kPrevItem' : 0,
  '1' : 'kNextItem',
  'kNextItem' : 1,
  '2' : 'kPrevItemPage',
  'kPrevItemPage' : 2,
  '3' : 'kNextItemPage',
  'kNextItemPage' : 3,
  '4' : 'kTopItem',
  'kTopItem' : 4,
  '5' : 'kBottomItem',
  'kBottomItem' : 5,
  '6' : 'kNextRight',
  'kNextRight' : 6,
  '7' : 'kPrevLeft',
  'kPrevLeft' : 7
};
ttypes.ScrollOperation = {
  '0' : 'kScrollLineUp',
  'kScrollLineUp' : 0,
  '1' : 'kScrollLineDown',
  'kScrollLineDown' : 1,
  '2' : 'kScrollPageUp',
  'kScrollPageUp' : 2,
  '3' : 'kScrollPageDown',
  'kScrollPageDown' : 3,
  '4' : 'kScrollTop',
  'kScrollTop' : 4,
  '5' : 'kScrollBottom',
  'kScrollBottom' : 5,
  '6' : 'kScrollTrack',
  'kScrollTrack' : 6
};
ttypes.SelectionFlags = {
  '0' : 'kReplace',
  'kReplace' : 0,
  '1' : 'kAdd',
  'kAdd' : 1,
  '2' : 'kRange',
  'kRange' : 2
};
ttypes.Target = {
  '0' : 'kNoTarget',
  'kNoTarget' : 0,
  '1' : 'kTargetAll',
  'kTargetAll' : 1,
  '2' : 'kTargetRow',
  'kTargetRow' : 2,
  '3' : 'kTargetColumn',
  'kTargetColumn' : 3,
  '4' : 'kTargetCell',
  'kTargetCell' : 4
};
ttypes.What = {
  '0' : 'kEnsureVisible',
  'kEnsureVisible' : 0,
  '1' : 'kSelectionUpdate',
  'kSelectionUpdate' : 1,
  '2' : 'kRowUpdate',
  'kRowUpdate' : 2,
  '3' : 'kNormalUpdate',
  'kNormalUpdate' : 3,
  '4' : 'kFullUpdate',
  'kFullUpdate' : 4,
  '5' : 'kFreeze',
  'kFreeze' : 5,
  '6' : 'kThaw',
  'kThaw' : 6
};
var Range = module.exports.Range = function(args) {
  this.first = null;
  this.last = null;
  if (args) {
    if (args.first !== undefined && args.first !== null) {
      this.first = args.first;
    }
    if (args.last !== undefined && args.last !== null) {
      this.last = args.last;
    }
  }
};
Range.prototype = {};
Range.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.first = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.last = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Range.prototype.write = function(output) {
  output.writeStructBegin('Range');
  if (this.first !== null && this.first !== undefined) {
    output.writeFieldBegin('first', Thrift.Type.I64, 1);
    output.writeI64(this.first);
    output.writeFieldEnd();
  }
  if (this.last !== null && this.last !== undefined) {
    output.writeFieldBegin('last', Thrift.Type.I64, 2);
    output.writeI64(this.last);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Color = module.exports.Color = function(args) {
  this.r = null;
  this.g = null;
  this.b = null;
  this.lowContrast = null;
  this.isDefault = null;
  if (args) {
    if (args.r !== undefined && args.r !== null) {
      this.r = args.r;
    }
    if (args.g !== undefined && args.g !== null) {
      this.g = args.g;
    }
    if (args.b !== undefined && args.b !== null) {
      this.b = args.b;
    }
    if (args.lowContrast !== undefined && args.lowContrast !== null) {
      this.lowContrast = args.lowContrast;
    }
    if (args.isDefault !== undefined && args.isDefault !== null) {
      this.isDefault = args.isDefault;
    }
  }
};
Color.prototype = {};
Color.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.r = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.g = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.b = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.lowContrast = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.isDefault = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Color.prototype.write = function(output) {
  output.writeStructBegin('Color');
  if (this.r !== null && this.r !== undefined) {
    output.writeFieldBegin('r', Thrift.Type.I32, 1);
    output.writeI32(this.r);
    output.writeFieldEnd();
  }
  if (this.g !== null && this.g !== undefined) {
    output.writeFieldBegin('g', Thrift.Type.I32, 2);
    output.writeI32(this.g);
    output.writeFieldEnd();
  }
  if (this.b !== null && this.b !== undefined) {
    output.writeFieldBegin('b', Thrift.Type.I32, 3);
    output.writeI32(this.b);
    output.writeFieldEnd();
  }
  if (this.lowContrast !== null && this.lowContrast !== undefined) {
    output.writeFieldBegin('lowContrast', Thrift.Type.BOOL, 4);
    output.writeBool(this.lowContrast);
    output.writeFieldEnd();
  }
  if (this.isDefault !== null && this.isDefault !== undefined) {
    output.writeFieldBegin('isDefault', Thrift.Type.BOOL, 5);
    output.writeBool(this.isDefault);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Format = module.exports.Format = function(args) {
  this.align = null;
  this.style = null;
  this.editable = null;
  this.icons = null;
  this.transp = null;
  this.textColor = null;
  this.bgColor = null;
  this.barColor = null;
  if (args) {
    if (args.align !== undefined && args.align !== null) {
      this.align = args.align;
    }
    if (args.style !== undefined && args.style !== null) {
      this.style = args.style;
    }
    if (args.editable !== undefined && args.editable !== null) {
      this.editable = args.editable;
    }
    if (args.icons !== undefined && args.icons !== null) {
      this.icons = Thrift.copyList(args.icons, [null]);
    }
    if (args.transp !== undefined && args.transp !== null) {
      this.transp = new ttypes.Color(args.transp);
    }
    if (args.textColor !== undefined && args.textColor !== null) {
      this.textColor = new ttypes.Color(args.textColor);
    }
    if (args.bgColor !== undefined && args.bgColor !== null) {
      this.bgColor = new ttypes.Color(args.bgColor);
    }
    if (args.barColor !== undefined && args.barColor !== null) {
      this.barColor = new ttypes.Color(args.barColor);
    }
  }
};
Format.prototype = {};
Format.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.align = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.style = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.editable = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        this.icons = [];
        var _rtmp31 = input.readListBegin();
        var _size0 = _rtmp31.size || 0;
        for (var _i2 = 0; _i2 < _size0; ++_i2) {
          var elem3 = null;
          elem3 = input.readString().value;
          this.icons.push(elem3);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.transp = new ttypes.Color();
        this.transp.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.textColor = new ttypes.Color();
        this.textColor.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRUCT) {
        this.bgColor = new ttypes.Color();
        this.bgColor.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRUCT) {
        this.barColor = new ttypes.Color();
        this.barColor.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Format.prototype.write = function(output) {
  output.writeStructBegin('Format');
  if (this.align !== null && this.align !== undefined) {
    output.writeFieldBegin('align', Thrift.Type.I32, 1);
    output.writeI32(this.align);
    output.writeFieldEnd();
  }
  if (this.style !== null && this.style !== undefined) {
    output.writeFieldBegin('style', Thrift.Type.I32, 2);
    output.writeI32(this.style);
    output.writeFieldEnd();
  }
  if (this.editable !== null && this.editable !== undefined) {
    output.writeFieldBegin('editable', Thrift.Type.BOOL, 3);
    output.writeBool(this.editable);
    output.writeFieldEnd();
  }
  if (this.icons !== null && this.icons !== undefined) {
    output.writeFieldBegin('icons', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRING, this.icons.length);
    for (var iter4 in this.icons) {
      if (this.icons.hasOwnProperty(iter4)) {
        iter4 = this.icons[iter4];
        output.writeString(iter4);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.transp !== null && this.transp !== undefined) {
    output.writeFieldBegin('transp', Thrift.Type.STRUCT, 5);
    this.transp.write(output);
    output.writeFieldEnd();
  }
  if (this.textColor !== null && this.textColor !== undefined) {
    output.writeFieldBegin('textColor', Thrift.Type.STRUCT, 6);
    this.textColor.write(output);
    output.writeFieldEnd();
  }
  if (this.bgColor !== null && this.bgColor !== undefined) {
    output.writeFieldBegin('bgColor', Thrift.Type.STRUCT, 7);
    this.bgColor.write(output);
    output.writeFieldEnd();
  }
  if (this.barColor !== null && this.barColor !== undefined) {
    output.writeFieldBegin('barColor', Thrift.Type.STRUCT, 8);
    this.barColor.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Cell = module.exports.Cell = function(args) {
  this.text = null;
  this.format = null;
  this.drop = null;
  if (args) {
    if (args.text !== undefined && args.text !== null) {
      this.text = args.text;
    }
    if (args.format !== undefined && args.format !== null) {
      this.format = new ttypes.Format(args.format);
    }
    if (args.drop !== undefined && args.drop !== null) {
      this.drop = args.drop;
    }
  }
};
Cell.prototype = {};
Cell.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.text = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.format = new ttypes.Format();
        this.format.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.drop = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Cell.prototype.write = function(output) {
  output.writeStructBegin('Cell');
  if (this.text !== null && this.text !== undefined) {
    output.writeFieldBegin('text', Thrift.Type.STRING, 1);
    output.writeString(this.text);
    output.writeFieldEnd();
  }
  if (this.format !== null && this.format !== undefined) {
    output.writeFieldBegin('format', Thrift.Type.STRUCT, 2);
    this.format.write(output);
    output.writeFieldEnd();
  }
  if (this.drop !== null && this.drop !== undefined) {
    output.writeFieldBegin('drop', Thrift.Type.I32, 3);
    output.writeI32(this.drop);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Row = module.exports.Row = function(args) {
  this.cells = null;
  this.isChecked = null;
  this.treeinfo = null;
  if (args) {
    if (args.cells !== undefined && args.cells !== null) {
      this.cells = Thrift.copyList(args.cells, [ttypes.Cell]);
    }
    if (args.isChecked !== undefined && args.isChecked !== null) {
      this.isChecked = args.isChecked;
    }
    if (args.treeinfo !== undefined && args.treeinfo !== null) {
      this.treeinfo = args.treeinfo;
    }
  }
};
Row.prototype = {};
Row.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.cells = [];
        var _rtmp36 = input.readListBegin();
        var _size5 = _rtmp36.size || 0;
        for (var _i7 = 0; _i7 < _size5; ++_i7) {
          var elem8 = null;
          elem8 = new ttypes.Cell();
          elem8.read(input);
          this.cells.push(elem8);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.isChecked = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.treeinfo = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Row.prototype.write = function(output) {
  output.writeStructBegin('Row');
  if (this.cells !== null && this.cells !== undefined) {
    output.writeFieldBegin('cells', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.cells.length);
    for (var iter9 in this.cells) {
      if (this.cells.hasOwnProperty(iter9)) {
        iter9 = this.cells[iter9];
        iter9.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.isChecked !== null && this.isChecked !== undefined) {
    output.writeFieldBegin('isChecked', Thrift.Type.BOOL, 2);
    output.writeBool(this.isChecked);
    output.writeFieldEnd();
  }
  if (this.treeinfo !== null && this.treeinfo !== undefined) {
    output.writeFieldBegin('treeinfo', Thrift.Type.STRING, 3);
    output.writeString(this.treeinfo);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Column = module.exports.Column = function(args) {
  this.title = null;
  this.width = null;
  this.fixed = null;
  this.hideSelection = null;
  this.defaultFormat = null;
  if (args) {
    if (args.title !== undefined && args.title !== null) {
      this.title = args.title;
    }
    if (args.width !== undefined && args.width !== null) {
      this.width = args.width;
    }
    if (args.fixed !== undefined && args.fixed !== null) {
      this.fixed = args.fixed;
    }
    if (args.hideSelection !== undefined && args.hideSelection !== null) {
      this.hideSelection = args.hideSelection;
    }
    if (args.defaultFormat !== undefined && args.defaultFormat !== null) {
      this.defaultFormat = new ttypes.Format(args.defaultFormat);
    }
  }
};
Column.prototype = {};
Column.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.title = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.width = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.fixed = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.hideSelection = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.defaultFormat = new ttypes.Format();
        this.defaultFormat.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Column.prototype.write = function(output) {
  output.writeStructBegin('Column');
  if (this.title !== null && this.title !== undefined) {
    output.writeFieldBegin('title', Thrift.Type.STRING, 1);
    output.writeString(this.title);
    output.writeFieldEnd();
  }
  if (this.width !== null && this.width !== undefined) {
    output.writeFieldBegin('width', Thrift.Type.I32, 2);
    output.writeI32(this.width);
    output.writeFieldEnd();
  }
  if (this.fixed !== null && this.fixed !== undefined) {
    output.writeFieldBegin('fixed', Thrift.Type.BOOL, 3);
    output.writeBool(this.fixed);
    output.writeFieldEnd();
  }
  if (this.hideSelection !== null && this.hideSelection !== undefined) {
    output.writeFieldBegin('hideSelection', Thrift.Type.BOOL, 4);
    output.writeBool(this.hideSelection);
    output.writeFieldEnd();
  }
  if (this.defaultFormat !== null && this.defaultFormat !== undefined) {
    output.writeFieldBegin('defaultFormat', Thrift.Type.STRUCT, 5);
    this.defaultFormat.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListSpec = module.exports.ListSpec = function(args) {
  this.bgColor = null;
  this.canClickColumns = null;
  this.showGrid = null;
  this.showHeader = null;
  this.showCheckBoxes = null;
  if (args) {
    if (args.bgColor !== undefined && args.bgColor !== null) {
      this.bgColor = new ttypes.Color(args.bgColor);
    }
    if (args.canClickColumns !== undefined && args.canClickColumns !== null) {
      this.canClickColumns = args.canClickColumns;
    }
    if (args.showGrid !== undefined && args.showGrid !== null) {
      this.showGrid = args.showGrid;
    }
    if (args.showHeader !== undefined && args.showHeader !== null) {
      this.showHeader = args.showHeader;
    }
    if (args.showCheckBoxes !== undefined && args.showCheckBoxes !== null) {
      this.showCheckBoxes = args.showCheckBoxes;
    }
  }
};
ListSpec.prototype = {};
ListSpec.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.bgColor = new ttypes.Color();
        this.bgColor.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.canClickColumns = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.showGrid = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.showHeader = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.showCheckBoxes = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListSpec.prototype.write = function(output) {
  output.writeStructBegin('ListSpec');
  if (this.bgColor !== null && this.bgColor !== undefined) {
    output.writeFieldBegin('bgColor', Thrift.Type.STRUCT, 1);
    this.bgColor.write(output);
    output.writeFieldEnd();
  }
  if (this.canClickColumns !== null && this.canClickColumns !== undefined) {
    output.writeFieldBegin('canClickColumns', Thrift.Type.BOOL, 2);
    output.writeBool(this.canClickColumns);
    output.writeFieldEnd();
  }
  if (this.showGrid !== null && this.showGrid !== undefined) {
    output.writeFieldBegin('showGrid', Thrift.Type.BOOL, 3);
    output.writeBool(this.showGrid);
    output.writeFieldEnd();
  }
  if (this.showHeader !== null && this.showHeader !== undefined) {
    output.writeFieldBegin('showHeader', Thrift.Type.BOOL, 4);
    output.writeBool(this.showHeader);
    output.writeFieldEnd();
  }
  if (this.showCheckBoxes !== null && this.showCheckBoxes !== undefined) {
    output.writeFieldBegin('showCheckBoxes', Thrift.Type.BOOL, 5);
    output.writeBool(this.showCheckBoxes);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MenuItem = module.exports.MenuItem = function(args) {
  this.text = null;
  this.command = null;
  this.enabled = null;
  this.checked = null;
  if (args) {
    if (args.text !== undefined && args.text !== null) {
      this.text = args.text;
    }
    if (args.command !== undefined && args.command !== null) {
      this.command = args.command;
    }
    if (args.enabled !== undefined && args.enabled !== null) {
      this.enabled = args.enabled;
    }
    if (args.checked !== undefined && args.checked !== null) {
      this.checked = args.checked;
    }
  }
};
MenuItem.prototype = {};
MenuItem.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.text = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.command = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.enabled = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.checked = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MenuItem.prototype.write = function(output) {
  output.writeStructBegin('MenuItem');
  if (this.text !== null && this.text !== undefined) {
    output.writeFieldBegin('text', Thrift.Type.STRING, 1);
    output.writeString(this.text);
    output.writeFieldEnd();
  }
  if (this.command !== null && this.command !== undefined) {
    output.writeFieldBegin('command', Thrift.Type.I32, 2);
    output.writeI32(this.command);
    output.writeFieldEnd();
  }
  if (this.enabled !== null && this.enabled !== undefined) {
    output.writeFieldBegin('enabled', Thrift.Type.BOOL, 3);
    output.writeBool(this.enabled);
    output.writeFieldEnd();
  }
  if (this.checked !== null && this.checked !== undefined) {
    output.writeFieldBegin('checked', Thrift.Type.BOOL, 4);
    output.writeBool(this.checked);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SelRange = module.exports.SelRange = function(args) {
  this.first = null;
  this.last = null;
  if (args) {
    if (args.first !== undefined && args.first !== null) {
      this.first = args.first;
    }
    if (args.last !== undefined && args.last !== null) {
      this.last = args.last;
    }
  }
};
SelRange.prototype = {};
SelRange.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.first = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.last = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SelRange.prototype.write = function(output) {
  output.writeStructBegin('SelRange');
  if (this.first !== null && this.first !== undefined) {
    output.writeFieldBegin('first', Thrift.Type.I64, 1);
    output.writeI64(this.first);
    output.writeFieldEnd();
  }
  if (this.last !== null && this.last !== undefined) {
    output.writeFieldBegin('last', Thrift.Type.I64, 2);
    output.writeI64(this.last);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var EditInfo = module.exports.EditInfo = function(args) {
  this.editString = null;
  this.column = null;
  this.range = null;
  if (args) {
    if (args.editString !== undefined && args.editString !== null) {
      this.editString = args.editString;
    }
    if (args.column !== undefined && args.column !== null) {
      this.column = args.column;
    }
    if (args.range !== undefined && args.range !== null) {
      this.range = new ttypes.SelRange(args.range);
    }
  }
};
EditInfo.prototype = {};
EditInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.editString = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.column = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.range = new ttypes.SelRange();
        this.range.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EditInfo.prototype.write = function(output) {
  output.writeStructBegin('EditInfo');
  if (this.editString !== null && this.editString !== undefined) {
    output.writeFieldBegin('editString', Thrift.Type.STRING, 1);
    output.writeString(this.editString);
    output.writeFieldEnd();
  }
  if (this.column !== null && this.column !== undefined) {
    output.writeFieldBegin('column', Thrift.Type.I32, 2);
    output.writeI32(this.column);
    output.writeFieldEnd();
  }
  if (this.range !== null && this.range !== undefined) {
    output.writeFieldBegin('range', Thrift.Type.STRUCT, 3);
    this.range.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Tooltip = module.exports.Tooltip = function(args) {
  this.target = null;
  this.text = null;
  if (args) {
    if (args.target !== undefined && args.target !== null) {
      this.target = args.target;
    }
    if (args.text !== undefined && args.text !== null) {
      this.text = args.text;
    }
  }
};
Tooltip.prototype = {};
Tooltip.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.target = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.text = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Tooltip.prototype.write = function(output) {
  output.writeStructBegin('Tooltip');
  if (this.target !== null && this.target !== undefined) {
    output.writeFieldBegin('target', Thrift.Type.I32, 1);
    output.writeI32(this.target);
    output.writeFieldEnd();
  }
  if (this.text !== null && this.text !== undefined) {
    output.writeFieldBegin('text', Thrift.Type.STRING, 2);
    output.writeString(this.text);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Drag = module.exports.Drag = function(args) {
  this.result = null;
  this.text = null;
  this.row = null;
  this.col = null;
  if (args) {
    if (args.result !== undefined && args.result !== null) {
      this.result = args.result;
    }
    if (args.text !== undefined && args.text !== null) {
      this.text = args.text;
    }
    if (args.row !== undefined && args.row !== null) {
      this.row = args.row;
    }
    if (args.col !== undefined && args.col !== null) {
      this.col = args.col;
    }
  }
};
Drag.prototype = {};
Drag.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.result = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.text = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.row = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.col = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Drag.prototype.write = function(output) {
  output.writeStructBegin('Drag');
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.BOOL, 1);
    output.writeBool(this.result);
    output.writeFieldEnd();
  }
  if (this.text !== null && this.text !== undefined) {
    output.writeFieldBegin('text', Thrift.Type.STRING, 2);
    output.writeString(this.text);
    output.writeFieldEnd();
  }
  if (this.row !== null && this.row !== undefined) {
    output.writeFieldBegin('row', Thrift.Type.I64, 3);
    output.writeI64(this.row);
    output.writeFieldEnd();
  }
  if (this.col !== null && this.col !== undefined) {
    output.writeFieldBegin('col', Thrift.Type.I32, 4);
    output.writeI32(this.col);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var HelpTag = module.exports.HelpTag = function(args) {
  this.available = null;
  this.text = null;
  if (args) {
    if (args.available !== undefined && args.available !== null) {
      this.available = args.available;
    }
    if (args.text !== undefined && args.text !== null) {
      this.text = args.text;
    }
  }
};
HelpTag.prototype = {};
HelpTag.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.available = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.text = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

HelpTag.prototype.write = function(output) {
  output.writeStructBegin('HelpTag');
  if (this.available !== null && this.available !== undefined) {
    output.writeFieldBegin('available', Thrift.Type.BOOL, 1);
    output.writeBool(this.available);
    output.writeFieldEnd();
  }
  if (this.text !== null && this.text !== undefined) {
    output.writeFieldBegin('text', Thrift.Type.STRING, 2);
    output.writeString(this.text);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Note = module.exports.Note = function(args) {
  this.what = null;
  this.seq = null;
  this.ensureVisible = null;
  this.row = null;
  this.anonPos = null;
  if (args) {
    if (args.what !== undefined && args.what !== null) {
      this.what = args.what;
    }
    if (args.seq !== undefined && args.seq !== null) {
      this.seq = args.seq;
    }
    if (args.ensureVisible !== undefined && args.ensureVisible !== null) {
      this.ensureVisible = args.ensureVisible;
    }
    if (args.row !== undefined && args.row !== null) {
      this.row = args.row;
    }
    if (args.anonPos !== undefined && args.anonPos !== null) {
      this.anonPos = args.anonPos;
    }
  }
};
Note.prototype = {};
Note.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.what = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.seq = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.ensureVisible = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.row = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.anonPos = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Note.prototype.write = function(output) {
  output.writeStructBegin('Note');
  if (this.what !== null && this.what !== undefined) {
    output.writeFieldBegin('what', Thrift.Type.I32, 1);
    output.writeI32(this.what);
    output.writeFieldEnd();
  }
  if (this.seq !== null && this.seq !== undefined) {
    output.writeFieldBegin('seq', Thrift.Type.I64, 2);
    output.writeI64(this.seq);
    output.writeFieldEnd();
  }
  if (this.ensureVisible !== null && this.ensureVisible !== undefined) {
    output.writeFieldBegin('ensureVisible', Thrift.Type.I64, 3);
    output.writeI64(this.ensureVisible);
    output.writeFieldEnd();
  }
  if (this.row !== null && this.row !== undefined) {
    output.writeFieldBegin('row', Thrift.Type.I64, 4);
    output.writeI64(this.row);
    output.writeFieldEnd();
  }
  if (this.anonPos !== null && this.anonPos !== undefined) {
    output.writeFieldBegin('anonPos', Thrift.Type.STRING, 5);
    output.writeString(this.anonPos);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ChunkInfo = module.exports.ChunkInfo = function(args) {
  this.numberOfRows = null;
  this.fractionBefore = null;
  this.fractionAfter = null;
  this.atStart = null;
  this.atEnd = null;
  if (args) {
    if (args.numberOfRows !== undefined && args.numberOfRows !== null) {
      this.numberOfRows = args.numberOfRows;
    }
    if (args.fractionBefore !== undefined && args.fractionBefore !== null) {
      this.fractionBefore = args.fractionBefore;
    }
    if (args.fractionAfter !== undefined && args.fractionAfter !== null) {
      this.fractionAfter = args.fractionAfter;
    }
    if (args.atStart !== undefined && args.atStart !== null) {
      this.atStart = args.atStart;
    }
    if (args.atEnd !== undefined && args.atEnd !== null) {
      this.atEnd = args.atEnd;
    }
  }
};
ChunkInfo.prototype = {};
ChunkInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.numberOfRows = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.DOUBLE) {
        this.fractionBefore = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.DOUBLE) {
        this.fractionAfter = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.atStart = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.atEnd = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChunkInfo.prototype.write = function(output) {
  output.writeStructBegin('ChunkInfo');
  if (this.numberOfRows !== null && this.numberOfRows !== undefined) {
    output.writeFieldBegin('numberOfRows', Thrift.Type.I32, 1);
    output.writeI32(this.numberOfRows);
    output.writeFieldEnd();
  }
  if (this.fractionBefore !== null && this.fractionBefore !== undefined) {
    output.writeFieldBegin('fractionBefore', Thrift.Type.DOUBLE, 2);
    output.writeDouble(this.fractionBefore);
    output.writeFieldEnd();
  }
  if (this.fractionAfter !== null && this.fractionAfter !== undefined) {
    output.writeFieldBegin('fractionAfter', Thrift.Type.DOUBLE, 3);
    output.writeDouble(this.fractionAfter);
    output.writeFieldEnd();
  }
  if (this.atStart !== null && this.atStart !== undefined) {
    output.writeFieldBegin('atStart', Thrift.Type.BOOL, 4);
    output.writeBool(this.atStart);
    output.writeFieldEnd();
  }
  if (this.atEnd !== null && this.atEnd !== undefined) {
    output.writeFieldBegin('atEnd', Thrift.Type.BOOL, 5);
    output.writeBool(this.atEnd);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AddRowsResult = module.exports.AddRowsResult = function(args) {
  this.chunkInfo = null;
  this.rows = null;
  if (args) {
    if (args.chunkInfo !== undefined && args.chunkInfo !== null) {
      this.chunkInfo = new ttypes.ChunkInfo(args.chunkInfo);
    }
    if (args.rows !== undefined && args.rows !== null) {
      this.rows = args.rows;
    }
  }
};
AddRowsResult.prototype = {};
AddRowsResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.chunkInfo = new ttypes.ChunkInfo();
        this.chunkInfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.rows = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AddRowsResult.prototype.write = function(output) {
  output.writeStructBegin('AddRowsResult');
  if (this.chunkInfo !== null && this.chunkInfo !== undefined) {
    output.writeFieldBegin('chunkInfo', Thrift.Type.STRUCT, 1);
    this.chunkInfo.write(output);
    output.writeFieldEnd();
  }
  if (this.rows !== null && this.rows !== undefined) {
    output.writeFieldBegin('rows', Thrift.Type.I32, 2);
    output.writeI32(this.rows);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NavigateResult = module.exports.NavigateResult = function(args) {
  this.chunkInfo = null;
  this.chunkPos = null;
  if (args) {
    if (args.chunkInfo !== undefined && args.chunkInfo !== null) {
      this.chunkInfo = new ttypes.ChunkInfo(args.chunkInfo);
    }
    if (args.chunkPos !== undefined && args.chunkPos !== null) {
      this.chunkPos = args.chunkPos;
    }
  }
};
NavigateResult.prototype = {};
NavigateResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.chunkInfo = new ttypes.ChunkInfo();
        this.chunkInfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.chunkPos = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NavigateResult.prototype.write = function(output) {
  output.writeStructBegin('NavigateResult');
  if (this.chunkInfo !== null && this.chunkInfo !== undefined) {
    output.writeFieldBegin('chunkInfo', Thrift.Type.STRUCT, 1);
    this.chunkInfo.write(output);
    output.writeFieldEnd();
  }
  if (this.chunkPos !== null && this.chunkPos !== undefined) {
    output.writeFieldBegin('chunkPos', Thrift.Type.I32, 2);
    output.writeI32(this.chunkPos);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SelectionResult = module.exports.SelectionResult = function(args) {
  this.row = null;
  this.pos = null;
  if (args) {
    if (args.row !== undefined && args.row !== null) {
      this.row = args.row;
    }
    if (args.pos !== undefined && args.pos !== null) {
      this.pos = args.pos;
    }
  }
};
SelectionResult.prototype = {};
SelectionResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.row = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.pos = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SelectionResult.prototype.write = function(output) {
  output.writeStructBegin('SelectionResult');
  if (this.row !== null && this.row !== undefined) {
    output.writeFieldBegin('row', Thrift.Type.I32, 1);
    output.writeI32(this.row);
    output.writeFieldEnd();
  }
  if (this.pos !== null && this.pos !== undefined) {
    output.writeFieldBegin('pos', Thrift.Type.STRING, 2);
    output.writeString(this.pos);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var StackBarInfo = module.exports.StackBarInfo = function(args) {
  this.currentLevel = null;
  this.maxLevel = null;
  if (args) {
    if (args.currentLevel !== undefined && args.currentLevel !== null) {
      this.currentLevel = args.currentLevel;
    }
    if (args.maxLevel !== undefined && args.maxLevel !== null) {
      this.maxLevel = args.maxLevel;
    }
  }
};
StackBarInfo.prototype = {};
StackBarInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.DOUBLE) {
        this.currentLevel = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.DOUBLE) {
        this.maxLevel = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

StackBarInfo.prototype.write = function(output) {
  output.writeStructBegin('StackBarInfo');
  if (this.currentLevel !== null && this.currentLevel !== undefined) {
    output.writeFieldBegin('currentLevel', Thrift.Type.DOUBLE, 1);
    output.writeDouble(this.currentLevel);
    output.writeFieldEnd();
  }
  if (this.maxLevel !== null && this.maxLevel !== undefined) {
    output.writeFieldBegin('maxLevel', Thrift.Type.DOUBLE, 2);
    output.writeDouble(this.maxLevel);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TraceCustomParameter = module.exports.TraceCustomParameter = function(args) {
  this.name = null;
  this.value = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.value !== undefined && args.value !== null) {
      this.value = args.value;
    }
  }
};
TraceCustomParameter.prototype = {};
TraceCustomParameter.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.value = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TraceCustomParameter.prototype.write = function(output) {
  output.writeStructBegin('TraceCustomParameter');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.STRING, 2);
    output.writeString(this.value);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TraceFindParams = module.exports.TraceFindParams = function(args) {
  this.findWhat = null;
  this.useRange = null;
  this.rangeStart = null;
  this.rangeEnd = null;
  this.textSearch = null;
  this.searchColumn = null;
  this.columnName = null;
  this.matchCase = null;
  this.matchWord = null;
  this.columns = null;
  this.searchHistory = null;
  this.customParameters = null;
  if (args) {
    if (args.findWhat !== undefined && args.findWhat !== null) {
      this.findWhat = args.findWhat;
    }
    if (args.useRange !== undefined && args.useRange !== null) {
      this.useRange = args.useRange;
    }
    if (args.rangeStart !== undefined && args.rangeStart !== null) {
      this.rangeStart = args.rangeStart;
    }
    if (args.rangeEnd !== undefined && args.rangeEnd !== null) {
      this.rangeEnd = args.rangeEnd;
    }
    if (args.textSearch !== undefined && args.textSearch !== null) {
      this.textSearch = args.textSearch;
    }
    if (args.searchColumn !== undefined && args.searchColumn !== null) {
      this.searchColumn = args.searchColumn;
    }
    if (args.columnName !== undefined && args.columnName !== null) {
      this.columnName = args.columnName;
    }
    if (args.matchCase !== undefined && args.matchCase !== null) {
      this.matchCase = args.matchCase;
    }
    if (args.matchWord !== undefined && args.matchWord !== null) {
      this.matchWord = args.matchWord;
    }
    if (args.columns !== undefined && args.columns !== null) {
      this.columns = Thrift.copyList(args.columns, [null]);
    }
    if (args.searchHistory !== undefined && args.searchHistory !== null) {
      this.searchHistory = Thrift.copyList(args.searchHistory, [null]);
    }
    if (args.customParameters !== undefined && args.customParameters !== null) {
      this.customParameters = Thrift.copyList(args.customParameters, [ttypes.TraceCustomParameter]);
    }
  }
};
TraceFindParams.prototype = {};
TraceFindParams.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.findWhat = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.useRange = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.rangeStart = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.rangeEnd = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.textSearch = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.searchColumn = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.columnName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.BOOL) {
        this.matchCase = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.BOOL) {
        this.matchWord = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.LIST) {
        this.columns = [];
        var _rtmp311 = input.readListBegin();
        var _size10 = _rtmp311.size || 0;
        for (var _i12 = 0; _i12 < _size10; ++_i12) {
          var elem13 = null;
          elem13 = input.readString().value;
          this.columns.push(elem13);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.LIST) {
        this.searchHistory = [];
        var _rtmp315 = input.readListBegin();
        var _size14 = _rtmp315.size || 0;
        for (var _i16 = 0; _i16 < _size14; ++_i16) {
          var elem17 = null;
          elem17 = input.readString().value;
          this.searchHistory.push(elem17);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.LIST) {
        this.customParameters = [];
        var _rtmp319 = input.readListBegin();
        var _size18 = _rtmp319.size || 0;
        for (var _i20 = 0; _i20 < _size18; ++_i20) {
          var elem21 = null;
          elem21 = new ttypes.TraceCustomParameter();
          elem21.read(input);
          this.customParameters.push(elem21);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TraceFindParams.prototype.write = function(output) {
  output.writeStructBegin('TraceFindParams');
  if (this.findWhat !== null && this.findWhat !== undefined) {
    output.writeFieldBegin('findWhat', Thrift.Type.STRING, 1);
    output.writeString(this.findWhat);
    output.writeFieldEnd();
  }
  if (this.useRange !== null && this.useRange !== undefined) {
    output.writeFieldBegin('useRange', Thrift.Type.BOOL, 2);
    output.writeBool(this.useRange);
    output.writeFieldEnd();
  }
  if (this.rangeStart !== null && this.rangeStart !== undefined) {
    output.writeFieldBegin('rangeStart', Thrift.Type.I64, 3);
    output.writeI64(this.rangeStart);
    output.writeFieldEnd();
  }
  if (this.rangeEnd !== null && this.rangeEnd !== undefined) {
    output.writeFieldBegin('rangeEnd', Thrift.Type.I64, 4);
    output.writeI64(this.rangeEnd);
    output.writeFieldEnd();
  }
  if (this.textSearch !== null && this.textSearch !== undefined) {
    output.writeFieldBegin('textSearch', Thrift.Type.BOOL, 5);
    output.writeBool(this.textSearch);
    output.writeFieldEnd();
  }
  if (this.searchColumn !== null && this.searchColumn !== undefined) {
    output.writeFieldBegin('searchColumn', Thrift.Type.I32, 6);
    output.writeI32(this.searchColumn);
    output.writeFieldEnd();
  }
  if (this.columnName !== null && this.columnName !== undefined) {
    output.writeFieldBegin('columnName', Thrift.Type.STRING, 7);
    output.writeString(this.columnName);
    output.writeFieldEnd();
  }
  if (this.matchCase !== null && this.matchCase !== undefined) {
    output.writeFieldBegin('matchCase', Thrift.Type.BOOL, 8);
    output.writeBool(this.matchCase);
    output.writeFieldEnd();
  }
  if (this.matchWord !== null && this.matchWord !== undefined) {
    output.writeFieldBegin('matchWord', Thrift.Type.BOOL, 9);
    output.writeBool(this.matchWord);
    output.writeFieldEnd();
  }
  if (this.columns !== null && this.columns !== undefined) {
    output.writeFieldBegin('columns', Thrift.Type.LIST, 10);
    output.writeListBegin(Thrift.Type.STRING, this.columns.length);
    for (var iter22 in this.columns) {
      if (this.columns.hasOwnProperty(iter22)) {
        iter22 = this.columns[iter22];
        output.writeString(iter22);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.searchHistory !== null && this.searchHistory !== undefined) {
    output.writeFieldBegin('searchHistory', Thrift.Type.LIST, 11);
    output.writeListBegin(Thrift.Type.STRING, this.searchHistory.length);
    for (var iter23 in this.searchHistory) {
      if (this.searchHistory.hasOwnProperty(iter23)) {
        iter23 = this.searchHistory[iter23];
        output.writeString(iter23);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.customParameters !== null && this.customParameters !== undefined) {
    output.writeFieldBegin('customParameters', Thrift.Type.LIST, 12);
    output.writeListBegin(Thrift.Type.STRUCT, this.customParameters.length);
    for (var iter24 in this.customParameters) {
      if (this.customParameters.hasOwnProperty(iter24)) {
        iter24 = this.customParameters[iter24];
        iter24.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TraceProgress = module.exports.TraceProgress = function(args) {
  this.current = null;
  this.maxvalue = null;
  if (args) {
    if (args.current !== undefined && args.current !== null) {
      this.current = args.current;
    }
    if (args.maxvalue !== undefined && args.maxvalue !== null) {
      this.maxvalue = args.maxvalue;
    }
  }
};
TraceProgress.prototype = {};
TraceProgress.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.current = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.maxvalue = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TraceProgress.prototype.write = function(output) {
  output.writeStructBegin('TraceProgress');
  if (this.current !== null && this.current !== undefined) {
    output.writeFieldBegin('current', Thrift.Type.I32, 1);
    output.writeI32(this.current);
    output.writeFieldEnd();
  }
  if (this.maxvalue !== null && this.maxvalue !== undefined) {
    output.writeFieldBegin('maxvalue', Thrift.Type.I32, 2);
    output.writeI32(this.maxvalue);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DragDropFeedback = module.exports.DragDropFeedback = function(args) {
  this.target = null;
  this.rowIdx = null;
  this.colIdx = null;
  if (args) {
    if (args.target !== undefined && args.target !== null) {
      this.target = args.target;
    }
    if (args.rowIdx !== undefined && args.rowIdx !== null) {
      this.rowIdx = args.rowIdx;
    }
    if (args.colIdx !== undefined && args.colIdx !== null) {
      this.colIdx = args.colIdx;
    }
  }
};
DragDropFeedback.prototype = {};
DragDropFeedback.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.target = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.rowIdx = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.colIdx = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DragDropFeedback.prototype.write = function(output) {
  output.writeStructBegin('DragDropFeedback');
  if (this.target !== null && this.target !== undefined) {
    output.writeFieldBegin('target', Thrift.Type.I32, 1);
    output.writeI32(this.target);
    output.writeFieldEnd();
  }
  if (this.rowIdx !== null && this.rowIdx !== undefined) {
    output.writeFieldBegin('rowIdx', Thrift.Type.I32, 2);
    output.writeI32(this.rowIdx);
    output.writeFieldEnd();
  }
  if (this.colIdx !== null && this.colIdx !== undefined) {
    output.writeFieldBegin('colIdx', Thrift.Type.I32, 3);
    output.writeI32(this.colIdx);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListWindowRenderParameters = module.exports.ListWindowRenderParameters = function(args) {
  this.listSpec = null;
  this.columns = null;
  this.rows = null;
  this.selection = null;
  this.offset = null;
  this.dragDropFeedback = null;
  this.hpos = null;
  if (args) {
    if (args.listSpec !== undefined && args.listSpec !== null) {
      this.listSpec = new ttypes.ListSpec(args.listSpec);
    }
    if (args.columns !== undefined && args.columns !== null) {
      this.columns = Thrift.copyList(args.columns, [ttypes.Column]);
    }
    if (args.rows !== undefined && args.rows !== null) {
      this.rows = Thrift.copyList(args.rows, [ttypes.Row]);
    }
    if (args.selection !== undefined && args.selection !== null) {
      this.selection = Thrift.copyList(args.selection, [ttypes.SelRange]);
    }
    if (args.offset !== undefined && args.offset !== null) {
      this.offset = args.offset;
    }
    if (args.dragDropFeedback !== undefined && args.dragDropFeedback !== null) {
      this.dragDropFeedback = new ttypes.DragDropFeedback(args.dragDropFeedback);
    }
    if (args.hpos !== undefined && args.hpos !== null) {
      this.hpos = args.hpos;
    }
  }
};
ListWindowRenderParameters.prototype = {};
ListWindowRenderParameters.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.listSpec = new ttypes.ListSpec();
        this.listSpec.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.columns = [];
        var _rtmp326 = input.readListBegin();
        var _size25 = _rtmp326.size || 0;
        for (var _i27 = 0; _i27 < _size25; ++_i27) {
          var elem28 = null;
          elem28 = new ttypes.Column();
          elem28.read(input);
          this.columns.push(elem28);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        this.rows = [];
        var _rtmp330 = input.readListBegin();
        var _size29 = _rtmp330.size || 0;
        for (var _i31 = 0; _i31 < _size29; ++_i31) {
          var elem32 = null;
          elem32 = new ttypes.Row();
          elem32.read(input);
          this.rows.push(elem32);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        this.selection = [];
        var _rtmp334 = input.readListBegin();
        var _size33 = _rtmp334.size || 0;
        for (var _i35 = 0; _i35 < _size33; ++_i35) {
          var elem36 = null;
          elem36 = new ttypes.SelRange();
          elem36.read(input);
          this.selection.push(elem36);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.offset = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.dragDropFeedback = new ttypes.DragDropFeedback();
        this.dragDropFeedback.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.hpos = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListWindowRenderParameters.prototype.write = function(output) {
  output.writeStructBegin('ListWindowRenderParameters');
  if (this.listSpec !== null && this.listSpec !== undefined) {
    output.writeFieldBegin('listSpec', Thrift.Type.STRUCT, 1);
    this.listSpec.write(output);
    output.writeFieldEnd();
  }
  if (this.columns !== null && this.columns !== undefined) {
    output.writeFieldBegin('columns', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.columns.length);
    for (var iter37 in this.columns) {
      if (this.columns.hasOwnProperty(iter37)) {
        iter37 = this.columns[iter37];
        iter37.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.rows !== null && this.rows !== undefined) {
    output.writeFieldBegin('rows', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.rows.length);
    for (var iter38 in this.rows) {
      if (this.rows.hasOwnProperty(iter38)) {
        iter38 = this.rows[iter38];
        iter38.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.selection !== null && this.selection !== undefined) {
    output.writeFieldBegin('selection', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.selection.length);
    for (var iter39 in this.selection) {
      if (this.selection.hasOwnProperty(iter39)) {
        iter39 = this.selection[iter39];
        iter39.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.offset !== null && this.offset !== undefined) {
    output.writeFieldBegin('offset', Thrift.Type.I64, 5);
    output.writeI64(this.offset);
    output.writeFieldEnd();
  }
  if (this.dragDropFeedback !== null && this.dragDropFeedback !== undefined) {
    output.writeFieldBegin('dragDropFeedback', Thrift.Type.STRUCT, 6);
    this.dragDropFeedback.write(output);
    output.writeFieldEnd();
  }
  if (this.hpos !== null && this.hpos !== undefined) {
    output.writeFieldBegin('hpos', Thrift.Type.I32, 7);
    output.writeI32(this.hpos);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ttypes.SLIDING_POS_NONE = '';
