//
// Autogenerated by Thrift Compiler (0.14.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
if (typeof Int64 === 'undefined' && typeof require === 'function') {
  var Int64 = require('node-int64');
}


//HELPER FUNCTIONS AND STRUCTURES

var ProjectManager_CreateEwwFile_args = function(args) {
  this.file_path = null;
  if (args) {
    if (args.file_path !== undefined && args.file_path !== null) {
      this.file_path = args.file_path;
    }
  }
};
ProjectManager_CreateEwwFile_args.prototype = {};
ProjectManager_CreateEwwFile_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.file_path = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_CreateEwwFile_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_CreateEwwFile_args');
  if (this.file_path !== null && this.file_path !== undefined) {
    output.writeFieldBegin('file_path', Thrift.Type.STRING, 1);
    output.writeString(this.file_path);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_CreateEwwFile_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ProjectManagerError) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.WorkspaceContext(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ProjectManager_CreateEwwFile_result.prototype = {};
ProjectManager_CreateEwwFile_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.WorkspaceContext();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ProjectManagerError();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_CreateEwwFile_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_CreateEwwFile_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_DisableAutoDataStoring_args = function(args) {
};
ProjectManager_DisableAutoDataStoring_args.prototype = {};
ProjectManager_DisableAutoDataStoring_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_DisableAutoDataStoring_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_DisableAutoDataStoring_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_DisableAutoDataStoring_result = function(args) {
};
ProjectManager_DisableAutoDataStoring_result.prototype = {};
ProjectManager_DisableAutoDataStoring_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_DisableAutoDataStoring_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_DisableAutoDataStoring_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_LoadEwwFile_args = function(args) {
  this.file_path = null;
  if (args) {
    if (args.file_path !== undefined && args.file_path !== null) {
      this.file_path = args.file_path;
    }
  }
};
ProjectManager_LoadEwwFile_args.prototype = {};
ProjectManager_LoadEwwFile_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.file_path = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_LoadEwwFile_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_LoadEwwFile_args');
  if (this.file_path !== null && this.file_path !== undefined) {
    output.writeFieldBegin('file_path', Thrift.Type.STRING, 1);
    output.writeString(this.file_path);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_LoadEwwFile_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ProjectManagerError) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.WorkspaceContext(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ProjectManager_LoadEwwFile_result.prototype = {};
ProjectManager_LoadEwwFile_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.WorkspaceContext();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ProjectManagerError();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_LoadEwwFile_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_LoadEwwFile_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_IsWorkspaceModified_args = function(args) {
};
ProjectManager_IsWorkspaceModified_args.prototype = {};
ProjectManager_IsWorkspaceModified_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_IsWorkspaceModified_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_IsWorkspaceModified_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_IsWorkspaceModified_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
ProjectManager_IsWorkspaceModified_result.prototype = {};
ProjectManager_IsWorkspaceModified_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_IsWorkspaceModified_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_IsWorkspaceModified_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_SaveEwwFile_args = function(args) {
};
ProjectManager_SaveEwwFile_args.prototype = {};
ProjectManager_SaveEwwFile_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_SaveEwwFile_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_SaveEwwFile_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_SaveEwwFile_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ProjectManagerError) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ProjectManager_SaveEwwFile_result.prototype = {};
ProjectManager_SaveEwwFile_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ProjectManagerError();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_SaveEwwFile_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_SaveEwwFile_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_SaveEwwFileAs_args = function(args) {
  this.file_path = null;
  if (args) {
    if (args.file_path !== undefined && args.file_path !== null) {
      this.file_path = args.file_path;
    }
  }
};
ProjectManager_SaveEwwFileAs_args.prototype = {};
ProjectManager_SaveEwwFileAs_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.file_path = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_SaveEwwFileAs_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_SaveEwwFileAs_args');
  if (this.file_path !== null && this.file_path !== undefined) {
    output.writeFieldBegin('file_path', Thrift.Type.STRING, 1);
    output.writeString(this.file_path);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_SaveEwwFileAs_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ProjectManagerError) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ProjectManager_SaveEwwFileAs_result.prototype = {};
ProjectManager_SaveEwwFileAs_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ProjectManagerError();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_SaveEwwFileAs_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_SaveEwwFileAs_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_GetProjects_args = function(args) {
};
ProjectManager_GetProjects_args.prototype = {};
ProjectManager_GetProjects_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_GetProjects_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_GetProjects_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_GetProjects_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.ProjectContext]);
    }
  }
};
ProjectManager_GetProjects_result.prototype = {};
ProjectManager_GetProjects_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp371 = input.readListBegin();
        var _size70 = _rtmp371.size || 0;
        for (var _i72 = 0; _i72 < _size70; ++_i72) {
          var elem73 = null;
          elem73 = new ttypes.ProjectContext();
          elem73.read(input);
          this.success.push(elem73);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_GetProjects_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_GetProjects_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter74 in this.success) {
      if (this.success.hasOwnProperty(iter74)) {
        iter74 = this.success[iter74];
        iter74.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_GetLoadedProjects_args = function(args) {
};
ProjectManager_GetLoadedProjects_args.prototype = {};
ProjectManager_GetLoadedProjects_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_GetLoadedProjects_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_GetLoadedProjects_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_GetLoadedProjects_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.ProjectContext]);
    }
  }
};
ProjectManager_GetLoadedProjects_result.prototype = {};
ProjectManager_GetLoadedProjects_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp376 = input.readListBegin();
        var _size75 = _rtmp376.size || 0;
        for (var _i77 = 0; _i77 < _size75; ++_i77) {
          var elem78 = null;
          elem78 = new ttypes.ProjectContext();
          elem78.read(input);
          this.success.push(elem78);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_GetLoadedProjects_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_GetLoadedProjects_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter79 in this.success) {
      if (this.success.hasOwnProperty(iter79)) {
        iter79 = this.success[iter79];
        iter79.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_GetCurrentProject_args = function(args) {
};
ProjectManager_GetCurrentProject_args.prototype = {};
ProjectManager_GetCurrentProject_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_GetCurrentProject_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_GetCurrentProject_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_GetCurrentProject_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ProjectManagerError) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.ProjectContext(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ProjectManager_GetCurrentProject_result.prototype = {};
ProjectManager_GetCurrentProject_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ProjectContext();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ProjectManagerError();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_GetCurrentProject_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_GetCurrentProject_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_SetCurrentProject_args = function(args) {
  this.ctx = null;
  if (args) {
    if (args.ctx !== undefined && args.ctx !== null) {
      this.ctx = new ttypes.ProjectContext(args.ctx);
    }
  }
};
ProjectManager_SetCurrentProject_args.prototype = {};
ProjectManager_SetCurrentProject_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ctx = new ttypes.ProjectContext();
        this.ctx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_SetCurrentProject_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_SetCurrentProject_args');
  if (this.ctx !== null && this.ctx !== undefined) {
    output.writeFieldBegin('ctx', Thrift.Type.STRUCT, 1);
    this.ctx.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_SetCurrentProject_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ProjectManagerError) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ProjectManager_SetCurrentProject_result.prototype = {};
ProjectManager_SetCurrentProject_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ProjectManagerError();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_SetCurrentProject_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_SetCurrentProject_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_CloseWorkspace_args = function(args) {
};
ProjectManager_CloseWorkspace_args.prototype = {};
ProjectManager_CloseWorkspace_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_CloseWorkspace_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_CloseWorkspace_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_CloseWorkspace_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ProjectManagerError) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ProjectManager_CloseWorkspace_result.prototype = {};
ProjectManager_CloseWorkspace_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ProjectManagerError();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_CloseWorkspace_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_CloseWorkspace_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_CreateEwpFile_args = function(args) {
  this.file_path = null;
  if (args) {
    if (args.file_path !== undefined && args.file_path !== null) {
      this.file_path = args.file_path;
    }
  }
};
ProjectManager_CreateEwpFile_args.prototype = {};
ProjectManager_CreateEwpFile_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.file_path = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_CreateEwpFile_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_CreateEwpFile_args');
  if (this.file_path !== null && this.file_path !== undefined) {
    output.writeFieldBegin('file_path', Thrift.Type.STRING, 1);
    output.writeString(this.file_path);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_CreateEwpFile_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ProjectManagerError) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.ProjectContext(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ProjectManager_CreateEwpFile_result.prototype = {};
ProjectManager_CreateEwpFile_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ProjectContext();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ProjectManagerError();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_CreateEwpFile_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_CreateEwpFile_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_CreateEwpFileWithToolChain_args = function(args) {
  this.file_path = null;
  this.toolchain = null;
  if (args) {
    if (args.file_path !== undefined && args.file_path !== null) {
      this.file_path = args.file_path;
    }
    if (args.toolchain !== undefined && args.toolchain !== null) {
      this.toolchain = args.toolchain;
    }
  }
};
ProjectManager_CreateEwpFileWithToolChain_args.prototype = {};
ProjectManager_CreateEwpFileWithToolChain_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.file_path = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.toolchain = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_CreateEwpFileWithToolChain_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_CreateEwpFileWithToolChain_args');
  if (this.file_path !== null && this.file_path !== undefined) {
    output.writeFieldBegin('file_path', Thrift.Type.STRING, 1);
    output.writeString(this.file_path);
    output.writeFieldEnd();
  }
  if (this.toolchain !== null && this.toolchain !== undefined) {
    output.writeFieldBegin('toolchain', Thrift.Type.STRING, 2);
    output.writeString(this.toolchain);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_CreateEwpFileWithToolChain_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ProjectManagerError) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.ProjectContext(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ProjectManager_CreateEwpFileWithToolChain_result.prototype = {};
ProjectManager_CreateEwpFileWithToolChain_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ProjectContext();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ProjectManagerError();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_CreateEwpFileWithToolChain_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_CreateEwpFileWithToolChain_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_CreateProjectFromTemplate_args = function(args) {
  this.template_path = null;
  this.project_path = null;
  if (args) {
    if (args.template_path !== undefined && args.template_path !== null) {
      this.template_path = args.template_path;
    }
    if (args.project_path !== undefined && args.project_path !== null) {
      this.project_path = args.project_path;
    }
  }
};
ProjectManager_CreateProjectFromTemplate_args.prototype = {};
ProjectManager_CreateProjectFromTemplate_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.template_path = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.project_path = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_CreateProjectFromTemplate_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_CreateProjectFromTemplate_args');
  if (this.template_path !== null && this.template_path !== undefined) {
    output.writeFieldBegin('template_path', Thrift.Type.STRING, 1);
    output.writeString(this.template_path);
    output.writeFieldEnd();
  }
  if (this.project_path !== null && this.project_path !== undefined) {
    output.writeFieldBegin('project_path', Thrift.Type.STRING, 2);
    output.writeString(this.project_path);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_CreateProjectFromTemplate_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ProjectManagerError) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.ProjectContext(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ProjectManager_CreateProjectFromTemplate_result.prototype = {};
ProjectManager_CreateProjectFromTemplate_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ProjectContext();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ProjectManagerError();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_CreateProjectFromTemplate_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_CreateProjectFromTemplate_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_LoadEwpFile_args = function(args) {
  this.file_path = null;
  if (args) {
    if (args.file_path !== undefined && args.file_path !== null) {
      this.file_path = args.file_path;
    }
  }
};
ProjectManager_LoadEwpFile_args.prototype = {};
ProjectManager_LoadEwpFile_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.file_path = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_LoadEwpFile_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_LoadEwpFile_args');
  if (this.file_path !== null && this.file_path !== undefined) {
    output.writeFieldBegin('file_path', Thrift.Type.STRING, 1);
    output.writeString(this.file_path);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_LoadEwpFile_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ProjectManagerError) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.ProjectContext(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ProjectManager_LoadEwpFile_result.prototype = {};
ProjectManager_LoadEwpFile_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ProjectContext();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ProjectManagerError();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_LoadEwpFile_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_LoadEwpFile_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_SaveEwpFile_args = function(args) {
  this.project = null;
  if (args) {
    if (args.project !== undefined && args.project !== null) {
      this.project = new ttypes.ProjectContext(args.project);
    }
  }
};
ProjectManager_SaveEwpFile_args.prototype = {};
ProjectManager_SaveEwpFile_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.project = new ttypes.ProjectContext();
        this.project.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_SaveEwpFile_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_SaveEwpFile_args');
  if (this.project !== null && this.project !== undefined) {
    output.writeFieldBegin('project', Thrift.Type.STRUCT, 1);
    this.project.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_SaveEwpFile_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ProjectManagerError) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ProjectManager_SaveEwpFile_result.prototype = {};
ProjectManager_SaveEwpFile_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ProjectManagerError();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_SaveEwpFile_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_SaveEwpFile_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_ReloadProject_args = function(args) {
  this.project = null;
  if (args) {
    if (args.project !== undefined && args.project !== null) {
      this.project = new ttypes.ProjectContext(args.project);
    }
  }
};
ProjectManager_ReloadProject_args.prototype = {};
ProjectManager_ReloadProject_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.project = new ttypes.ProjectContext();
        this.project.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_ReloadProject_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_ReloadProject_args');
  if (this.project !== null && this.project !== undefined) {
    output.writeFieldBegin('project', Thrift.Type.STRUCT, 1);
    this.project.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_ReloadProject_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ProjectManagerError) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.ProjectContext(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ProjectManager_ReloadProject_result.prototype = {};
ProjectManager_ReloadProject_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ProjectContext();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ProjectManagerError();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_ReloadProject_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_ReloadProject_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_SaveEwpFileAs_args = function(args) {
  this.project = null;
  this.file_path = null;
  if (args) {
    if (args.project !== undefined && args.project !== null) {
      this.project = new ttypes.ProjectContext(args.project);
    }
    if (args.file_path !== undefined && args.file_path !== null) {
      this.file_path = args.file_path;
    }
  }
};
ProjectManager_SaveEwpFileAs_args.prototype = {};
ProjectManager_SaveEwpFileAs_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.project = new ttypes.ProjectContext();
        this.project.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.file_path = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_SaveEwpFileAs_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_SaveEwpFileAs_args');
  if (this.project !== null && this.project !== undefined) {
    output.writeFieldBegin('project', Thrift.Type.STRUCT, 1);
    this.project.write(output);
    output.writeFieldEnd();
  }
  if (this.file_path !== null && this.file_path !== undefined) {
    output.writeFieldBegin('file_path', Thrift.Type.STRING, 2);
    output.writeString(this.file_path);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_SaveEwpFileAs_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ProjectManagerError) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ProjectManager_SaveEwpFileAs_result.prototype = {};
ProjectManager_SaveEwpFileAs_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ProjectManagerError();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_SaveEwpFileAs_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_SaveEwpFileAs_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_ImportProjectFiles_args = function(args) {
  this.ctx = null;
  this.file_path = null;
  if (args) {
    if (args.ctx !== undefined && args.ctx !== null) {
      this.ctx = new ttypes.ProjectContext(args.ctx);
    }
    if (args.file_path !== undefined && args.file_path !== null) {
      this.file_path = args.file_path;
    }
  }
};
ProjectManager_ImportProjectFiles_args.prototype = {};
ProjectManager_ImportProjectFiles_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ctx = new ttypes.ProjectContext();
        this.ctx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.file_path = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_ImportProjectFiles_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_ImportProjectFiles_args');
  if (this.ctx !== null && this.ctx !== undefined) {
    output.writeFieldBegin('ctx', Thrift.Type.STRUCT, 1);
    this.ctx.write(output);
    output.writeFieldEnd();
  }
  if (this.file_path !== null && this.file_path !== undefined) {
    output.writeFieldBegin('file_path', Thrift.Type.STRING, 2);
    output.writeString(this.file_path);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_ImportProjectFiles_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ProjectManagerError) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ProjectManager_ImportProjectFiles_result.prototype = {};
ProjectManager_ImportProjectFiles_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ProjectManagerError();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_ImportProjectFiles_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_ImportProjectFiles_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_IsModified_args = function(args) {
  this.project = null;
  if (args) {
    if (args.project !== undefined && args.project !== null) {
      this.project = new ttypes.ProjectContext(args.project);
    }
  }
};
ProjectManager_IsModified_args.prototype = {};
ProjectManager_IsModified_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.project = new ttypes.ProjectContext();
        this.project.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_IsModified_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_IsModified_args');
  if (this.project !== null && this.project !== undefined) {
    output.writeFieldBegin('project', Thrift.Type.STRUCT, 1);
    this.project.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_IsModified_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
ProjectManager_IsModified_result.prototype = {};
ProjectManager_IsModified_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_IsModified_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_IsModified_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_IsMemberOfCurrentProject_args = function(args) {
  this.file_path = null;
  if (args) {
    if (args.file_path !== undefined && args.file_path !== null) {
      this.file_path = args.file_path;
    }
  }
};
ProjectManager_IsMemberOfCurrentProject_args.prototype = {};
ProjectManager_IsMemberOfCurrentProject_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.file_path = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_IsMemberOfCurrentProject_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_IsMemberOfCurrentProject_args');
  if (this.file_path !== null && this.file_path !== undefined) {
    output.writeFieldBegin('file_path', Thrift.Type.STRING, 1);
    output.writeString(this.file_path);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_IsMemberOfCurrentProject_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
ProjectManager_IsMemberOfCurrentProject_result.prototype = {};
ProjectManager_IsMemberOfCurrentProject_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_IsMemberOfCurrentProject_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_IsMemberOfCurrentProject_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_FindMatchingHeaderOrSourceFile_args = function(args) {
  this.file_path = null;
  if (args) {
    if (args.file_path !== undefined && args.file_path !== null) {
      this.file_path = args.file_path;
    }
  }
};
ProjectManager_FindMatchingHeaderOrSourceFile_args.prototype = {};
ProjectManager_FindMatchingHeaderOrSourceFile_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.file_path = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_FindMatchingHeaderOrSourceFile_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_FindMatchingHeaderOrSourceFile_args');
  if (this.file_path !== null && this.file_path !== undefined) {
    output.writeFieldBegin('file_path', Thrift.Type.STRING, 1);
    output.writeString(this.file_path);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_FindMatchingHeaderOrSourceFile_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
  }
};
ProjectManager_FindMatchingHeaderOrSourceFile_result.prototype = {};
ProjectManager_FindMatchingHeaderOrSourceFile_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp381 = input.readListBegin();
        var _size80 = _rtmp381.size || 0;
        for (var _i82 = 0; _i82 < _size80; ++_i82) {
          var elem83 = null;
          elem83 = input.readString().value;
          this.success.push(elem83);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_FindMatchingHeaderOrSourceFile_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_FindMatchingHeaderOrSourceFile_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter84 in this.success) {
      if (this.success.hasOwnProperty(iter84)) {
        iter84 = this.success[iter84];
        output.writeString(iter84);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_GetProject_args = function(args) {
  this.file_path = null;
  if (args) {
    if (args.file_path !== undefined && args.file_path !== null) {
      this.file_path = args.file_path;
    }
  }
};
ProjectManager_GetProject_args.prototype = {};
ProjectManager_GetProject_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.file_path = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_GetProject_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_GetProject_args');
  if (this.file_path !== null && this.file_path !== undefined) {
    output.writeFieldBegin('file_path', Thrift.Type.STRING, 1);
    output.writeString(this.file_path);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_GetProject_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ProjectManagerError) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.ProjectContext(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ProjectManager_GetProject_result.prototype = {};
ProjectManager_GetProject_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ProjectContext();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ProjectManagerError();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_GetProject_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_GetProject_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_CloseProject_args = function(args) {
  this.project = null;
  if (args) {
    if (args.project !== undefined && args.project !== null) {
      this.project = new ttypes.ProjectContext(args.project);
    }
  }
};
ProjectManager_CloseProject_args.prototype = {};
ProjectManager_CloseProject_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.project = new ttypes.ProjectContext();
        this.project.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_CloseProject_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_CloseProject_args');
  if (this.project !== null && this.project !== undefined) {
    output.writeFieldBegin('project', Thrift.Type.STRUCT, 1);
    this.project.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_CloseProject_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ProjectManagerError) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ProjectManager_CloseProject_result.prototype = {};
ProjectManager_CloseProject_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ProjectManagerError();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_CloseProject_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_CloseProject_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_RemoveProject_args = function(args) {
  this.project = null;
  if (args) {
    if (args.project !== undefined && args.project !== null) {
      this.project = new ttypes.ProjectContext(args.project);
    }
  }
};
ProjectManager_RemoveProject_args.prototype = {};
ProjectManager_RemoveProject_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.project = new ttypes.ProjectContext();
        this.project.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_RemoveProject_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_RemoveProject_args');
  if (this.project !== null && this.project !== undefined) {
    output.writeFieldBegin('project', Thrift.Type.STRUCT, 1);
    this.project.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_RemoveProject_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ProjectManagerError) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ProjectManager_RemoveProject_result.prototype = {};
ProjectManager_RemoveProject_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ProjectManagerError();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_RemoveProject_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_RemoveProject_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_GetFiles_args = function(args) {
  this.project = null;
  this.configurationName = null;
  this.col = null;
  if (args) {
    if (args.project !== undefined && args.project !== null) {
      this.project = new ttypes.ProjectContext(args.project);
    }
    if (args.configurationName !== undefined && args.configurationName !== null) {
      this.configurationName = args.configurationName;
    }
    if (args.col !== undefined && args.col !== null) {
      this.col = args.col;
    }
  }
};
ProjectManager_GetFiles_args.prototype = {};
ProjectManager_GetFiles_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.project = new ttypes.ProjectContext();
        this.project.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.configurationName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.col = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_GetFiles_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_GetFiles_args');
  if (this.project !== null && this.project !== undefined) {
    output.writeFieldBegin('project', Thrift.Type.STRUCT, 1);
    this.project.write(output);
    output.writeFieldEnd();
  }
  if (this.configurationName !== null && this.configurationName !== undefined) {
    output.writeFieldBegin('configurationName', Thrift.Type.STRING, 2);
    output.writeString(this.configurationName);
    output.writeFieldEnd();
  }
  if (this.col !== null && this.col !== undefined) {
    output.writeFieldBegin('col', Thrift.Type.I32, 3);
    output.writeI32(this.col);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_GetFiles_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ProjectManagerError) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ProjectManager_GetFiles_result.prototype = {};
ProjectManager_GetFiles_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp386 = input.readListBegin();
        var _size85 = _rtmp386.size || 0;
        for (var _i87 = 0; _i87 < _size85; ++_i87) {
          var elem88 = null;
          elem88 = input.readString().value;
          this.success.push(elem88);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ProjectManagerError();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_GetFiles_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_GetFiles_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter89 in this.success) {
      if (this.success.hasOwnProperty(iter89)) {
        iter89 = this.success[iter89];
        output.writeString(iter89);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_AddConfiguration_args = function(args) {
  this.config = null;
  this.project = null;
  this.isDebug = null;
  if (args) {
    if (args.config !== undefined && args.config !== null) {
      this.config = new ttypes.Configuration(args.config);
    }
    if (args.project !== undefined && args.project !== null) {
      this.project = new ttypes.ProjectContext(args.project);
    }
    if (args.isDebug !== undefined && args.isDebug !== null) {
      this.isDebug = args.isDebug;
    }
  }
};
ProjectManager_AddConfiguration_args.prototype = {};
ProjectManager_AddConfiguration_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.config = new ttypes.Configuration();
        this.config.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.project = new ttypes.ProjectContext();
        this.project.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.isDebug = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_AddConfiguration_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_AddConfiguration_args');
  if (this.config !== null && this.config !== undefined) {
    output.writeFieldBegin('config', Thrift.Type.STRUCT, 1);
    this.config.write(output);
    output.writeFieldEnd();
  }
  if (this.project !== null && this.project !== undefined) {
    output.writeFieldBegin('project', Thrift.Type.STRUCT, 2);
    this.project.write(output);
    output.writeFieldEnd();
  }
  if (this.isDebug !== null && this.isDebug !== undefined) {
    output.writeFieldBegin('isDebug', Thrift.Type.BOOL, 3);
    output.writeBool(this.isDebug);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_AddConfiguration_result = function(args) {
};
ProjectManager_AddConfiguration_result.prototype = {};
ProjectManager_AddConfiguration_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_AddConfiguration_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_AddConfiguration_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_AddConfigurationNoSave_args = function(args) {
  this.project = null;
  this.config = null;
  this.basedOnName = null;
  if (args) {
    if (args.project !== undefined && args.project !== null) {
      this.project = new ttypes.ProjectContext(args.project);
    }
    if (args.config !== undefined && args.config !== null) {
      this.config = new ttypes.Configuration(args.config);
    }
    if (args.basedOnName !== undefined && args.basedOnName !== null) {
      this.basedOnName = args.basedOnName;
    }
  }
};
ProjectManager_AddConfigurationNoSave_args.prototype = {};
ProjectManager_AddConfigurationNoSave_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.project = new ttypes.ProjectContext();
        this.project.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.config = new ttypes.Configuration();
        this.config.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.basedOnName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_AddConfigurationNoSave_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_AddConfigurationNoSave_args');
  if (this.project !== null && this.project !== undefined) {
    output.writeFieldBegin('project', Thrift.Type.STRUCT, 1);
    this.project.write(output);
    output.writeFieldEnd();
  }
  if (this.config !== null && this.config !== undefined) {
    output.writeFieldBegin('config', Thrift.Type.STRUCT, 2);
    this.config.write(output);
    output.writeFieldEnd();
  }
  if (this.basedOnName !== null && this.basedOnName !== undefined) {
    output.writeFieldBegin('basedOnName', Thrift.Type.STRING, 3);
    output.writeString(this.basedOnName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_AddConfigurationNoSave_result = function(args) {
};
ProjectManager_AddConfigurationNoSave_result.prototype = {};
ProjectManager_AddConfigurationNoSave_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_AddConfigurationNoSave_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_AddConfigurationNoSave_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_RemoveConfiguration_args = function(args) {
  this.configurationName = null;
  this.project = null;
  if (args) {
    if (args.configurationName !== undefined && args.configurationName !== null) {
      this.configurationName = args.configurationName;
    }
    if (args.project !== undefined && args.project !== null) {
      this.project = new ttypes.ProjectContext(args.project);
    }
  }
};
ProjectManager_RemoveConfiguration_args.prototype = {};
ProjectManager_RemoveConfiguration_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.configurationName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.project = new ttypes.ProjectContext();
        this.project.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_RemoveConfiguration_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_RemoveConfiguration_args');
  if (this.configurationName !== null && this.configurationName !== undefined) {
    output.writeFieldBegin('configurationName', Thrift.Type.STRING, 1);
    output.writeString(this.configurationName);
    output.writeFieldEnd();
  }
  if (this.project !== null && this.project !== undefined) {
    output.writeFieldBegin('project', Thrift.Type.STRUCT, 2);
    this.project.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_RemoveConfiguration_result = function(args) {
};
ProjectManager_RemoveConfiguration_result.prototype = {};
ProjectManager_RemoveConfiguration_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_RemoveConfiguration_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_RemoveConfiguration_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_RemoveConfigurationNoSave_args = function(args) {
  this.project = null;
  this.configurationName = null;
  if (args) {
    if (args.project !== undefined && args.project !== null) {
      this.project = new ttypes.ProjectContext(args.project);
    }
    if (args.configurationName !== undefined && args.configurationName !== null) {
      this.configurationName = args.configurationName;
    }
  }
};
ProjectManager_RemoveConfigurationNoSave_args.prototype = {};
ProjectManager_RemoveConfigurationNoSave_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.project = new ttypes.ProjectContext();
        this.project.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.configurationName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_RemoveConfigurationNoSave_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_RemoveConfigurationNoSave_args');
  if (this.project !== null && this.project !== undefined) {
    output.writeFieldBegin('project', Thrift.Type.STRUCT, 1);
    this.project.write(output);
    output.writeFieldEnd();
  }
  if (this.configurationName !== null && this.configurationName !== undefined) {
    output.writeFieldBegin('configurationName', Thrift.Type.STRING, 2);
    output.writeString(this.configurationName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_RemoveConfigurationNoSave_result = function(args) {
};
ProjectManager_RemoveConfigurationNoSave_result.prototype = {};
ProjectManager_RemoveConfigurationNoSave_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_RemoveConfigurationNoSave_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_RemoveConfigurationNoSave_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_GetConfigurations_args = function(args) {
  this.project = null;
  if (args) {
    if (args.project !== undefined && args.project !== null) {
      this.project = new ttypes.ProjectContext(args.project);
    }
  }
};
ProjectManager_GetConfigurations_args.prototype = {};
ProjectManager_GetConfigurations_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.project = new ttypes.ProjectContext();
        this.project.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_GetConfigurations_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_GetConfigurations_args');
  if (this.project !== null && this.project !== undefined) {
    output.writeFieldBegin('project', Thrift.Type.STRUCT, 1);
    this.project.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_GetConfigurations_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.Configuration]);
    }
  }
};
ProjectManager_GetConfigurations_result.prototype = {};
ProjectManager_GetConfigurations_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp391 = input.readListBegin();
        var _size90 = _rtmp391.size || 0;
        for (var _i92 = 0; _i92 < _size90; ++_i92) {
          var elem93 = null;
          elem93 = new ttypes.Configuration();
          elem93.read(input);
          this.success.push(elem93);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_GetConfigurations_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_GetConfigurations_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter94 in this.success) {
      if (this.success.hasOwnProperty(iter94)) {
        iter94 = this.success[iter94];
        iter94.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_SetConfigurationsOrder_args = function(args) {
  this.project = null;
  this.configNames = null;
  if (args) {
    if (args.project !== undefined && args.project !== null) {
      this.project = new ttypes.ProjectContext(args.project);
    }
    if (args.configNames !== undefined && args.configNames !== null) {
      this.configNames = Thrift.copyList(args.configNames, [null]);
    }
  }
};
ProjectManager_SetConfigurationsOrder_args.prototype = {};
ProjectManager_SetConfigurationsOrder_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.project = new ttypes.ProjectContext();
        this.project.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.configNames = [];
        var _rtmp396 = input.readListBegin();
        var _size95 = _rtmp396.size || 0;
        for (var _i97 = 0; _i97 < _size95; ++_i97) {
          var elem98 = null;
          elem98 = input.readString().value;
          this.configNames.push(elem98);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_SetConfigurationsOrder_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_SetConfigurationsOrder_args');
  if (this.project !== null && this.project !== undefined) {
    output.writeFieldBegin('project', Thrift.Type.STRUCT, 1);
    this.project.write(output);
    output.writeFieldEnd();
  }
  if (this.configNames !== null && this.configNames !== undefined) {
    output.writeFieldBegin('configNames', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.configNames.length);
    for (var iter99 in this.configNames) {
      if (this.configNames.hasOwnProperty(iter99)) {
        iter99 = this.configNames[iter99];
        output.writeString(iter99);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_SetConfigurationsOrder_result = function(args) {
};
ProjectManager_SetConfigurationsOrder_result.prototype = {};
ProjectManager_SetConfigurationsOrder_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_SetConfigurationsOrder_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_SetConfigurationsOrder_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_GetCurrentConfiguration_args = function(args) {
  this.project = null;
  if (args) {
    if (args.project !== undefined && args.project !== null) {
      this.project = new ttypes.ProjectContext(args.project);
    }
  }
};
ProjectManager_GetCurrentConfiguration_args.prototype = {};
ProjectManager_GetCurrentConfiguration_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.project = new ttypes.ProjectContext();
        this.project.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_GetCurrentConfiguration_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_GetCurrentConfiguration_args');
  if (this.project !== null && this.project !== undefined) {
    output.writeFieldBegin('project', Thrift.Type.STRUCT, 1);
    this.project.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_GetCurrentConfiguration_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ProjectManagerError) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Configuration(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ProjectManager_GetCurrentConfiguration_result.prototype = {};
ProjectManager_GetCurrentConfiguration_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Configuration();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ProjectManagerError();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_GetCurrentConfiguration_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_GetCurrentConfiguration_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_SetCurrentConfiguration_args = function(args) {
  this.project = null;
  this.configurationName = null;
  if (args) {
    if (args.project !== undefined && args.project !== null) {
      this.project = new ttypes.ProjectContext(args.project);
    }
    if (args.configurationName !== undefined && args.configurationName !== null) {
      this.configurationName = args.configurationName;
    }
  }
};
ProjectManager_SetCurrentConfiguration_args.prototype = {};
ProjectManager_SetCurrentConfiguration_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.project = new ttypes.ProjectContext();
        this.project.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.configurationName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_SetCurrentConfiguration_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_SetCurrentConfiguration_args');
  if (this.project !== null && this.project !== undefined) {
    output.writeFieldBegin('project', Thrift.Type.STRUCT, 1);
    this.project.write(output);
    output.writeFieldEnd();
  }
  if (this.configurationName !== null && this.configurationName !== undefined) {
    output.writeFieldBegin('configurationName', Thrift.Type.STRING, 2);
    output.writeString(this.configurationName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_SetCurrentConfiguration_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ProjectManagerError) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ProjectManager_SetCurrentConfiguration_result.prototype = {};
ProjectManager_SetCurrentConfiguration_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ProjectManagerError();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_SetCurrentConfiguration_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_SetCurrentConfiguration_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_SetDesktopPathParameters_args = function(args) {
  this.platform = null;
  this.slavery = null;
  if (args) {
    if (args.platform !== undefined && args.platform !== null) {
      this.platform = args.platform;
    }
    if (args.slavery !== undefined && args.slavery !== null) {
      this.slavery = args.slavery;
    }
  }
};
ProjectManager_SetDesktopPathParameters_args.prototype = {};
ProjectManager_SetDesktopPathParameters_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.platform = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.slavery = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_SetDesktopPathParameters_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_SetDesktopPathParameters_args');
  if (this.platform !== null && this.platform !== undefined) {
    output.writeFieldBegin('platform', Thrift.Type.I32, 1);
    output.writeI32(this.platform);
    output.writeFieldEnd();
  }
  if (this.slavery !== null && this.slavery !== undefined) {
    output.writeFieldBegin('slavery', Thrift.Type.I32, 2);
    output.writeI32(this.slavery);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_SetDesktopPathParameters_result = function(args) {
};
ProjectManager_SetDesktopPathParameters_result.prototype = {};
ProjectManager_SetDesktopPathParameters_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_SetDesktopPathParameters_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_SetDesktopPathParameters_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_GetOfflineDesktopPath_args = function(args) {
};
ProjectManager_GetOfflineDesktopPath_args.prototype = {};
ProjectManager_GetOfflineDesktopPath_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_GetOfflineDesktopPath_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_GetOfflineDesktopPath_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_GetOfflineDesktopPath_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
ProjectManager_GetOfflineDesktopPath_result.prototype = {};
ProjectManager_GetOfflineDesktopPath_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_GetOfflineDesktopPath_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_GetOfflineDesktopPath_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_GetOnlineDesktopPath_args = function(args) {
};
ProjectManager_GetOnlineDesktopPath_args.prototype = {};
ProjectManager_GetOnlineDesktopPath_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_GetOnlineDesktopPath_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_GetOnlineDesktopPath_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_GetOnlineDesktopPath_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
ProjectManager_GetOnlineDesktopPath_result.prototype = {};
ProjectManager_GetOnlineDesktopPath_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_GetOnlineDesktopPath_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_GetOnlineDesktopPath_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_GetRootNode_args = function(args) {
  this.ctx = null;
  if (args) {
    if (args.ctx !== undefined && args.ctx !== null) {
      this.ctx = new ttypes.ProjectContext(args.ctx);
    }
  }
};
ProjectManager_GetRootNode_args.prototype = {};
ProjectManager_GetRootNode_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ctx = new ttypes.ProjectContext();
        this.ctx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_GetRootNode_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_GetRootNode_args');
  if (this.ctx !== null && this.ctx !== undefined) {
    output.writeFieldBegin('ctx', Thrift.Type.STRUCT, 1);
    this.ctx.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_GetRootNode_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Node(args.success);
    }
  }
};
ProjectManager_GetRootNode_result.prototype = {};
ProjectManager_GetRootNode_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Node();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_GetRootNode_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_GetRootNode_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_SetNode_args = function(args) {
  this.ctx = null;
  this.node = null;
  if (args) {
    if (args.ctx !== undefined && args.ctx !== null) {
      this.ctx = new ttypes.ProjectContext(args.ctx);
    }
    if (args.node !== undefined && args.node !== null) {
      this.node = new ttypes.Node(args.node);
    }
  }
};
ProjectManager_SetNode_args.prototype = {};
ProjectManager_SetNode_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ctx = new ttypes.ProjectContext();
        this.ctx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.node = new ttypes.Node();
        this.node.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_SetNode_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_SetNode_args');
  if (this.ctx !== null && this.ctx !== undefined) {
    output.writeFieldBegin('ctx', Thrift.Type.STRUCT, 1);
    this.ctx.write(output);
    output.writeFieldEnd();
  }
  if (this.node !== null && this.node !== undefined) {
    output.writeFieldBegin('node', Thrift.Type.STRUCT, 2);
    this.node.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_SetNode_result = function(args) {
};
ProjectManager_SetNode_result.prototype = {};
ProjectManager_SetNode_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_SetNode_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_SetNode_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_GetNodeByIndex_args = function(args) {
  this.ctx = null;
  this.nodeIndexPath = null;
  if (args) {
    if (args.ctx !== undefined && args.ctx !== null) {
      this.ctx = new ttypes.ProjectContext(args.ctx);
    }
    if (args.nodeIndexPath !== undefined && args.nodeIndexPath !== null) {
      this.nodeIndexPath = Thrift.copyList(args.nodeIndexPath, [null]);
    }
  }
};
ProjectManager_GetNodeByIndex_args.prototype = {};
ProjectManager_GetNodeByIndex_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ctx = new ttypes.ProjectContext();
        this.ctx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.nodeIndexPath = [];
        var _rtmp3101 = input.readListBegin();
        var _size100 = _rtmp3101.size || 0;
        for (var _i102 = 0; _i102 < _size100; ++_i102) {
          var elem103 = null;
          elem103 = input.readI64().value;
          this.nodeIndexPath.push(elem103);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_GetNodeByIndex_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_GetNodeByIndex_args');
  if (this.ctx !== null && this.ctx !== undefined) {
    output.writeFieldBegin('ctx', Thrift.Type.STRUCT, 1);
    this.ctx.write(output);
    output.writeFieldEnd();
  }
  if (this.nodeIndexPath !== null && this.nodeIndexPath !== undefined) {
    output.writeFieldBegin('nodeIndexPath', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.I64, this.nodeIndexPath.length);
    for (var iter104 in this.nodeIndexPath) {
      if (this.nodeIndexPath.hasOwnProperty(iter104)) {
        iter104 = this.nodeIndexPath[iter104];
        output.writeI64(iter104);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_GetNodeByIndex_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Node(args.success);
    }
  }
};
ProjectManager_GetNodeByIndex_result.prototype = {};
ProjectManager_GetNodeByIndex_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Node();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_GetNodeByIndex_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_GetNodeByIndex_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_SetNodeByIndex_args = function(args) {
  this.ctx = null;
  this.nodeIndexPath = null;
  this.node = null;
  this.save = null;
  if (args) {
    if (args.ctx !== undefined && args.ctx !== null) {
      this.ctx = new ttypes.ProjectContext(args.ctx);
    }
    if (args.nodeIndexPath !== undefined && args.nodeIndexPath !== null) {
      this.nodeIndexPath = Thrift.copyList(args.nodeIndexPath, [null]);
    }
    if (args.node !== undefined && args.node !== null) {
      this.node = new ttypes.Node(args.node);
    }
    if (args.save !== undefined && args.save !== null) {
      this.save = args.save;
    }
  }
};
ProjectManager_SetNodeByIndex_args.prototype = {};
ProjectManager_SetNodeByIndex_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ctx = new ttypes.ProjectContext();
        this.ctx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.nodeIndexPath = [];
        var _rtmp3106 = input.readListBegin();
        var _size105 = _rtmp3106.size || 0;
        for (var _i107 = 0; _i107 < _size105; ++_i107) {
          var elem108 = null;
          elem108 = input.readI64().value;
          this.nodeIndexPath.push(elem108);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.node = new ttypes.Node();
        this.node.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.save = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_SetNodeByIndex_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_SetNodeByIndex_args');
  if (this.ctx !== null && this.ctx !== undefined) {
    output.writeFieldBegin('ctx', Thrift.Type.STRUCT, 1);
    this.ctx.write(output);
    output.writeFieldEnd();
  }
  if (this.nodeIndexPath !== null && this.nodeIndexPath !== undefined) {
    output.writeFieldBegin('nodeIndexPath', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.I64, this.nodeIndexPath.length);
    for (var iter109 in this.nodeIndexPath) {
      if (this.nodeIndexPath.hasOwnProperty(iter109)) {
        iter109 = this.nodeIndexPath[iter109];
        output.writeI64(iter109);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.node !== null && this.node !== undefined) {
    output.writeFieldBegin('node', Thrift.Type.STRUCT, 3);
    this.node.write(output);
    output.writeFieldEnd();
  }
  if (this.save !== null && this.save !== undefined) {
    output.writeFieldBegin('save', Thrift.Type.BOOL, 4);
    output.writeBool(this.save);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_SetNodeByIndex_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ProjectManagerError) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ProjectManager_SetNodeByIndex_result.prototype = {};
ProjectManager_SetNodeByIndex_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ProjectManagerError();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_SetNodeByIndex_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_SetNodeByIndex_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_AddNodeByIndex_args = function(args) {
  this.ctx = null;
  this.nodeIndexPath = null;
  this.node = null;
  this.save = null;
  if (args) {
    if (args.ctx !== undefined && args.ctx !== null) {
      this.ctx = new ttypes.ProjectContext(args.ctx);
    }
    if (args.nodeIndexPath !== undefined && args.nodeIndexPath !== null) {
      this.nodeIndexPath = Thrift.copyList(args.nodeIndexPath, [null]);
    }
    if (args.node !== undefined && args.node !== null) {
      this.node = new ttypes.Node(args.node);
    }
    if (args.save !== undefined && args.save !== null) {
      this.save = args.save;
    }
  }
};
ProjectManager_AddNodeByIndex_args.prototype = {};
ProjectManager_AddNodeByIndex_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ctx = new ttypes.ProjectContext();
        this.ctx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.nodeIndexPath = [];
        var _rtmp3111 = input.readListBegin();
        var _size110 = _rtmp3111.size || 0;
        for (var _i112 = 0; _i112 < _size110; ++_i112) {
          var elem113 = null;
          elem113 = input.readI64().value;
          this.nodeIndexPath.push(elem113);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.node = new ttypes.Node();
        this.node.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.save = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_AddNodeByIndex_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_AddNodeByIndex_args');
  if (this.ctx !== null && this.ctx !== undefined) {
    output.writeFieldBegin('ctx', Thrift.Type.STRUCT, 1);
    this.ctx.write(output);
    output.writeFieldEnd();
  }
  if (this.nodeIndexPath !== null && this.nodeIndexPath !== undefined) {
    output.writeFieldBegin('nodeIndexPath', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.I64, this.nodeIndexPath.length);
    for (var iter114 in this.nodeIndexPath) {
      if (this.nodeIndexPath.hasOwnProperty(iter114)) {
        iter114 = this.nodeIndexPath[iter114];
        output.writeI64(iter114);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.node !== null && this.node !== undefined) {
    output.writeFieldBegin('node', Thrift.Type.STRUCT, 3);
    this.node.write(output);
    output.writeFieldEnd();
  }
  if (this.save !== null && this.save !== undefined) {
    output.writeFieldBegin('save', Thrift.Type.BOOL, 4);
    output.writeBool(this.save);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_AddNodeByIndex_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ProjectManagerError) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ProjectManager_AddNodeByIndex_result.prototype = {};
ProjectManager_AddNodeByIndex_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ProjectManagerError();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_AddNodeByIndex_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_AddNodeByIndex_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_RemoveNodeByIndex_args = function(args) {
  this.ctx = null;
  this.nodeIndexPath = null;
  this.save = null;
  if (args) {
    if (args.ctx !== undefined && args.ctx !== null) {
      this.ctx = new ttypes.ProjectContext(args.ctx);
    }
    if (args.nodeIndexPath !== undefined && args.nodeIndexPath !== null) {
      this.nodeIndexPath = Thrift.copyList(args.nodeIndexPath, [null]);
    }
    if (args.save !== undefined && args.save !== null) {
      this.save = args.save;
    }
  }
};
ProjectManager_RemoveNodeByIndex_args.prototype = {};
ProjectManager_RemoveNodeByIndex_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ctx = new ttypes.ProjectContext();
        this.ctx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.nodeIndexPath = [];
        var _rtmp3116 = input.readListBegin();
        var _size115 = _rtmp3116.size || 0;
        for (var _i117 = 0; _i117 < _size115; ++_i117) {
          var elem118 = null;
          elem118 = input.readI64().value;
          this.nodeIndexPath.push(elem118);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.save = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_RemoveNodeByIndex_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_RemoveNodeByIndex_args');
  if (this.ctx !== null && this.ctx !== undefined) {
    output.writeFieldBegin('ctx', Thrift.Type.STRUCT, 1);
    this.ctx.write(output);
    output.writeFieldEnd();
  }
  if (this.nodeIndexPath !== null && this.nodeIndexPath !== undefined) {
    output.writeFieldBegin('nodeIndexPath', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.I64, this.nodeIndexPath.length);
    for (var iter119 in this.nodeIndexPath) {
      if (this.nodeIndexPath.hasOwnProperty(iter119)) {
        iter119 = this.nodeIndexPath[iter119];
        output.writeI64(iter119);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.save !== null && this.save !== undefined) {
    output.writeFieldBegin('save', Thrift.Type.BOOL, 3);
    output.writeBool(this.save);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_RemoveNodeByIndex_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ProjectManagerError) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ProjectManager_RemoveNodeByIndex_result.prototype = {};
ProjectManager_RemoveNodeByIndex_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ProjectManagerError();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_RemoveNodeByIndex_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_RemoveNodeByIndex_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_UpdateNodeByIndex_args = function(args) {
  this.ctx = null;
  this.nodeIndexPath = null;
  this.node = null;
  this.save = null;
  if (args) {
    if (args.ctx !== undefined && args.ctx !== null) {
      this.ctx = new ttypes.ProjectContext(args.ctx);
    }
    if (args.nodeIndexPath !== undefined && args.nodeIndexPath !== null) {
      this.nodeIndexPath = Thrift.copyList(args.nodeIndexPath, [null]);
    }
    if (args.node !== undefined && args.node !== null) {
      this.node = new ttypes.Node(args.node);
    }
    if (args.save !== undefined && args.save !== null) {
      this.save = args.save;
    }
  }
};
ProjectManager_UpdateNodeByIndex_args.prototype = {};
ProjectManager_UpdateNodeByIndex_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ctx = new ttypes.ProjectContext();
        this.ctx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.nodeIndexPath = [];
        var _rtmp3121 = input.readListBegin();
        var _size120 = _rtmp3121.size || 0;
        for (var _i122 = 0; _i122 < _size120; ++_i122) {
          var elem123 = null;
          elem123 = input.readI64().value;
          this.nodeIndexPath.push(elem123);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.node = new ttypes.Node();
        this.node.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.save = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_UpdateNodeByIndex_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_UpdateNodeByIndex_args');
  if (this.ctx !== null && this.ctx !== undefined) {
    output.writeFieldBegin('ctx', Thrift.Type.STRUCT, 1);
    this.ctx.write(output);
    output.writeFieldEnd();
  }
  if (this.nodeIndexPath !== null && this.nodeIndexPath !== undefined) {
    output.writeFieldBegin('nodeIndexPath', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.I64, this.nodeIndexPath.length);
    for (var iter124 in this.nodeIndexPath) {
      if (this.nodeIndexPath.hasOwnProperty(iter124)) {
        iter124 = this.nodeIndexPath[iter124];
        output.writeI64(iter124);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.node !== null && this.node !== undefined) {
    output.writeFieldBegin('node', Thrift.Type.STRUCT, 3);
    this.node.write(output);
    output.writeFieldEnd();
  }
  if (this.save !== null && this.save !== undefined) {
    output.writeFieldBegin('save', Thrift.Type.BOOL, 4);
    output.writeBool(this.save);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_UpdateNodeByIndex_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ProjectManagerError) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ProjectManager_UpdateNodeByIndex_result.prototype = {};
ProjectManager_UpdateNodeByIndex_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ProjectManagerError();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_UpdateNodeByIndex_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_UpdateNodeByIndex_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_CanMoveNode_args = function(args) {
  this.ctx = null;
  this.srcNodeIndexPath = null;
  this.dstNodeIndexPath = null;
  if (args) {
    if (args.ctx !== undefined && args.ctx !== null) {
      this.ctx = new ttypes.ProjectContext(args.ctx);
    }
    if (args.srcNodeIndexPath !== undefined && args.srcNodeIndexPath !== null) {
      this.srcNodeIndexPath = Thrift.copyList(args.srcNodeIndexPath, [null]);
    }
    if (args.dstNodeIndexPath !== undefined && args.dstNodeIndexPath !== null) {
      this.dstNodeIndexPath = Thrift.copyList(args.dstNodeIndexPath, [null]);
    }
  }
};
ProjectManager_CanMoveNode_args.prototype = {};
ProjectManager_CanMoveNode_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ctx = new ttypes.ProjectContext();
        this.ctx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.srcNodeIndexPath = [];
        var _rtmp3126 = input.readListBegin();
        var _size125 = _rtmp3126.size || 0;
        for (var _i127 = 0; _i127 < _size125; ++_i127) {
          var elem128 = null;
          elem128 = input.readI64().value;
          this.srcNodeIndexPath.push(elem128);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        this.dstNodeIndexPath = [];
        var _rtmp3130 = input.readListBegin();
        var _size129 = _rtmp3130.size || 0;
        for (var _i131 = 0; _i131 < _size129; ++_i131) {
          var elem132 = null;
          elem132 = input.readI64().value;
          this.dstNodeIndexPath.push(elem132);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_CanMoveNode_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_CanMoveNode_args');
  if (this.ctx !== null && this.ctx !== undefined) {
    output.writeFieldBegin('ctx', Thrift.Type.STRUCT, 1);
    this.ctx.write(output);
    output.writeFieldEnd();
  }
  if (this.srcNodeIndexPath !== null && this.srcNodeIndexPath !== undefined) {
    output.writeFieldBegin('srcNodeIndexPath', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.I64, this.srcNodeIndexPath.length);
    for (var iter133 in this.srcNodeIndexPath) {
      if (this.srcNodeIndexPath.hasOwnProperty(iter133)) {
        iter133 = this.srcNodeIndexPath[iter133];
        output.writeI64(iter133);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.dstNodeIndexPath !== null && this.dstNodeIndexPath !== undefined) {
    output.writeFieldBegin('dstNodeIndexPath', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.I64, this.dstNodeIndexPath.length);
    for (var iter134 in this.dstNodeIndexPath) {
      if (this.dstNodeIndexPath.hasOwnProperty(iter134)) {
        iter134 = this.dstNodeIndexPath[iter134];
        output.writeI64(iter134);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_CanMoveNode_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ProjectManagerError) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ProjectManager_CanMoveNode_result.prototype = {};
ProjectManager_CanMoveNode_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ProjectManagerError();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_CanMoveNode_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_CanMoveNode_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_MoveNode_args = function(args) {
  this.ctx = null;
  this.srcNodeIndexPath = null;
  this.dstNodeIndexPath = null;
  if (args) {
    if (args.ctx !== undefined && args.ctx !== null) {
      this.ctx = new ttypes.ProjectContext(args.ctx);
    }
    if (args.srcNodeIndexPath !== undefined && args.srcNodeIndexPath !== null) {
      this.srcNodeIndexPath = Thrift.copyList(args.srcNodeIndexPath, [null]);
    }
    if (args.dstNodeIndexPath !== undefined && args.dstNodeIndexPath !== null) {
      this.dstNodeIndexPath = Thrift.copyList(args.dstNodeIndexPath, [null]);
    }
  }
};
ProjectManager_MoveNode_args.prototype = {};
ProjectManager_MoveNode_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ctx = new ttypes.ProjectContext();
        this.ctx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.srcNodeIndexPath = [];
        var _rtmp3136 = input.readListBegin();
        var _size135 = _rtmp3136.size || 0;
        for (var _i137 = 0; _i137 < _size135; ++_i137) {
          var elem138 = null;
          elem138 = input.readI64().value;
          this.srcNodeIndexPath.push(elem138);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        this.dstNodeIndexPath = [];
        var _rtmp3140 = input.readListBegin();
        var _size139 = _rtmp3140.size || 0;
        for (var _i141 = 0; _i141 < _size139; ++_i141) {
          var elem142 = null;
          elem142 = input.readI64().value;
          this.dstNodeIndexPath.push(elem142);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_MoveNode_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_MoveNode_args');
  if (this.ctx !== null && this.ctx !== undefined) {
    output.writeFieldBegin('ctx', Thrift.Type.STRUCT, 1);
    this.ctx.write(output);
    output.writeFieldEnd();
  }
  if (this.srcNodeIndexPath !== null && this.srcNodeIndexPath !== undefined) {
    output.writeFieldBegin('srcNodeIndexPath', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.I64, this.srcNodeIndexPath.length);
    for (var iter143 in this.srcNodeIndexPath) {
      if (this.srcNodeIndexPath.hasOwnProperty(iter143)) {
        iter143 = this.srcNodeIndexPath[iter143];
        output.writeI64(iter143);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.dstNodeIndexPath !== null && this.dstNodeIndexPath !== undefined) {
    output.writeFieldBegin('dstNodeIndexPath', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.I64, this.dstNodeIndexPath.length);
    for (var iter144 in this.dstNodeIndexPath) {
      if (this.dstNodeIndexPath.hasOwnProperty(iter144)) {
        iter144 = this.dstNodeIndexPath[iter144];
        output.writeI64(iter144);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_MoveNode_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ProjectManagerError) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ProjectManager_MoveNode_result.prototype = {};
ProjectManager_MoveNode_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ProjectManagerError();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_MoveNode_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_MoveNode_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_GetToolChainExtensions_args = function(args) {
  this.ctx = null;
  if (args) {
    if (args.ctx !== undefined && args.ctx !== null) {
      this.ctx = new ttypes.ProjectContext(args.ctx);
    }
  }
};
ProjectManager_GetToolChainExtensions_args.prototype = {};
ProjectManager_GetToolChainExtensions_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ctx = new ttypes.ProjectContext();
        this.ctx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_GetToolChainExtensions_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_GetToolChainExtensions_args');
  if (this.ctx !== null && this.ctx !== undefined) {
    output.writeFieldBegin('ctx', Thrift.Type.STRUCT, 1);
    this.ctx.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_GetToolChainExtensions_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
  }
};
ProjectManager_GetToolChainExtensions_result.prototype = {};
ProjectManager_GetToolChainExtensions_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp3146 = input.readListBegin();
        var _size145 = _rtmp3146.size || 0;
        for (var _i147 = 0; _i147 < _size145; ++_i147) {
          var elem148 = null;
          elem148 = input.readString().value;
          this.success.push(elem148);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_GetToolChainExtensions_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_GetToolChainExtensions_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter149 in this.success) {
      if (this.success.hasOwnProperty(iter149)) {
        iter149 = this.success[iter149];
        output.writeString(iter149);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_GetToolchains_args = function(args) {
};
ProjectManager_GetToolchains_args.prototype = {};
ProjectManager_GetToolchains_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_GetToolchains_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_GetToolchains_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_GetToolchains_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ProjectManagerError) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.Toolchain]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ProjectManager_GetToolchains_result.prototype = {};
ProjectManager_GetToolchains_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp3151 = input.readListBegin();
        var _size150 = _rtmp3151.size || 0;
        for (var _i152 = 0; _i152 < _size150; ++_i152) {
          var elem153 = null;
          elem153 = new ttypes.Toolchain();
          elem153.read(input);
          this.success.push(elem153);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ProjectManagerError();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_GetToolchains_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_GetToolchains_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter154 in this.success) {
      if (this.success.hasOwnProperty(iter154)) {
        iter154 = this.success[iter154];
        iter154.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_AddToolchain_args = function(args) {
  this.toolchain = null;
  if (args) {
    if (args.toolchain !== undefined && args.toolchain !== null) {
      this.toolchain = new ttypes.Toolchain(args.toolchain);
    }
  }
};
ProjectManager_AddToolchain_args.prototype = {};
ProjectManager_AddToolchain_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.toolchain = new ttypes.Toolchain();
        this.toolchain.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_AddToolchain_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_AddToolchain_args');
  if (this.toolchain !== null && this.toolchain !== undefined) {
    output.writeFieldBegin('toolchain', Thrift.Type.STRUCT, 1);
    this.toolchain.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_AddToolchain_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ProjectManagerError) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ProjectManager_AddToolchain_result.prototype = {};
ProjectManager_AddToolchain_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ProjectManagerError();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_AddToolchain_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_AddToolchain_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_GetBatchBuildItems_args = function(args) {
};
ProjectManager_GetBatchBuildItems_args.prototype = {};
ProjectManager_GetBatchBuildItems_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_GetBatchBuildItems_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_GetBatchBuildItems_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_GetBatchBuildItems_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ProjectManagerError) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.BatchBuildItem]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ProjectManager_GetBatchBuildItems_result.prototype = {};
ProjectManager_GetBatchBuildItems_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp3156 = input.readListBegin();
        var _size155 = _rtmp3156.size || 0;
        for (var _i157 = 0; _i157 < _size155; ++_i157) {
          var elem158 = null;
          elem158 = new ttypes.BatchBuildItem();
          elem158.read(input);
          this.success.push(elem158);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ProjectManagerError();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_GetBatchBuildItems_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_GetBatchBuildItems_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter159 in this.success) {
      if (this.success.hasOwnProperty(iter159)) {
        iter159 = this.success[iter159];
        iter159.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_SetBatchBuildItems_args = function(args) {
  this.batchBuildItems = null;
  if (args) {
    if (args.batchBuildItems !== undefined && args.batchBuildItems !== null) {
      this.batchBuildItems = Thrift.copyList(args.batchBuildItems, [ttypes.BatchBuildItem]);
    }
  }
};
ProjectManager_SetBatchBuildItems_args.prototype = {};
ProjectManager_SetBatchBuildItems_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.batchBuildItems = [];
        var _rtmp3161 = input.readListBegin();
        var _size160 = _rtmp3161.size || 0;
        for (var _i162 = 0; _i162 < _size160; ++_i162) {
          var elem163 = null;
          elem163 = new ttypes.BatchBuildItem();
          elem163.read(input);
          this.batchBuildItems.push(elem163);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_SetBatchBuildItems_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_SetBatchBuildItems_args');
  if (this.batchBuildItems !== null && this.batchBuildItems !== undefined) {
    output.writeFieldBegin('batchBuildItems', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.batchBuildItems.length);
    for (var iter164 in this.batchBuildItems) {
      if (this.batchBuildItems.hasOwnProperty(iter164)) {
        iter164 = this.batchBuildItems[iter164];
        iter164.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_SetBatchBuildItems_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ProjectManagerError) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ProjectManager_SetBatchBuildItems_result.prototype = {};
ProjectManager_SetBatchBuildItems_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ProjectManagerError();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_SetBatchBuildItems_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_SetBatchBuildItems_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_BuildProject_args = function(args) {
  this.prj = null;
  this.configurationName = null;
  this.numParallelBuilds = null;
  if (args) {
    if (args.prj !== undefined && args.prj !== null) {
      this.prj = new ttypes.ProjectContext(args.prj);
    }
    if (args.configurationName !== undefined && args.configurationName !== null) {
      this.configurationName = args.configurationName;
    }
    if (args.numParallelBuilds !== undefined && args.numParallelBuilds !== null) {
      this.numParallelBuilds = args.numParallelBuilds;
    }
  }
};
ProjectManager_BuildProject_args.prototype = {};
ProjectManager_BuildProject_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.prj = new ttypes.ProjectContext();
        this.prj.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.configurationName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.numParallelBuilds = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_BuildProject_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_BuildProject_args');
  if (this.prj !== null && this.prj !== undefined) {
    output.writeFieldBegin('prj', Thrift.Type.STRUCT, 1);
    this.prj.write(output);
    output.writeFieldEnd();
  }
  if (this.configurationName !== null && this.configurationName !== undefined) {
    output.writeFieldBegin('configurationName', Thrift.Type.STRING, 2);
    output.writeString(this.configurationName);
    output.writeFieldEnd();
  }
  if (this.numParallelBuilds !== null && this.numParallelBuilds !== undefined) {
    output.writeFieldBegin('numParallelBuilds', Thrift.Type.I32, 3);
    output.writeI32(this.numParallelBuilds);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_BuildProject_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ProjectManagerError) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.BuildResult(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ProjectManager_BuildProject_result.prototype = {};
ProjectManager_BuildProject_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.BuildResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ProjectManagerError();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_BuildProject_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_BuildProject_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_RebuildAllAsync_args = function(args) {
  this.buildItems = null;
  this.stopAtError = null;
  this.numParallelBuilds = null;
  if (args) {
    if (args.buildItems !== undefined && args.buildItems !== null) {
      this.buildItems = Thrift.copyList(args.buildItems, [ttypes.BuildItem]);
    }
    if (args.stopAtError !== undefined && args.stopAtError !== null) {
      this.stopAtError = args.stopAtError;
    }
    if (args.numParallelBuilds !== undefined && args.numParallelBuilds !== null) {
      this.numParallelBuilds = args.numParallelBuilds;
    }
  }
};
ProjectManager_RebuildAllAsync_args.prototype = {};
ProjectManager_RebuildAllAsync_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.buildItems = [];
        var _rtmp3166 = input.readListBegin();
        var _size165 = _rtmp3166.size || 0;
        for (var _i167 = 0; _i167 < _size165; ++_i167) {
          var elem168 = null;
          elem168 = new ttypes.BuildItem();
          elem168.read(input);
          this.buildItems.push(elem168);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.stopAtError = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.numParallelBuilds = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_RebuildAllAsync_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_RebuildAllAsync_args');
  if (this.buildItems !== null && this.buildItems !== undefined) {
    output.writeFieldBegin('buildItems', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.buildItems.length);
    for (var iter169 in this.buildItems) {
      if (this.buildItems.hasOwnProperty(iter169)) {
        iter169 = this.buildItems[iter169];
        iter169.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.stopAtError !== null && this.stopAtError !== undefined) {
    output.writeFieldBegin('stopAtError', Thrift.Type.BOOL, 2);
    output.writeBool(this.stopAtError);
    output.writeFieldEnd();
  }
  if (this.numParallelBuilds !== null && this.numParallelBuilds !== undefined) {
    output.writeFieldBegin('numParallelBuilds', Thrift.Type.I32, 3);
    output.writeI32(this.numParallelBuilds);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_RebuildAllAsync_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ProjectManagerError) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ProjectManager_RebuildAllAsync_result.prototype = {};
ProjectManager_RebuildAllAsync_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ProjectManagerError();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_RebuildAllAsync_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_RebuildAllAsync_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_CanCompile_args = function(args) {
  this.buildItem = null;
  if (args) {
    if (args.buildItem !== undefined && args.buildItem !== null) {
      this.buildItem = new ttypes.BuildItem(args.buildItem);
    }
  }
};
ProjectManager_CanCompile_args.prototype = {};
ProjectManager_CanCompile_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.buildItem = new ttypes.BuildItem();
        this.buildItem.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_CanCompile_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_CanCompile_args');
  if (this.buildItem !== null && this.buildItem !== undefined) {
    output.writeFieldBegin('buildItem', Thrift.Type.STRUCT, 1);
    this.buildItem.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_CanCompile_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ProjectManagerError) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ProjectManager_CanCompile_result.prototype = {};
ProjectManager_CanCompile_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ProjectManagerError();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_CanCompile_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_CanCompile_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_CompileAsync_args = function(args) {
  this.buildItem = null;
  this.numParallelBuilds = null;
  if (args) {
    if (args.buildItem !== undefined && args.buildItem !== null) {
      this.buildItem = new ttypes.BuildItem(args.buildItem);
    }
    if (args.numParallelBuilds !== undefined && args.numParallelBuilds !== null) {
      this.numParallelBuilds = args.numParallelBuilds;
    }
  }
};
ProjectManager_CompileAsync_args.prototype = {};
ProjectManager_CompileAsync_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.buildItem = new ttypes.BuildItem();
        this.buildItem.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.numParallelBuilds = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_CompileAsync_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_CompileAsync_args');
  if (this.buildItem !== null && this.buildItem !== undefined) {
    output.writeFieldBegin('buildItem', Thrift.Type.STRUCT, 1);
    this.buildItem.write(output);
    output.writeFieldEnd();
  }
  if (this.numParallelBuilds !== null && this.numParallelBuilds !== undefined) {
    output.writeFieldBegin('numParallelBuilds', Thrift.Type.I32, 2);
    output.writeI32(this.numParallelBuilds);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_CompileAsync_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ProjectManagerError) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ProjectManager_CompileAsync_result.prototype = {};
ProjectManager_CompileAsync_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ProjectManagerError();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_CompileAsync_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_CompileAsync_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_BuildAsync_args = function(args) {
  this.buildItems = null;
  this.stopAtError = null;
  this.numParallelBuilds = null;
  if (args) {
    if (args.buildItems !== undefined && args.buildItems !== null) {
      this.buildItems = Thrift.copyList(args.buildItems, [ttypes.BuildItem]);
    }
    if (args.stopAtError !== undefined && args.stopAtError !== null) {
      this.stopAtError = args.stopAtError;
    }
    if (args.numParallelBuilds !== undefined && args.numParallelBuilds !== null) {
      this.numParallelBuilds = args.numParallelBuilds;
    }
  }
};
ProjectManager_BuildAsync_args.prototype = {};
ProjectManager_BuildAsync_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.buildItems = [];
        var _rtmp3171 = input.readListBegin();
        var _size170 = _rtmp3171.size || 0;
        for (var _i172 = 0; _i172 < _size170; ++_i172) {
          var elem173 = null;
          elem173 = new ttypes.BuildItem();
          elem173.read(input);
          this.buildItems.push(elem173);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.stopAtError = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.numParallelBuilds = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_BuildAsync_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_BuildAsync_args');
  if (this.buildItems !== null && this.buildItems !== undefined) {
    output.writeFieldBegin('buildItems', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.buildItems.length);
    for (var iter174 in this.buildItems) {
      if (this.buildItems.hasOwnProperty(iter174)) {
        iter174 = this.buildItems[iter174];
        iter174.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.stopAtError !== null && this.stopAtError !== undefined) {
    output.writeFieldBegin('stopAtError', Thrift.Type.BOOL, 2);
    output.writeBool(this.stopAtError);
    output.writeFieldEnd();
  }
  if (this.numParallelBuilds !== null && this.numParallelBuilds !== undefined) {
    output.writeFieldBegin('numParallelBuilds', Thrift.Type.I32, 3);
    output.writeI32(this.numParallelBuilds);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_BuildAsync_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ProjectManagerError) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ProjectManager_BuildAsync_result.prototype = {};
ProjectManager_BuildAsync_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ProjectManagerError();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_BuildAsync_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_BuildAsync_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_CleanAsync_args = function(args) {
  this.buildItems = null;
  if (args) {
    if (args.buildItems !== undefined && args.buildItems !== null) {
      this.buildItems = Thrift.copyList(args.buildItems, [ttypes.BuildItem]);
    }
  }
};
ProjectManager_CleanAsync_args.prototype = {};
ProjectManager_CleanAsync_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.buildItems = [];
        var _rtmp3176 = input.readListBegin();
        var _size175 = _rtmp3176.size || 0;
        for (var _i177 = 0; _i177 < _size175; ++_i177) {
          var elem178 = null;
          elem178 = new ttypes.BuildItem();
          elem178.read(input);
          this.buildItems.push(elem178);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_CleanAsync_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_CleanAsync_args');
  if (this.buildItems !== null && this.buildItems !== undefined) {
    output.writeFieldBegin('buildItems', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.buildItems.length);
    for (var iter179 in this.buildItems) {
      if (this.buildItems.hasOwnProperty(iter179)) {
        iter179 = this.buildItems[iter179];
        iter179.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_CleanAsync_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ProjectManagerError) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ProjectManager_CleanAsync_result.prototype = {};
ProjectManager_CleanAsync_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ProjectManagerError();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_CleanAsync_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_CleanAsync_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_CancelBuild_args = function(args) {
};
ProjectManager_CancelBuild_args.prototype = {};
ProjectManager_CancelBuild_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_CancelBuild_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_CancelBuild_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_CancelBuild_result = function(args) {
};
ProjectManager_CancelBuild_result.prototype = {};
ProjectManager_CancelBuild_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_CancelBuild_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_CancelBuild_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_TerminateAnalysis_args = function(args) {
};
ProjectManager_TerminateAnalysis_args.prototype = {};
ProjectManager_TerminateAnalysis_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_TerminateAnalysis_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_TerminateAnalysis_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_TerminateAnalysis_result = function(args) {
};
ProjectManager_TerminateAnalysis_result.prototype = {};
ProjectManager_TerminateAnalysis_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_TerminateAnalysis_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_TerminateAnalysis_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_GetBuildNodes_args = function(args) {
  this.prj = null;
  this.configurationName = null;
  this.toolIdentifier = null;
  if (args) {
    if (args.prj !== undefined && args.prj !== null) {
      this.prj = new ttypes.ProjectContext(args.prj);
    }
    if (args.configurationName !== undefined && args.configurationName !== null) {
      this.configurationName = args.configurationName;
    }
    if (args.toolIdentifier !== undefined && args.toolIdentifier !== null) {
      this.toolIdentifier = args.toolIdentifier;
    }
  }
};
ProjectManager_GetBuildNodes_args.prototype = {};
ProjectManager_GetBuildNodes_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.prj = new ttypes.ProjectContext();
        this.prj.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.configurationName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.toolIdentifier = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_GetBuildNodes_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_GetBuildNodes_args');
  if (this.prj !== null && this.prj !== undefined) {
    output.writeFieldBegin('prj', Thrift.Type.STRUCT, 1);
    this.prj.write(output);
    output.writeFieldEnd();
  }
  if (this.configurationName !== null && this.configurationName !== undefined) {
    output.writeFieldBegin('configurationName', Thrift.Type.STRING, 2);
    output.writeString(this.configurationName);
    output.writeFieldEnd();
  }
  if (this.toolIdentifier !== null && this.toolIdentifier !== undefined) {
    output.writeFieldBegin('toolIdentifier', Thrift.Type.STRING, 3);
    output.writeString(this.toolIdentifier);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_GetBuildNodes_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.BuildNode]);
    }
  }
};
ProjectManager_GetBuildNodes_result.prototype = {};
ProjectManager_GetBuildNodes_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp3181 = input.readListBegin();
        var _size180 = _rtmp3181.size || 0;
        for (var _i182 = 0; _i182 < _size180; ++_i182) {
          var elem183 = null;
          elem183 = new ttypes.BuildNode();
          elem183.read(input);
          this.success.push(elem183);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_GetBuildNodes_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_GetBuildNodes_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter184 in this.success) {
      if (this.success.hasOwnProperty(iter184)) {
        iter184 = this.success[iter184];
        iter184.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_GetOptionsForNode_args = function(args) {
  this.prj = null;
  this.node = null;
  this.configurationName = null;
  this.optionIds = [];
  if (args) {
    if (args.prj !== undefined && args.prj !== null) {
      this.prj = new ttypes.ProjectContext(args.prj);
    }
    if (args.node !== undefined && args.node !== null) {
      this.node = new ttypes.Node(args.node);
    }
    if (args.configurationName !== undefined && args.configurationName !== null) {
      this.configurationName = args.configurationName;
    }
    if (args.optionIds !== undefined && args.optionIds !== null) {
      this.optionIds = Thrift.copyList(args.optionIds, [null]);
    }
  }
};
ProjectManager_GetOptionsForNode_args.prototype = {};
ProjectManager_GetOptionsForNode_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.prj = new ttypes.ProjectContext();
        this.prj.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.node = new ttypes.Node();
        this.node.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.configurationName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        this.optionIds = [];
        var _rtmp3186 = input.readListBegin();
        var _size185 = _rtmp3186.size || 0;
        for (var _i187 = 0; _i187 < _size185; ++_i187) {
          var elem188 = null;
          elem188 = input.readString().value;
          this.optionIds.push(elem188);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_GetOptionsForNode_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_GetOptionsForNode_args');
  if (this.prj !== null && this.prj !== undefined) {
    output.writeFieldBegin('prj', Thrift.Type.STRUCT, 1);
    this.prj.write(output);
    output.writeFieldEnd();
  }
  if (this.node !== null && this.node !== undefined) {
    output.writeFieldBegin('node', Thrift.Type.STRUCT, 2);
    this.node.write(output);
    output.writeFieldEnd();
  }
  if (this.configurationName !== null && this.configurationName !== undefined) {
    output.writeFieldBegin('configurationName', Thrift.Type.STRING, 3);
    output.writeString(this.configurationName);
    output.writeFieldEnd();
  }
  if (this.optionIds !== null && this.optionIds !== undefined) {
    output.writeFieldBegin('optionIds', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRING, this.optionIds.length);
    for (var iter189 in this.optionIds) {
      if (this.optionIds.hasOwnProperty(iter189)) {
        iter189 = this.optionIds[iter189];
        output.writeString(iter189);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_GetOptionsForNode_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ProjectManagerError) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.OptionDescription]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ProjectManager_GetOptionsForNode_result.prototype = {};
ProjectManager_GetOptionsForNode_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp3191 = input.readListBegin();
        var _size190 = _rtmp3191.size || 0;
        for (var _i192 = 0; _i192 < _size190; ++_i192) {
          var elem193 = null;
          elem193 = new ttypes.OptionDescription();
          elem193.read(input);
          this.success.push(elem193);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ProjectManagerError();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_GetOptionsForNode_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_GetOptionsForNode_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter194 in this.success) {
      if (this.success.hasOwnProperty(iter194)) {
        iter194 = this.success[iter194];
        iter194.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_GetOptionsForConfiguration_args = function(args) {
  this.prj = null;
  this.configurationName = null;
  this.optionIds = [];
  if (args) {
    if (args.prj !== undefined && args.prj !== null) {
      this.prj = new ttypes.ProjectContext(args.prj);
    }
    if (args.configurationName !== undefined && args.configurationName !== null) {
      this.configurationName = args.configurationName;
    }
    if (args.optionIds !== undefined && args.optionIds !== null) {
      this.optionIds = Thrift.copyList(args.optionIds, [null]);
    }
  }
};
ProjectManager_GetOptionsForConfiguration_args.prototype = {};
ProjectManager_GetOptionsForConfiguration_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.prj = new ttypes.ProjectContext();
        this.prj.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.configurationName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        this.optionIds = [];
        var _rtmp3196 = input.readListBegin();
        var _size195 = _rtmp3196.size || 0;
        for (var _i197 = 0; _i197 < _size195; ++_i197) {
          var elem198 = null;
          elem198 = input.readString().value;
          this.optionIds.push(elem198);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_GetOptionsForConfiguration_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_GetOptionsForConfiguration_args');
  if (this.prj !== null && this.prj !== undefined) {
    output.writeFieldBegin('prj', Thrift.Type.STRUCT, 1);
    this.prj.write(output);
    output.writeFieldEnd();
  }
  if (this.configurationName !== null && this.configurationName !== undefined) {
    output.writeFieldBegin('configurationName', Thrift.Type.STRING, 2);
    output.writeString(this.configurationName);
    output.writeFieldEnd();
  }
  if (this.optionIds !== null && this.optionIds !== undefined) {
    output.writeFieldBegin('optionIds', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.optionIds.length);
    for (var iter199 in this.optionIds) {
      if (this.optionIds.hasOwnProperty(iter199)) {
        iter199 = this.optionIds[iter199];
        output.writeString(iter199);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_GetOptionsForConfiguration_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ProjectManagerError) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.OptionDescription]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ProjectManager_GetOptionsForConfiguration_result.prototype = {};
ProjectManager_GetOptionsForConfiguration_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp3201 = input.readListBegin();
        var _size200 = _rtmp3201.size || 0;
        for (var _i202 = 0; _i202 < _size200; ++_i202) {
          var elem203 = null;
          elem203 = new ttypes.OptionDescription();
          elem203.read(input);
          this.success.push(elem203);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ProjectManagerError();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_GetOptionsForConfiguration_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_GetOptionsForConfiguration_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter204 in this.success) {
      if (this.success.hasOwnProperty(iter204)) {
        iter204 = this.success[iter204];
        iter204.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_ApplyOptionsForNode_args = function(args) {
  this.prj = null;
  this.node = null;
  this.configurationName = null;
  this.optionsToSet = null;
  if (args) {
    if (args.prj !== undefined && args.prj !== null) {
      this.prj = new ttypes.ProjectContext(args.prj);
    }
    if (args.node !== undefined && args.node !== null) {
      this.node = new ttypes.Node(args.node);
    }
    if (args.configurationName !== undefined && args.configurationName !== null) {
      this.configurationName = args.configurationName;
    }
    if (args.optionsToSet !== undefined && args.optionsToSet !== null) {
      this.optionsToSet = Thrift.copyList(args.optionsToSet, [ttypes.OptionDescription]);
    }
  }
};
ProjectManager_ApplyOptionsForNode_args.prototype = {};
ProjectManager_ApplyOptionsForNode_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.prj = new ttypes.ProjectContext();
        this.prj.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.node = new ttypes.Node();
        this.node.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.configurationName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        this.optionsToSet = [];
        var _rtmp3206 = input.readListBegin();
        var _size205 = _rtmp3206.size || 0;
        for (var _i207 = 0; _i207 < _size205; ++_i207) {
          var elem208 = null;
          elem208 = new ttypes.OptionDescription();
          elem208.read(input);
          this.optionsToSet.push(elem208);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_ApplyOptionsForNode_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_ApplyOptionsForNode_args');
  if (this.prj !== null && this.prj !== undefined) {
    output.writeFieldBegin('prj', Thrift.Type.STRUCT, 1);
    this.prj.write(output);
    output.writeFieldEnd();
  }
  if (this.node !== null && this.node !== undefined) {
    output.writeFieldBegin('node', Thrift.Type.STRUCT, 2);
    this.node.write(output);
    output.writeFieldEnd();
  }
  if (this.configurationName !== null && this.configurationName !== undefined) {
    output.writeFieldBegin('configurationName', Thrift.Type.STRING, 3);
    output.writeString(this.configurationName);
    output.writeFieldEnd();
  }
  if (this.optionsToSet !== null && this.optionsToSet !== undefined) {
    output.writeFieldBegin('optionsToSet', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.optionsToSet.length);
    for (var iter209 in this.optionsToSet) {
      if (this.optionsToSet.hasOwnProperty(iter209)) {
        iter209 = this.optionsToSet[iter209];
        iter209.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_ApplyOptionsForNode_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ProjectManagerError) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.OptionDescription]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ProjectManager_ApplyOptionsForNode_result.prototype = {};
ProjectManager_ApplyOptionsForNode_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp3211 = input.readListBegin();
        var _size210 = _rtmp3211.size || 0;
        for (var _i212 = 0; _i212 < _size210; ++_i212) {
          var elem213 = null;
          elem213 = new ttypes.OptionDescription();
          elem213.read(input);
          this.success.push(elem213);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ProjectManagerError();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_ApplyOptionsForNode_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_ApplyOptionsForNode_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter214 in this.success) {
      if (this.success.hasOwnProperty(iter214)) {
        iter214 = this.success[iter214];
        iter214.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_VerifyOptionsForNode_args = function(args) {
  this.prj = null;
  this.node = null;
  this.configurationName = null;
  this.optionsToSet = null;
  if (args) {
    if (args.prj !== undefined && args.prj !== null) {
      this.prj = new ttypes.ProjectContext(args.prj);
    }
    if (args.node !== undefined && args.node !== null) {
      this.node = new ttypes.Node(args.node);
    }
    if (args.configurationName !== undefined && args.configurationName !== null) {
      this.configurationName = args.configurationName;
    }
    if (args.optionsToSet !== undefined && args.optionsToSet !== null) {
      this.optionsToSet = Thrift.copyList(args.optionsToSet, [ttypes.OptionDescription]);
    }
  }
};
ProjectManager_VerifyOptionsForNode_args.prototype = {};
ProjectManager_VerifyOptionsForNode_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.prj = new ttypes.ProjectContext();
        this.prj.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.node = new ttypes.Node();
        this.node.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.configurationName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        this.optionsToSet = [];
        var _rtmp3216 = input.readListBegin();
        var _size215 = _rtmp3216.size || 0;
        for (var _i217 = 0; _i217 < _size215; ++_i217) {
          var elem218 = null;
          elem218 = new ttypes.OptionDescription();
          elem218.read(input);
          this.optionsToSet.push(elem218);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_VerifyOptionsForNode_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_VerifyOptionsForNode_args');
  if (this.prj !== null && this.prj !== undefined) {
    output.writeFieldBegin('prj', Thrift.Type.STRUCT, 1);
    this.prj.write(output);
    output.writeFieldEnd();
  }
  if (this.node !== null && this.node !== undefined) {
    output.writeFieldBegin('node', Thrift.Type.STRUCT, 2);
    this.node.write(output);
    output.writeFieldEnd();
  }
  if (this.configurationName !== null && this.configurationName !== undefined) {
    output.writeFieldBegin('configurationName', Thrift.Type.STRING, 3);
    output.writeString(this.configurationName);
    output.writeFieldEnd();
  }
  if (this.optionsToSet !== null && this.optionsToSet !== undefined) {
    output.writeFieldBegin('optionsToSet', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.optionsToSet.length);
    for (var iter219 in this.optionsToSet) {
      if (this.optionsToSet.hasOwnProperty(iter219)) {
        iter219 = this.optionsToSet[iter219];
        iter219.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_VerifyOptionsForNode_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ProjectManagerError) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.OptionDescription]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ProjectManager_VerifyOptionsForNode_result.prototype = {};
ProjectManager_VerifyOptionsForNode_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp3221 = input.readListBegin();
        var _size220 = _rtmp3221.size || 0;
        for (var _i222 = 0; _i222 < _size220; ++_i222) {
          var elem223 = null;
          elem223 = new ttypes.OptionDescription();
          elem223.read(input);
          this.success.push(elem223);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ProjectManagerError();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_VerifyOptionsForNode_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_VerifyOptionsForNode_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter224 in this.success) {
      if (this.success.hasOwnProperty(iter224)) {
        iter224 = this.success[iter224];
        iter224.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_ApplyOptionsForConfiguration_args = function(args) {
  this.prj = null;
  this.configurationName = null;
  this.optionsToSet = null;
  if (args) {
    if (args.prj !== undefined && args.prj !== null) {
      this.prj = new ttypes.ProjectContext(args.prj);
    }
    if (args.configurationName !== undefined && args.configurationName !== null) {
      this.configurationName = args.configurationName;
    }
    if (args.optionsToSet !== undefined && args.optionsToSet !== null) {
      this.optionsToSet = Thrift.copyList(args.optionsToSet, [ttypes.OptionDescription]);
    }
  }
};
ProjectManager_ApplyOptionsForConfiguration_args.prototype = {};
ProjectManager_ApplyOptionsForConfiguration_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.prj = new ttypes.ProjectContext();
        this.prj.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.configurationName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        this.optionsToSet = [];
        var _rtmp3226 = input.readListBegin();
        var _size225 = _rtmp3226.size || 0;
        for (var _i227 = 0; _i227 < _size225; ++_i227) {
          var elem228 = null;
          elem228 = new ttypes.OptionDescription();
          elem228.read(input);
          this.optionsToSet.push(elem228);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_ApplyOptionsForConfiguration_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_ApplyOptionsForConfiguration_args');
  if (this.prj !== null && this.prj !== undefined) {
    output.writeFieldBegin('prj', Thrift.Type.STRUCT, 1);
    this.prj.write(output);
    output.writeFieldEnd();
  }
  if (this.configurationName !== null && this.configurationName !== undefined) {
    output.writeFieldBegin('configurationName', Thrift.Type.STRING, 2);
    output.writeString(this.configurationName);
    output.writeFieldEnd();
  }
  if (this.optionsToSet !== null && this.optionsToSet !== undefined) {
    output.writeFieldBegin('optionsToSet', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.optionsToSet.length);
    for (var iter229 in this.optionsToSet) {
      if (this.optionsToSet.hasOwnProperty(iter229)) {
        iter229 = this.optionsToSet[iter229];
        iter229.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_ApplyOptionsForConfiguration_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ProjectManagerError) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.OptionDescription]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ProjectManager_ApplyOptionsForConfiguration_result.prototype = {};
ProjectManager_ApplyOptionsForConfiguration_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp3231 = input.readListBegin();
        var _size230 = _rtmp3231.size || 0;
        for (var _i232 = 0; _i232 < _size230; ++_i232) {
          var elem233 = null;
          elem233 = new ttypes.OptionDescription();
          elem233.read(input);
          this.success.push(elem233);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ProjectManagerError();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_ApplyOptionsForConfiguration_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_ApplyOptionsForConfiguration_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter234 in this.success) {
      if (this.success.hasOwnProperty(iter234)) {
        iter234 = this.success[iter234];
        iter234.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_VerifyOptionsForConfiguration_args = function(args) {
  this.prj = null;
  this.configurationName = null;
  this.optionsToSet = null;
  if (args) {
    if (args.prj !== undefined && args.prj !== null) {
      this.prj = new ttypes.ProjectContext(args.prj);
    }
    if (args.configurationName !== undefined && args.configurationName !== null) {
      this.configurationName = args.configurationName;
    }
    if (args.optionsToSet !== undefined && args.optionsToSet !== null) {
      this.optionsToSet = Thrift.copyList(args.optionsToSet, [ttypes.OptionDescription]);
    }
  }
};
ProjectManager_VerifyOptionsForConfiguration_args.prototype = {};
ProjectManager_VerifyOptionsForConfiguration_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.prj = new ttypes.ProjectContext();
        this.prj.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.configurationName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        this.optionsToSet = [];
        var _rtmp3236 = input.readListBegin();
        var _size235 = _rtmp3236.size || 0;
        for (var _i237 = 0; _i237 < _size235; ++_i237) {
          var elem238 = null;
          elem238 = new ttypes.OptionDescription();
          elem238.read(input);
          this.optionsToSet.push(elem238);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_VerifyOptionsForConfiguration_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_VerifyOptionsForConfiguration_args');
  if (this.prj !== null && this.prj !== undefined) {
    output.writeFieldBegin('prj', Thrift.Type.STRUCT, 1);
    this.prj.write(output);
    output.writeFieldEnd();
  }
  if (this.configurationName !== null && this.configurationName !== undefined) {
    output.writeFieldBegin('configurationName', Thrift.Type.STRING, 2);
    output.writeString(this.configurationName);
    output.writeFieldEnd();
  }
  if (this.optionsToSet !== null && this.optionsToSet !== undefined) {
    output.writeFieldBegin('optionsToSet', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.optionsToSet.length);
    for (var iter239 in this.optionsToSet) {
      if (this.optionsToSet.hasOwnProperty(iter239)) {
        iter239 = this.optionsToSet[iter239];
        iter239.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_VerifyOptionsForConfiguration_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ProjectManagerError) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.OptionDescription]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ProjectManager_VerifyOptionsForConfiguration_result.prototype = {};
ProjectManager_VerifyOptionsForConfiguration_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp3241 = input.readListBegin();
        var _size240 = _rtmp3241.size || 0;
        for (var _i242 = 0; _i242 < _size240; ++_i242) {
          var elem243 = null;
          elem243 = new ttypes.OptionDescription();
          elem243.read(input);
          this.success.push(elem243);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ProjectManagerError();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_VerifyOptionsForConfiguration_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_VerifyOptionsForConfiguration_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter244 in this.success) {
      if (this.success.hasOwnProperty(iter244)) {
        iter244 = this.success[iter244];
        iter244.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_GetOptionCategories_args = function(args) {
  this.prj = null;
  this.configurationName = null;
  if (args) {
    if (args.prj !== undefined && args.prj !== null) {
      this.prj = new ttypes.ProjectContext(args.prj);
    }
    if (args.configurationName !== undefined && args.configurationName !== null) {
      this.configurationName = args.configurationName;
    }
  }
};
ProjectManager_GetOptionCategories_args.prototype = {};
ProjectManager_GetOptionCategories_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.prj = new ttypes.ProjectContext();
        this.prj.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.configurationName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_GetOptionCategories_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_GetOptionCategories_args');
  if (this.prj !== null && this.prj !== undefined) {
    output.writeFieldBegin('prj', Thrift.Type.STRUCT, 1);
    this.prj.write(output);
    output.writeFieldEnd();
  }
  if (this.configurationName !== null && this.configurationName !== undefined) {
    output.writeFieldBegin('configurationName', Thrift.Type.STRING, 2);
    output.writeString(this.configurationName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_GetOptionCategories_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.OptionCategory]);
    }
  }
};
ProjectManager_GetOptionCategories_result.prototype = {};
ProjectManager_GetOptionCategories_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp3246 = input.readListBegin();
        var _size245 = _rtmp3246.size || 0;
        for (var _i247 = 0; _i247 < _size245; ++_i247) {
          var elem248 = null;
          elem248 = new ttypes.OptionCategory();
          elem248.read(input);
          this.success.push(elem248);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_GetOptionCategories_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_GetOptionCategories_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter249 in this.success) {
      if (this.success.hasOwnProperty(iter249)) {
        iter249 = this.success[iter249];
        iter249.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_EnableMultiFileCompilation_args = function(args) {
  this.prj = null;
  this.configurationName = null;
  this.node = null;
  this.enabled = null;
  if (args) {
    if (args.prj !== undefined && args.prj !== null) {
      this.prj = new ttypes.ProjectContext(args.prj);
    }
    if (args.configurationName !== undefined && args.configurationName !== null) {
      this.configurationName = args.configurationName;
    }
    if (args.node !== undefined && args.node !== null) {
      this.node = new ttypes.Node(args.node);
    }
    if (args.enabled !== undefined && args.enabled !== null) {
      this.enabled = args.enabled;
    }
  }
};
ProjectManager_EnableMultiFileCompilation_args.prototype = {};
ProjectManager_EnableMultiFileCompilation_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.prj = new ttypes.ProjectContext();
        this.prj.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.configurationName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.node = new ttypes.Node();
        this.node.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.enabled = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_EnableMultiFileCompilation_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_EnableMultiFileCompilation_args');
  if (this.prj !== null && this.prj !== undefined) {
    output.writeFieldBegin('prj', Thrift.Type.STRUCT, 1);
    this.prj.write(output);
    output.writeFieldEnd();
  }
  if (this.configurationName !== null && this.configurationName !== undefined) {
    output.writeFieldBegin('configurationName', Thrift.Type.STRING, 2);
    output.writeString(this.configurationName);
    output.writeFieldEnd();
  }
  if (this.node !== null && this.node !== undefined) {
    output.writeFieldBegin('node', Thrift.Type.STRUCT, 3);
    this.node.write(output);
    output.writeFieldEnd();
  }
  if (this.enabled !== null && this.enabled !== undefined) {
    output.writeFieldBegin('enabled', Thrift.Type.BOOL, 4);
    output.writeBool(this.enabled);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_EnableMultiFileCompilation_result = function(args) {
};
ProjectManager_EnableMultiFileCompilation_result.prototype = {};
ProjectManager_EnableMultiFileCompilation_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_EnableMultiFileCompilation_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_EnableMultiFileCompilation_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_EnableMultiFileDiscardPublicSymbols_args = function(args) {
  this.prj = null;
  this.configurationName = null;
  this.node = null;
  this.enabled = null;
  if (args) {
    if (args.prj !== undefined && args.prj !== null) {
      this.prj = new ttypes.ProjectContext(args.prj);
    }
    if (args.configurationName !== undefined && args.configurationName !== null) {
      this.configurationName = args.configurationName;
    }
    if (args.node !== undefined && args.node !== null) {
      this.node = new ttypes.Node(args.node);
    }
    if (args.enabled !== undefined && args.enabled !== null) {
      this.enabled = args.enabled;
    }
  }
};
ProjectManager_EnableMultiFileDiscardPublicSymbols_args.prototype = {};
ProjectManager_EnableMultiFileDiscardPublicSymbols_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.prj = new ttypes.ProjectContext();
        this.prj.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.configurationName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.node = new ttypes.Node();
        this.node.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.enabled = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_EnableMultiFileDiscardPublicSymbols_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_EnableMultiFileDiscardPublicSymbols_args');
  if (this.prj !== null && this.prj !== undefined) {
    output.writeFieldBegin('prj', Thrift.Type.STRUCT, 1);
    this.prj.write(output);
    output.writeFieldEnd();
  }
  if (this.configurationName !== null && this.configurationName !== undefined) {
    output.writeFieldBegin('configurationName', Thrift.Type.STRING, 2);
    output.writeString(this.configurationName);
    output.writeFieldEnd();
  }
  if (this.node !== null && this.node !== undefined) {
    output.writeFieldBegin('node', Thrift.Type.STRUCT, 3);
    this.node.write(output);
    output.writeFieldEnd();
  }
  if (this.enabled !== null && this.enabled !== undefined) {
    output.writeFieldBegin('enabled', Thrift.Type.BOOL, 4);
    output.writeBool(this.enabled);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_EnableMultiFileDiscardPublicSymbols_result = function(args) {
};
ProjectManager_EnableMultiFileDiscardPublicSymbols_result.prototype = {};
ProjectManager_EnableMultiFileDiscardPublicSymbols_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_EnableMultiFileDiscardPublicSymbols_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_EnableMultiFileDiscardPublicSymbols_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_IsMultiFileCompilationEnabled_args = function(args) {
  this.prj = null;
  this.configurationName = null;
  this.node = null;
  if (args) {
    if (args.prj !== undefined && args.prj !== null) {
      this.prj = new ttypes.ProjectContext(args.prj);
    }
    if (args.configurationName !== undefined && args.configurationName !== null) {
      this.configurationName = args.configurationName;
    }
    if (args.node !== undefined && args.node !== null) {
      this.node = new ttypes.Node(args.node);
    }
  }
};
ProjectManager_IsMultiFileCompilationEnabled_args.prototype = {};
ProjectManager_IsMultiFileCompilationEnabled_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.prj = new ttypes.ProjectContext();
        this.prj.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.configurationName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.node = new ttypes.Node();
        this.node.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_IsMultiFileCompilationEnabled_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_IsMultiFileCompilationEnabled_args');
  if (this.prj !== null && this.prj !== undefined) {
    output.writeFieldBegin('prj', Thrift.Type.STRUCT, 1);
    this.prj.write(output);
    output.writeFieldEnd();
  }
  if (this.configurationName !== null && this.configurationName !== undefined) {
    output.writeFieldBegin('configurationName', Thrift.Type.STRING, 2);
    output.writeString(this.configurationName);
    output.writeFieldEnd();
  }
  if (this.node !== null && this.node !== undefined) {
    output.writeFieldBegin('node', Thrift.Type.STRUCT, 3);
    this.node.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_IsMultiFileCompilationEnabled_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
ProjectManager_IsMultiFileCompilationEnabled_result.prototype = {};
ProjectManager_IsMultiFileCompilationEnabled_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_IsMultiFileCompilationEnabled_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_IsMultiFileCompilationEnabled_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_IsMultiFileDiscardPublicSymbolsEnabled_args = function(args) {
  this.prj = null;
  this.configurationName = null;
  this.node = null;
  if (args) {
    if (args.prj !== undefined && args.prj !== null) {
      this.prj = new ttypes.ProjectContext(args.prj);
    }
    if (args.configurationName !== undefined && args.configurationName !== null) {
      this.configurationName = args.configurationName;
    }
    if (args.node !== undefined && args.node !== null) {
      this.node = new ttypes.Node(args.node);
    }
  }
};
ProjectManager_IsMultiFileDiscardPublicSymbolsEnabled_args.prototype = {};
ProjectManager_IsMultiFileDiscardPublicSymbolsEnabled_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.prj = new ttypes.ProjectContext();
        this.prj.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.configurationName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.node = new ttypes.Node();
        this.node.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_IsMultiFileDiscardPublicSymbolsEnabled_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_IsMultiFileDiscardPublicSymbolsEnabled_args');
  if (this.prj !== null && this.prj !== undefined) {
    output.writeFieldBegin('prj', Thrift.Type.STRUCT, 1);
    this.prj.write(output);
    output.writeFieldEnd();
  }
  if (this.configurationName !== null && this.configurationName !== undefined) {
    output.writeFieldBegin('configurationName', Thrift.Type.STRING, 2);
    output.writeString(this.configurationName);
    output.writeFieldEnd();
  }
  if (this.node !== null && this.node !== undefined) {
    output.writeFieldBegin('node', Thrift.Type.STRUCT, 3);
    this.node.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_IsMultiFileDiscardPublicSymbolsEnabled_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
ProjectManager_IsMultiFileDiscardPublicSymbolsEnabled_result.prototype = {};
ProjectManager_IsMultiFileDiscardPublicSymbolsEnabled_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_IsMultiFileDiscardPublicSymbolsEnabled_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_IsMultiFileDiscardPublicSymbolsEnabled_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_GetToolArgumentsForConfiguration_args = function(args) {
  this.prj = null;
  this.toolId = null;
  this.configurationName = null;
  if (args) {
    if (args.prj !== undefined && args.prj !== null) {
      this.prj = new ttypes.ProjectContext(args.prj);
    }
    if (args.toolId !== undefined && args.toolId !== null) {
      this.toolId = args.toolId;
    }
    if (args.configurationName !== undefined && args.configurationName !== null) {
      this.configurationName = args.configurationName;
    }
  }
};
ProjectManager_GetToolArgumentsForConfiguration_args.prototype = {};
ProjectManager_GetToolArgumentsForConfiguration_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.prj = new ttypes.ProjectContext();
        this.prj.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.toolId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.configurationName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_GetToolArgumentsForConfiguration_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_GetToolArgumentsForConfiguration_args');
  if (this.prj !== null && this.prj !== undefined) {
    output.writeFieldBegin('prj', Thrift.Type.STRUCT, 1);
    this.prj.write(output);
    output.writeFieldEnd();
  }
  if (this.toolId !== null && this.toolId !== undefined) {
    output.writeFieldBegin('toolId', Thrift.Type.STRING, 2);
    output.writeString(this.toolId);
    output.writeFieldEnd();
  }
  if (this.configurationName !== null && this.configurationName !== undefined) {
    output.writeFieldBegin('configurationName', Thrift.Type.STRING, 3);
    output.writeString(this.configurationName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_GetToolArgumentsForConfiguration_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
  }
};
ProjectManager_GetToolArgumentsForConfiguration_result.prototype = {};
ProjectManager_GetToolArgumentsForConfiguration_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp3251 = input.readListBegin();
        var _size250 = _rtmp3251.size || 0;
        for (var _i252 = 0; _i252 < _size250; ++_i252) {
          var elem253 = null;
          elem253 = input.readString().value;
          this.success.push(elem253);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_GetToolArgumentsForConfiguration_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_GetToolArgumentsForConfiguration_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter254 in this.success) {
      if (this.success.hasOwnProperty(iter254)) {
        iter254 = this.success[iter254];
        output.writeString(iter254);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_ExpandArgVars_args = function(args) {
  this.input = null;
  this.project = null;
  this.configurationName = null;
  this.throwOnFailure = null;
  if (args) {
    if (args.input !== undefined && args.input !== null) {
      this.input = args.input;
    }
    if (args.project !== undefined && args.project !== null) {
      this.project = new ttypes.ProjectContext(args.project);
    }
    if (args.configurationName !== undefined && args.configurationName !== null) {
      this.configurationName = args.configurationName;
    }
    if (args.throwOnFailure !== undefined && args.throwOnFailure !== null) {
      this.throwOnFailure = args.throwOnFailure;
    }
  }
};
ProjectManager_ExpandArgVars_args.prototype = {};
ProjectManager_ExpandArgVars_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.input = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.project = new ttypes.ProjectContext();
        this.project.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.configurationName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.throwOnFailure = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_ExpandArgVars_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_ExpandArgVars_args');
  if (this.input !== null && this.input !== undefined) {
    output.writeFieldBegin('input', Thrift.Type.STRING, 1);
    output.writeString(this.input);
    output.writeFieldEnd();
  }
  if (this.project !== null && this.project !== undefined) {
    output.writeFieldBegin('project', Thrift.Type.STRUCT, 2);
    this.project.write(output);
    output.writeFieldEnd();
  }
  if (this.configurationName !== null && this.configurationName !== undefined) {
    output.writeFieldBegin('configurationName', Thrift.Type.STRING, 3);
    output.writeString(this.configurationName);
    output.writeFieldEnd();
  }
  if (this.throwOnFailure !== null && this.throwOnFailure !== undefined) {
    output.writeFieldBegin('throwOnFailure', Thrift.Type.BOOL, 4);
    output.writeBool(this.throwOnFailure);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_ExpandArgVars_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
ProjectManager_ExpandArgVars_result.prototype = {};
ProjectManager_ExpandArgVars_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_ExpandArgVars_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_ExpandArgVars_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_GetPresentationForOptionsAsJson_args = function(args) {
  this.locale = null;
  if (args) {
    if (args.locale !== undefined && args.locale !== null) {
      this.locale = args.locale;
    }
  }
};
ProjectManager_GetPresentationForOptionsAsJson_args.prototype = {};
ProjectManager_GetPresentationForOptionsAsJson_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.locale = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_GetPresentationForOptionsAsJson_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_GetPresentationForOptionsAsJson_args');
  if (this.locale !== null && this.locale !== undefined) {
    output.writeFieldBegin('locale', Thrift.Type.STRING, 1);
    output.writeString(this.locale);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_GetPresentationForOptionsAsJson_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ProjectManagerError) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ProjectManager_GetPresentationForOptionsAsJson_result.prototype = {};
ProjectManager_GetPresentationForOptionsAsJson_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ProjectManagerError();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_GetPresentationForOptionsAsJson_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_GetPresentationForOptionsAsJson_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_UpdateProjectConnections_args = function(args) {
  this.prj = null;
  if (args) {
    if (args.prj !== undefined && args.prj !== null) {
      this.prj = new ttypes.ProjectContext(args.prj);
    }
  }
};
ProjectManager_UpdateProjectConnections_args.prototype = {};
ProjectManager_UpdateProjectConnections_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.prj = new ttypes.ProjectContext();
        this.prj.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_UpdateProjectConnections_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_UpdateProjectConnections_args');
  if (this.prj !== null && this.prj !== undefined) {
    output.writeFieldBegin('prj', Thrift.Type.STRUCT, 1);
    this.prj.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_UpdateProjectConnections_result = function(args) {
};
ProjectManager_UpdateProjectConnections_result.prototype = {};
ProjectManager_UpdateProjectConnections_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_UpdateProjectConnections_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_UpdateProjectConnections_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_UpdateProjectConnection_args = function(args) {
  this.prj = null;
  this.file = null;
  if (args) {
    if (args.prj !== undefined && args.prj !== null) {
      this.prj = new ttypes.ProjectContext(args.prj);
    }
    if (args.file !== undefined && args.file !== null) {
      this.file = args.file;
    }
  }
};
ProjectManager_UpdateProjectConnection_args.prototype = {};
ProjectManager_UpdateProjectConnection_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.prj = new ttypes.ProjectContext();
        this.prj.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.file = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_UpdateProjectConnection_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_UpdateProjectConnection_args');
  if (this.prj !== null && this.prj !== undefined) {
    output.writeFieldBegin('prj', Thrift.Type.STRUCT, 1);
    this.prj.write(output);
    output.writeFieldEnd();
  }
  if (this.file !== null && this.file !== undefined) {
    output.writeFieldBegin('file', Thrift.Type.STRING, 2);
    output.writeString(this.file);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_UpdateProjectConnection_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
ProjectManager_UpdateProjectConnection_result.prototype = {};
ProjectManager_UpdateProjectConnection_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_UpdateProjectConnection_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_UpdateProjectConnection_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_RemoveMonitors_args = function(args) {
  this.prj = null;
  if (args) {
    if (args.prj !== undefined && args.prj !== null) {
      this.prj = new ttypes.ProjectContext(args.prj);
    }
  }
};
ProjectManager_RemoveMonitors_args.prototype = {};
ProjectManager_RemoveMonitors_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.prj = new ttypes.ProjectContext();
        this.prj.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_RemoveMonitors_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_RemoveMonitors_args');
  if (this.prj !== null && this.prj !== undefined) {
    output.writeFieldBegin('prj', Thrift.Type.STRUCT, 1);
    this.prj.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_RemoveMonitors_result = function(args) {
};
ProjectManager_RemoveMonitors_result.prototype = {};
ProjectManager_RemoveMonitors_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_RemoveMonitors_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_RemoveMonitors_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_EnableProjectConnections_args = function(args) {
  this.enable = null;
  if (args) {
    if (args.enable !== undefined && args.enable !== null) {
      this.enable = args.enable;
    }
  }
};
ProjectManager_EnableProjectConnections_args.prototype = {};
ProjectManager_EnableProjectConnections_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.enable = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_EnableProjectConnections_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_EnableProjectConnections_args');
  if (this.enable !== null && this.enable !== undefined) {
    output.writeFieldBegin('enable', Thrift.Type.BOOL, 1);
    output.writeBool(this.enable);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_EnableProjectConnections_result = function(args) {
};
ProjectManager_EnableProjectConnections_result.prototype = {};
ProjectManager_EnableProjectConnections_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_EnableProjectConnections_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_EnableProjectConnections_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_IsExternalProjectUpToDate_args = function(args) {
  this.prj = null;
  if (args) {
    if (args.prj !== undefined && args.prj !== null) {
      this.prj = new ttypes.ProjectContext(args.prj);
    }
  }
};
ProjectManager_IsExternalProjectUpToDate_args.prototype = {};
ProjectManager_IsExternalProjectUpToDate_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.prj = new ttypes.ProjectContext();
        this.prj.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_IsExternalProjectUpToDate_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_IsExternalProjectUpToDate_args');
  if (this.prj !== null && this.prj !== undefined) {
    output.writeFieldBegin('prj', Thrift.Type.STRUCT, 1);
    this.prj.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_IsExternalProjectUpToDate_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
ProjectManager_IsExternalProjectUpToDate_result.prototype = {};
ProjectManager_IsExternalProjectUpToDate_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_IsExternalProjectUpToDate_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_IsExternalProjectUpToDate_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_SynchonizeExternalProject_args = function(args) {
  this.prj = null;
  if (args) {
    if (args.prj !== undefined && args.prj !== null) {
      this.prj = new ttypes.ProjectContext(args.prj);
    }
  }
};
ProjectManager_SynchonizeExternalProject_args.prototype = {};
ProjectManager_SynchonizeExternalProject_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.prj = new ttypes.ProjectContext();
        this.prj.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_SynchonizeExternalProject_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_SynchonizeExternalProject_args');
  if (this.prj !== null && this.prj !== undefined) {
    output.writeFieldBegin('prj', Thrift.Type.STRUCT, 1);
    this.prj.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_SynchonizeExternalProject_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
ProjectManager_SynchonizeExternalProject_result.prototype = {};
ProjectManager_SynchonizeExternalProject_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_SynchonizeExternalProject_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_SynchonizeExternalProject_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_ConfigureExternalProject_args = function(args) {
  this.prj = null;
  this.force = null;
  if (args) {
    if (args.prj !== undefined && args.prj !== null) {
      this.prj = new ttypes.ProjectContext(args.prj);
    }
    if (args.force !== undefined && args.force !== null) {
      this.force = args.force;
    }
  }
};
ProjectManager_ConfigureExternalProject_args.prototype = {};
ProjectManager_ConfigureExternalProject_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.prj = new ttypes.ProjectContext();
        this.prj.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.force = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_ConfigureExternalProject_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_ConfigureExternalProject_args');
  if (this.prj !== null && this.prj !== undefined) {
    output.writeFieldBegin('prj', Thrift.Type.STRUCT, 1);
    this.prj.write(output);
    output.writeFieldEnd();
  }
  if (this.force !== null && this.force !== undefined) {
    output.writeFieldBegin('force', Thrift.Type.BOOL, 2);
    output.writeBool(this.force);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_ConfigureExternalProject_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
ProjectManager_ConfigureExternalProject_result.prototype = {};
ProjectManager_ConfigureExternalProject_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_ConfigureExternalProject_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_ConfigureExternalProject_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_AddControlFile_args = function(args) {
  this.prj = null;
  this.file = null;
  this.pluginId = null;
  if (args) {
    if (args.prj !== undefined && args.prj !== null) {
      this.prj = new ttypes.ProjectContext(args.prj);
    }
    if (args.file !== undefined && args.file !== null) {
      this.file = args.file;
    }
    if (args.pluginId !== undefined && args.pluginId !== null) {
      this.pluginId = args.pluginId;
    }
  }
};
ProjectManager_AddControlFile_args.prototype = {};
ProjectManager_AddControlFile_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.prj = new ttypes.ProjectContext();
        this.prj.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.file = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.pluginId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_AddControlFile_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_AddControlFile_args');
  if (this.prj !== null && this.prj !== undefined) {
    output.writeFieldBegin('prj', Thrift.Type.STRUCT, 1);
    this.prj.write(output);
    output.writeFieldEnd();
  }
  if (this.file !== null && this.file !== undefined) {
    output.writeFieldBegin('file', Thrift.Type.STRING, 2);
    output.writeString(this.file);
    output.writeFieldEnd();
  }
  if (this.pluginId !== null && this.pluginId !== undefined) {
    output.writeFieldBegin('pluginId', Thrift.Type.STRING, 3);
    output.writeString(this.pluginId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_AddControlFile_result = function(args) {
};
ProjectManager_AddControlFile_result.prototype = {};
ProjectManager_AddControlFile_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_AddControlFile_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_AddControlFile_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_HasControlFileFor_args = function(args) {
  this.prj = null;
  this.pluginId = null;
  if (args) {
    if (args.prj !== undefined && args.prj !== null) {
      this.prj = new ttypes.ProjectContext(args.prj);
    }
    if (args.pluginId !== undefined && args.pluginId !== null) {
      this.pluginId = args.pluginId;
    }
  }
};
ProjectManager_HasControlFileFor_args.prototype = {};
ProjectManager_HasControlFileFor_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.prj = new ttypes.ProjectContext();
        this.prj.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.pluginId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_HasControlFileFor_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_HasControlFileFor_args');
  if (this.prj !== null && this.prj !== undefined) {
    output.writeFieldBegin('prj', Thrift.Type.STRUCT, 1);
    this.prj.write(output);
    output.writeFieldEnd();
  }
  if (this.pluginId !== null && this.pluginId !== undefined) {
    output.writeFieldBegin('pluginId', Thrift.Type.STRING, 2);
    output.writeString(this.pluginId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_HasControlFileFor_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
ProjectManager_HasControlFileFor_result.prototype = {};
ProjectManager_HasControlFileFor_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_HasControlFileFor_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_HasControlFileFor_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_IsProjectConnectionsEnabled_args = function(args) {
};
ProjectManager_IsProjectConnectionsEnabled_args.prototype = {};
ProjectManager_IsProjectConnectionsEnabled_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_IsProjectConnectionsEnabled_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_IsProjectConnectionsEnabled_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_IsProjectConnectionsEnabled_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
ProjectManager_IsProjectConnectionsEnabled_result.prototype = {};
ProjectManager_IsProjectConnectionsEnabled_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_IsProjectConnectionsEnabled_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_IsProjectConnectionsEnabled_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_GetControlFilePlugins_args = function(args) {
};
ProjectManager_GetControlFilePlugins_args.prototype = {};
ProjectManager_GetControlFilePlugins_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_GetControlFilePlugins_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_GetControlFilePlugins_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_GetControlFilePlugins_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.ControlFilePlugin]);
    }
  }
};
ProjectManager_GetControlFilePlugins_result.prototype = {};
ProjectManager_GetControlFilePlugins_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp3256 = input.readListBegin();
        var _size255 = _rtmp3256.size || 0;
        for (var _i257 = 0; _i257 < _size255; ++_i257) {
          var elem258 = null;
          elem258 = new ttypes.ControlFilePlugin();
          elem258.read(input);
          this.success.push(elem258);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_GetControlFilePlugins_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_GetControlFilePlugins_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter259 in this.success) {
      if (this.success.hasOwnProperty(iter259)) {
        iter259 = this.success[iter259];
        iter259.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_GetOptionsForProject_args = function(args) {
  this.prj = null;
  if (args) {
    if (args.prj !== undefined && args.prj !== null) {
      this.prj = new ttypes.ProjectContext(args.prj);
    }
  }
};
ProjectManager_GetOptionsForProject_args.prototype = {};
ProjectManager_GetOptionsForProject_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.prj = new ttypes.ProjectContext();
        this.prj.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_GetOptionsForProject_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_GetOptionsForProject_args');
  if (this.prj !== null && this.prj !== undefined) {
    output.writeFieldBegin('prj', Thrift.Type.STRUCT, 1);
    this.prj.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_GetOptionsForProject_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.OptionDescription]);
    }
  }
};
ProjectManager_GetOptionsForProject_result.prototype = {};
ProjectManager_GetOptionsForProject_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp3261 = input.readListBegin();
        var _size260 = _rtmp3261.size || 0;
        for (var _i262 = 0; _i262 < _size260; ++_i262) {
          var elem263 = null;
          elem263 = new ttypes.OptionDescription();
          elem263.read(input);
          this.success.push(elem263);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_GetOptionsForProject_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_GetOptionsForProject_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter264 in this.success) {
      if (this.success.hasOwnProperty(iter264)) {
        iter264 = this.success[iter264];
        iter264.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_ApplyOptionsForProject_args = function(args) {
  this.prj = null;
  this.options = null;
  if (args) {
    if (args.prj !== undefined && args.prj !== null) {
      this.prj = new ttypes.ProjectContext(args.prj);
    }
    if (args.options !== undefined && args.options !== null) {
      this.options = Thrift.copyList(args.options, [ttypes.OptionDescription]);
    }
  }
};
ProjectManager_ApplyOptionsForProject_args.prototype = {};
ProjectManager_ApplyOptionsForProject_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.prj = new ttypes.ProjectContext();
        this.prj.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.options = [];
        var _rtmp3266 = input.readListBegin();
        var _size265 = _rtmp3266.size || 0;
        for (var _i267 = 0; _i267 < _size265; ++_i267) {
          var elem268 = null;
          elem268 = new ttypes.OptionDescription();
          elem268.read(input);
          this.options.push(elem268);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_ApplyOptionsForProject_args.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_ApplyOptionsForProject_args');
  if (this.prj !== null && this.prj !== undefined) {
    output.writeFieldBegin('prj', Thrift.Type.STRUCT, 1);
    this.prj.write(output);
    output.writeFieldEnd();
  }
  if (this.options !== null && this.options !== undefined) {
    output.writeFieldBegin('options', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.options.length);
    for (var iter269 in this.options) {
      if (this.options.hasOwnProperty(iter269)) {
        iter269 = this.options[iter269];
        iter269.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManager_ApplyOptionsForProject_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
ProjectManager_ApplyOptionsForProject_result.prototype = {};
ProjectManager_ApplyOptionsForProject_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectManager_ApplyOptionsForProject_result.prototype.write = function(output) {
  output.writeStructBegin('ProjectManager_ApplyOptionsForProject_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProjectManagerClient = exports.Client = function(input, output) {
  this.input = input;
  this.output = (!output) ? input : output;
  this.seqid = 0;
};
Thrift.inherits(ProjectManagerClient, HeartbeatServiceClient);

ProjectManagerClient.prototype.CreateEwwFile = function(file_path, callback) {
  this.send_CreateEwwFile(file_path, callback); 
  if (!callback) {
    return this.recv_CreateEwwFile();
  }
};

ProjectManagerClient.prototype.send_CreateEwwFile = function(file_path, callback) {
  var params = {
    file_path: file_path
  };
  var args = new ProjectManager_CreateEwwFile_args(params);
  try {
    this.output.writeMessageBegin('CreateEwwFile', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_CreateEwwFile();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_CreateEwwFile = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ProjectManager_CreateEwwFile_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'CreateEwwFile failed: unknown result';
};

ProjectManagerClient.prototype.DisableAutoDataStoring = function(callback) {
  this.send_DisableAutoDataStoring(callback); 
  if (!callback) {
  this.recv_DisableAutoDataStoring();
  }
};

ProjectManagerClient.prototype.send_DisableAutoDataStoring = function(callback) {
  var args = new ProjectManager_DisableAutoDataStoring_args();
  try {
    this.output.writeMessageBegin('DisableAutoDataStoring', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_DisableAutoDataStoring();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_DisableAutoDataStoring = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ProjectManager_DisableAutoDataStoring_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};

ProjectManagerClient.prototype.LoadEwwFile = function(file_path, callback) {
  this.send_LoadEwwFile(file_path, callback); 
  if (!callback) {
    return this.recv_LoadEwwFile();
  }
};

ProjectManagerClient.prototype.send_LoadEwwFile = function(file_path, callback) {
  var params = {
    file_path: file_path
  };
  var args = new ProjectManager_LoadEwwFile_args(params);
  try {
    this.output.writeMessageBegin('LoadEwwFile', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_LoadEwwFile();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_LoadEwwFile = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ProjectManager_LoadEwwFile_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'LoadEwwFile failed: unknown result';
};

ProjectManagerClient.prototype.IsWorkspaceModified = function(callback) {
  this.send_IsWorkspaceModified(callback); 
  if (!callback) {
    return this.recv_IsWorkspaceModified();
  }
};

ProjectManagerClient.prototype.send_IsWorkspaceModified = function(callback) {
  var args = new ProjectManager_IsWorkspaceModified_args();
  try {
    this.output.writeMessageBegin('IsWorkspaceModified', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_IsWorkspaceModified();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_IsWorkspaceModified = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ProjectManager_IsWorkspaceModified_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'IsWorkspaceModified failed: unknown result';
};

ProjectManagerClient.prototype.SaveEwwFile = function(callback) {
  this.send_SaveEwwFile(callback); 
  if (!callback) {
  this.recv_SaveEwwFile();
  }
};

ProjectManagerClient.prototype.send_SaveEwwFile = function(callback) {
  var args = new ProjectManager_SaveEwwFile_args();
  try {
    this.output.writeMessageBegin('SaveEwwFile', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_SaveEwwFile();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_SaveEwwFile = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ProjectManager_SaveEwwFile_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};

ProjectManagerClient.prototype.SaveEwwFileAs = function(file_path, callback) {
  this.send_SaveEwwFileAs(file_path, callback); 
  if (!callback) {
  this.recv_SaveEwwFileAs();
  }
};

ProjectManagerClient.prototype.send_SaveEwwFileAs = function(file_path, callback) {
  var params = {
    file_path: file_path
  };
  var args = new ProjectManager_SaveEwwFileAs_args(params);
  try {
    this.output.writeMessageBegin('SaveEwwFileAs', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_SaveEwwFileAs();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_SaveEwwFileAs = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ProjectManager_SaveEwwFileAs_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};

ProjectManagerClient.prototype.GetProjects = function(callback) {
  this.send_GetProjects(callback); 
  if (!callback) {
    return this.recv_GetProjects();
  }
};

ProjectManagerClient.prototype.send_GetProjects = function(callback) {
  var args = new ProjectManager_GetProjects_args();
  try {
    this.output.writeMessageBegin('GetProjects', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_GetProjects();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_GetProjects = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ProjectManager_GetProjects_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'GetProjects failed: unknown result';
};

ProjectManagerClient.prototype.GetLoadedProjects = function(callback) {
  this.send_GetLoadedProjects(callback); 
  if (!callback) {
    return this.recv_GetLoadedProjects();
  }
};

ProjectManagerClient.prototype.send_GetLoadedProjects = function(callback) {
  var args = new ProjectManager_GetLoadedProjects_args();
  try {
    this.output.writeMessageBegin('GetLoadedProjects', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_GetLoadedProjects();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_GetLoadedProjects = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ProjectManager_GetLoadedProjects_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'GetLoadedProjects failed: unknown result';
};

ProjectManagerClient.prototype.GetCurrentProject = function(callback) {
  this.send_GetCurrentProject(callback); 
  if (!callback) {
    return this.recv_GetCurrentProject();
  }
};

ProjectManagerClient.prototype.send_GetCurrentProject = function(callback) {
  var args = new ProjectManager_GetCurrentProject_args();
  try {
    this.output.writeMessageBegin('GetCurrentProject', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_GetCurrentProject();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_GetCurrentProject = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ProjectManager_GetCurrentProject_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'GetCurrentProject failed: unknown result';
};

ProjectManagerClient.prototype.SetCurrentProject = function(ctx, callback) {
  this.send_SetCurrentProject(ctx, callback); 
  if (!callback) {
  this.recv_SetCurrentProject();
  }
};

ProjectManagerClient.prototype.send_SetCurrentProject = function(ctx, callback) {
  var params = {
    ctx: ctx
  };
  var args = new ProjectManager_SetCurrentProject_args(params);
  try {
    this.output.writeMessageBegin('SetCurrentProject', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_SetCurrentProject();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_SetCurrentProject = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ProjectManager_SetCurrentProject_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};

ProjectManagerClient.prototype.CloseWorkspace = function(callback) {
  this.send_CloseWorkspace(callback); 
  if (!callback) {
  this.recv_CloseWorkspace();
  }
};

ProjectManagerClient.prototype.send_CloseWorkspace = function(callback) {
  var args = new ProjectManager_CloseWorkspace_args();
  try {
    this.output.writeMessageBegin('CloseWorkspace', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_CloseWorkspace();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_CloseWorkspace = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ProjectManager_CloseWorkspace_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};

ProjectManagerClient.prototype.CreateEwpFile = function(file_path, callback) {
  this.send_CreateEwpFile(file_path, callback); 
  if (!callback) {
    return this.recv_CreateEwpFile();
  }
};

ProjectManagerClient.prototype.send_CreateEwpFile = function(file_path, callback) {
  var params = {
    file_path: file_path
  };
  var args = new ProjectManager_CreateEwpFile_args(params);
  try {
    this.output.writeMessageBegin('CreateEwpFile', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_CreateEwpFile();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_CreateEwpFile = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ProjectManager_CreateEwpFile_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'CreateEwpFile failed: unknown result';
};

ProjectManagerClient.prototype.CreateEwpFileWithToolChain = function(file_path, toolchain, callback) {
  this.send_CreateEwpFileWithToolChain(file_path, toolchain, callback); 
  if (!callback) {
    return this.recv_CreateEwpFileWithToolChain();
  }
};

ProjectManagerClient.prototype.send_CreateEwpFileWithToolChain = function(file_path, toolchain, callback) {
  var params = {
    file_path: file_path,
    toolchain: toolchain
  };
  var args = new ProjectManager_CreateEwpFileWithToolChain_args(params);
  try {
    this.output.writeMessageBegin('CreateEwpFileWithToolChain', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_CreateEwpFileWithToolChain();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_CreateEwpFileWithToolChain = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ProjectManager_CreateEwpFileWithToolChain_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'CreateEwpFileWithToolChain failed: unknown result';
};

ProjectManagerClient.prototype.CreateProjectFromTemplate = function(template_path, project_path, callback) {
  this.send_CreateProjectFromTemplate(template_path, project_path, callback); 
  if (!callback) {
    return this.recv_CreateProjectFromTemplate();
  }
};

ProjectManagerClient.prototype.send_CreateProjectFromTemplate = function(template_path, project_path, callback) {
  var params = {
    template_path: template_path,
    project_path: project_path
  };
  var args = new ProjectManager_CreateProjectFromTemplate_args(params);
  try {
    this.output.writeMessageBegin('CreateProjectFromTemplate', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_CreateProjectFromTemplate();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_CreateProjectFromTemplate = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ProjectManager_CreateProjectFromTemplate_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'CreateProjectFromTemplate failed: unknown result';
};

ProjectManagerClient.prototype.LoadEwpFile = function(file_path, callback) {
  this.send_LoadEwpFile(file_path, callback); 
  if (!callback) {
    return this.recv_LoadEwpFile();
  }
};

ProjectManagerClient.prototype.send_LoadEwpFile = function(file_path, callback) {
  var params = {
    file_path: file_path
  };
  var args = new ProjectManager_LoadEwpFile_args(params);
  try {
    this.output.writeMessageBegin('LoadEwpFile', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_LoadEwpFile();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_LoadEwpFile = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ProjectManager_LoadEwpFile_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'LoadEwpFile failed: unknown result';
};

ProjectManagerClient.prototype.SaveEwpFile = function(project, callback) {
  this.send_SaveEwpFile(project, callback); 
  if (!callback) {
  this.recv_SaveEwpFile();
  }
};

ProjectManagerClient.prototype.send_SaveEwpFile = function(project, callback) {
  var params = {
    project: project
  };
  var args = new ProjectManager_SaveEwpFile_args(params);
  try {
    this.output.writeMessageBegin('SaveEwpFile', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_SaveEwpFile();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_SaveEwpFile = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ProjectManager_SaveEwpFile_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};

ProjectManagerClient.prototype.ReloadProject = function(project, callback) {
  this.send_ReloadProject(project, callback); 
  if (!callback) {
    return this.recv_ReloadProject();
  }
};

ProjectManagerClient.prototype.send_ReloadProject = function(project, callback) {
  var params = {
    project: project
  };
  var args = new ProjectManager_ReloadProject_args(params);
  try {
    this.output.writeMessageBegin('ReloadProject', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_ReloadProject();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_ReloadProject = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ProjectManager_ReloadProject_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'ReloadProject failed: unknown result';
};

ProjectManagerClient.prototype.SaveEwpFileAs = function(project, file_path, callback) {
  this.send_SaveEwpFileAs(project, file_path, callback); 
  if (!callback) {
  this.recv_SaveEwpFileAs();
  }
};

ProjectManagerClient.prototype.send_SaveEwpFileAs = function(project, file_path, callback) {
  var params = {
    project: project,
    file_path: file_path
  };
  var args = new ProjectManager_SaveEwpFileAs_args(params);
  try {
    this.output.writeMessageBegin('SaveEwpFileAs', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_SaveEwpFileAs();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_SaveEwpFileAs = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ProjectManager_SaveEwpFileAs_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};

ProjectManagerClient.prototype.ImportProjectFiles = function(ctx, file_path, callback) {
  this.send_ImportProjectFiles(ctx, file_path, callback); 
  if (!callback) {
    return this.recv_ImportProjectFiles();
  }
};

ProjectManagerClient.prototype.send_ImportProjectFiles = function(ctx, file_path, callback) {
  var params = {
    ctx: ctx,
    file_path: file_path
  };
  var args = new ProjectManager_ImportProjectFiles_args(params);
  try {
    this.output.writeMessageBegin('ImportProjectFiles', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_ImportProjectFiles();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_ImportProjectFiles = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ProjectManager_ImportProjectFiles_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'ImportProjectFiles failed: unknown result';
};

ProjectManagerClient.prototype.IsModified = function(project, callback) {
  this.send_IsModified(project, callback); 
  if (!callback) {
    return this.recv_IsModified();
  }
};

ProjectManagerClient.prototype.send_IsModified = function(project, callback) {
  var params = {
    project: project
  };
  var args = new ProjectManager_IsModified_args(params);
  try {
    this.output.writeMessageBegin('IsModified', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_IsModified();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_IsModified = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ProjectManager_IsModified_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'IsModified failed: unknown result';
};

ProjectManagerClient.prototype.IsMemberOfCurrentProject = function(file_path, callback) {
  this.send_IsMemberOfCurrentProject(file_path, callback); 
  if (!callback) {
    return this.recv_IsMemberOfCurrentProject();
  }
};

ProjectManagerClient.prototype.send_IsMemberOfCurrentProject = function(file_path, callback) {
  var params = {
    file_path: file_path
  };
  var args = new ProjectManager_IsMemberOfCurrentProject_args(params);
  try {
    this.output.writeMessageBegin('IsMemberOfCurrentProject', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_IsMemberOfCurrentProject();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_IsMemberOfCurrentProject = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ProjectManager_IsMemberOfCurrentProject_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'IsMemberOfCurrentProject failed: unknown result';
};

ProjectManagerClient.prototype.FindMatchingHeaderOrSourceFile = function(file_path, callback) {
  this.send_FindMatchingHeaderOrSourceFile(file_path, callback); 
  if (!callback) {
    return this.recv_FindMatchingHeaderOrSourceFile();
  }
};

ProjectManagerClient.prototype.send_FindMatchingHeaderOrSourceFile = function(file_path, callback) {
  var params = {
    file_path: file_path
  };
  var args = new ProjectManager_FindMatchingHeaderOrSourceFile_args(params);
  try {
    this.output.writeMessageBegin('FindMatchingHeaderOrSourceFile', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_FindMatchingHeaderOrSourceFile();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_FindMatchingHeaderOrSourceFile = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ProjectManager_FindMatchingHeaderOrSourceFile_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'FindMatchingHeaderOrSourceFile failed: unknown result';
};

ProjectManagerClient.prototype.GetProject = function(file_path, callback) {
  this.send_GetProject(file_path, callback); 
  if (!callback) {
    return this.recv_GetProject();
  }
};

ProjectManagerClient.prototype.send_GetProject = function(file_path, callback) {
  var params = {
    file_path: file_path
  };
  var args = new ProjectManager_GetProject_args(params);
  try {
    this.output.writeMessageBegin('GetProject', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_GetProject();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_GetProject = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ProjectManager_GetProject_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'GetProject failed: unknown result';
};

ProjectManagerClient.prototype.CloseProject = function(project, callback) {
  this.send_CloseProject(project, callback); 
  if (!callback) {
  this.recv_CloseProject();
  }
};

ProjectManagerClient.prototype.send_CloseProject = function(project, callback) {
  var params = {
    project: project
  };
  var args = new ProjectManager_CloseProject_args(params);
  try {
    this.output.writeMessageBegin('CloseProject', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_CloseProject();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_CloseProject = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ProjectManager_CloseProject_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};

ProjectManagerClient.prototype.RemoveProject = function(project, callback) {
  this.send_RemoveProject(project, callback); 
  if (!callback) {
  this.recv_RemoveProject();
  }
};

ProjectManagerClient.prototype.send_RemoveProject = function(project, callback) {
  var params = {
    project: project
  };
  var args = new ProjectManager_RemoveProject_args(params);
  try {
    this.output.writeMessageBegin('RemoveProject', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_RemoveProject();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_RemoveProject = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ProjectManager_RemoveProject_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};

ProjectManagerClient.prototype.GetFiles = function(project, configurationName, col, callback) {
  this.send_GetFiles(project, configurationName, col, callback); 
  if (!callback) {
    return this.recv_GetFiles();
  }
};

ProjectManagerClient.prototype.send_GetFiles = function(project, configurationName, col, callback) {
  var params = {
    project: project,
    configurationName: configurationName,
    col: col
  };
  var args = new ProjectManager_GetFiles_args(params);
  try {
    this.output.writeMessageBegin('GetFiles', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_GetFiles();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_GetFiles = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ProjectManager_GetFiles_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'GetFiles failed: unknown result';
};

ProjectManagerClient.prototype.AddConfiguration = function(config, project, isDebug, callback) {
  this.send_AddConfiguration(config, project, isDebug, callback); 
  if (!callback) {
  this.recv_AddConfiguration();
  }
};

ProjectManagerClient.prototype.send_AddConfiguration = function(config, project, isDebug, callback) {
  var params = {
    config: config,
    project: project,
    isDebug: isDebug
  };
  var args = new ProjectManager_AddConfiguration_args(params);
  try {
    this.output.writeMessageBegin('AddConfiguration', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_AddConfiguration();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_AddConfiguration = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ProjectManager_AddConfiguration_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};

ProjectManagerClient.prototype.AddConfigurationNoSave = function(project, config, basedOnName, callback) {
  this.send_AddConfigurationNoSave(project, config, basedOnName, callback); 
  if (!callback) {
  this.recv_AddConfigurationNoSave();
  }
};

ProjectManagerClient.prototype.send_AddConfigurationNoSave = function(project, config, basedOnName, callback) {
  var params = {
    project: project,
    config: config,
    basedOnName: basedOnName
  };
  var args = new ProjectManager_AddConfigurationNoSave_args(params);
  try {
    this.output.writeMessageBegin('AddConfigurationNoSave', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_AddConfigurationNoSave();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_AddConfigurationNoSave = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ProjectManager_AddConfigurationNoSave_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};

ProjectManagerClient.prototype.RemoveConfiguration = function(configurationName, project, callback) {
  this.send_RemoveConfiguration(configurationName, project, callback); 
  if (!callback) {
  this.recv_RemoveConfiguration();
  }
};

ProjectManagerClient.prototype.send_RemoveConfiguration = function(configurationName, project, callback) {
  var params = {
    configurationName: configurationName,
    project: project
  };
  var args = new ProjectManager_RemoveConfiguration_args(params);
  try {
    this.output.writeMessageBegin('RemoveConfiguration', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_RemoveConfiguration();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_RemoveConfiguration = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ProjectManager_RemoveConfiguration_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};

ProjectManagerClient.prototype.RemoveConfigurationNoSave = function(project, configurationName, callback) {
  this.send_RemoveConfigurationNoSave(project, configurationName, callback); 
  if (!callback) {
  this.recv_RemoveConfigurationNoSave();
  }
};

ProjectManagerClient.prototype.send_RemoveConfigurationNoSave = function(project, configurationName, callback) {
  var params = {
    project: project,
    configurationName: configurationName
  };
  var args = new ProjectManager_RemoveConfigurationNoSave_args(params);
  try {
    this.output.writeMessageBegin('RemoveConfigurationNoSave', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_RemoveConfigurationNoSave();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_RemoveConfigurationNoSave = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ProjectManager_RemoveConfigurationNoSave_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};

ProjectManagerClient.prototype.GetConfigurations = function(project, callback) {
  this.send_GetConfigurations(project, callback); 
  if (!callback) {
    return this.recv_GetConfigurations();
  }
};

ProjectManagerClient.prototype.send_GetConfigurations = function(project, callback) {
  var params = {
    project: project
  };
  var args = new ProjectManager_GetConfigurations_args(params);
  try {
    this.output.writeMessageBegin('GetConfigurations', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_GetConfigurations();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_GetConfigurations = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ProjectManager_GetConfigurations_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'GetConfigurations failed: unknown result';
};

ProjectManagerClient.prototype.SetConfigurationsOrder = function(project, configNames, callback) {
  this.send_SetConfigurationsOrder(project, configNames, callback); 
  if (!callback) {
  this.recv_SetConfigurationsOrder();
  }
};

ProjectManagerClient.prototype.send_SetConfigurationsOrder = function(project, configNames, callback) {
  var params = {
    project: project,
    configNames: configNames
  };
  var args = new ProjectManager_SetConfigurationsOrder_args(params);
  try {
    this.output.writeMessageBegin('SetConfigurationsOrder', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_SetConfigurationsOrder();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_SetConfigurationsOrder = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ProjectManager_SetConfigurationsOrder_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};

ProjectManagerClient.prototype.GetCurrentConfiguration = function(project, callback) {
  this.send_GetCurrentConfiguration(project, callback); 
  if (!callback) {
    return this.recv_GetCurrentConfiguration();
  }
};

ProjectManagerClient.prototype.send_GetCurrentConfiguration = function(project, callback) {
  var params = {
    project: project
  };
  var args = new ProjectManager_GetCurrentConfiguration_args(params);
  try {
    this.output.writeMessageBegin('GetCurrentConfiguration', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_GetCurrentConfiguration();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_GetCurrentConfiguration = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ProjectManager_GetCurrentConfiguration_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'GetCurrentConfiguration failed: unknown result';
};

ProjectManagerClient.prototype.SetCurrentConfiguration = function(project, configurationName, callback) {
  this.send_SetCurrentConfiguration(project, configurationName, callback); 
  if (!callback) {
  this.recv_SetCurrentConfiguration();
  }
};

ProjectManagerClient.prototype.send_SetCurrentConfiguration = function(project, configurationName, callback) {
  var params = {
    project: project,
    configurationName: configurationName
  };
  var args = new ProjectManager_SetCurrentConfiguration_args(params);
  try {
    this.output.writeMessageBegin('SetCurrentConfiguration', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_SetCurrentConfiguration();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_SetCurrentConfiguration = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ProjectManager_SetCurrentConfiguration_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};

ProjectManagerClient.prototype.SetDesktopPathParameters = function(platform, slavery, callback) {
  this.send_SetDesktopPathParameters(platform, slavery, callback); 
  if (!callback) {
  this.recv_SetDesktopPathParameters();
  }
};

ProjectManagerClient.prototype.send_SetDesktopPathParameters = function(platform, slavery, callback) {
  var params = {
    platform: platform,
    slavery: slavery
  };
  var args = new ProjectManager_SetDesktopPathParameters_args(params);
  try {
    this.output.writeMessageBegin('SetDesktopPathParameters', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_SetDesktopPathParameters();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_SetDesktopPathParameters = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ProjectManager_SetDesktopPathParameters_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};

ProjectManagerClient.prototype.GetOfflineDesktopPath = function(callback) {
  this.send_GetOfflineDesktopPath(callback); 
  if (!callback) {
    return this.recv_GetOfflineDesktopPath();
  }
};

ProjectManagerClient.prototype.send_GetOfflineDesktopPath = function(callback) {
  var args = new ProjectManager_GetOfflineDesktopPath_args();
  try {
    this.output.writeMessageBegin('GetOfflineDesktopPath', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_GetOfflineDesktopPath();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_GetOfflineDesktopPath = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ProjectManager_GetOfflineDesktopPath_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'GetOfflineDesktopPath failed: unknown result';
};

ProjectManagerClient.prototype.GetOnlineDesktopPath = function(callback) {
  this.send_GetOnlineDesktopPath(callback); 
  if (!callback) {
    return this.recv_GetOnlineDesktopPath();
  }
};

ProjectManagerClient.prototype.send_GetOnlineDesktopPath = function(callback) {
  var args = new ProjectManager_GetOnlineDesktopPath_args();
  try {
    this.output.writeMessageBegin('GetOnlineDesktopPath', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_GetOnlineDesktopPath();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_GetOnlineDesktopPath = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ProjectManager_GetOnlineDesktopPath_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'GetOnlineDesktopPath failed: unknown result';
};

ProjectManagerClient.prototype.GetRootNode = function(ctx, callback) {
  this.send_GetRootNode(ctx, callback); 
  if (!callback) {
    return this.recv_GetRootNode();
  }
};

ProjectManagerClient.prototype.send_GetRootNode = function(ctx, callback) {
  var params = {
    ctx: ctx
  };
  var args = new ProjectManager_GetRootNode_args(params);
  try {
    this.output.writeMessageBegin('GetRootNode', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_GetRootNode();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_GetRootNode = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ProjectManager_GetRootNode_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'GetRootNode failed: unknown result';
};

ProjectManagerClient.prototype.SetNode = function(ctx, node, callback) {
  this.send_SetNode(ctx, node, callback); 
  if (!callback) {
  this.recv_SetNode();
  }
};

ProjectManagerClient.prototype.send_SetNode = function(ctx, node, callback) {
  var params = {
    ctx: ctx,
    node: node
  };
  var args = new ProjectManager_SetNode_args(params);
  try {
    this.output.writeMessageBegin('SetNode', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_SetNode();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_SetNode = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ProjectManager_SetNode_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};

ProjectManagerClient.prototype.GetNodeByIndex = function(ctx, nodeIndexPath, callback) {
  this.send_GetNodeByIndex(ctx, nodeIndexPath, callback); 
  if (!callback) {
    return this.recv_GetNodeByIndex();
  }
};

ProjectManagerClient.prototype.send_GetNodeByIndex = function(ctx, nodeIndexPath, callback) {
  var params = {
    ctx: ctx,
    nodeIndexPath: nodeIndexPath
  };
  var args = new ProjectManager_GetNodeByIndex_args(params);
  try {
    this.output.writeMessageBegin('GetNodeByIndex', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_GetNodeByIndex();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_GetNodeByIndex = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ProjectManager_GetNodeByIndex_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'GetNodeByIndex failed: unknown result';
};

ProjectManagerClient.prototype.SetNodeByIndex = function(ctx, nodeIndexPath, node, save, callback) {
  this.send_SetNodeByIndex(ctx, nodeIndexPath, node, save, callback); 
  if (!callback) {
  this.recv_SetNodeByIndex();
  }
};

ProjectManagerClient.prototype.send_SetNodeByIndex = function(ctx, nodeIndexPath, node, save, callback) {
  var params = {
    ctx: ctx,
    nodeIndexPath: nodeIndexPath,
    node: node,
    save: save
  };
  var args = new ProjectManager_SetNodeByIndex_args(params);
  try {
    this.output.writeMessageBegin('SetNodeByIndex', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_SetNodeByIndex();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_SetNodeByIndex = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ProjectManager_SetNodeByIndex_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};

ProjectManagerClient.prototype.AddNodeByIndex = function(ctx, nodeIndexPath, node, save, callback) {
  this.send_AddNodeByIndex(ctx, nodeIndexPath, node, save, callback); 
  if (!callback) {
  this.recv_AddNodeByIndex();
  }
};

ProjectManagerClient.prototype.send_AddNodeByIndex = function(ctx, nodeIndexPath, node, save, callback) {
  var params = {
    ctx: ctx,
    nodeIndexPath: nodeIndexPath,
    node: node,
    save: save
  };
  var args = new ProjectManager_AddNodeByIndex_args(params);
  try {
    this.output.writeMessageBegin('AddNodeByIndex', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_AddNodeByIndex();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_AddNodeByIndex = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ProjectManager_AddNodeByIndex_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};

ProjectManagerClient.prototype.RemoveNodeByIndex = function(ctx, nodeIndexPath, save, callback) {
  this.send_RemoveNodeByIndex(ctx, nodeIndexPath, save, callback); 
  if (!callback) {
  this.recv_RemoveNodeByIndex();
  }
};

ProjectManagerClient.prototype.send_RemoveNodeByIndex = function(ctx, nodeIndexPath, save, callback) {
  var params = {
    ctx: ctx,
    nodeIndexPath: nodeIndexPath,
    save: save
  };
  var args = new ProjectManager_RemoveNodeByIndex_args(params);
  try {
    this.output.writeMessageBegin('RemoveNodeByIndex', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_RemoveNodeByIndex();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_RemoveNodeByIndex = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ProjectManager_RemoveNodeByIndex_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};

ProjectManagerClient.prototype.UpdateNodeByIndex = function(ctx, nodeIndexPath, node, save, callback) {
  this.send_UpdateNodeByIndex(ctx, nodeIndexPath, node, save, callback); 
  if (!callback) {
  this.recv_UpdateNodeByIndex();
  }
};

ProjectManagerClient.prototype.send_UpdateNodeByIndex = function(ctx, nodeIndexPath, node, save, callback) {
  var params = {
    ctx: ctx,
    nodeIndexPath: nodeIndexPath,
    node: node,
    save: save
  };
  var args = new ProjectManager_UpdateNodeByIndex_args(params);
  try {
    this.output.writeMessageBegin('UpdateNodeByIndex', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_UpdateNodeByIndex();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_UpdateNodeByIndex = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ProjectManager_UpdateNodeByIndex_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};

ProjectManagerClient.prototype.CanMoveNode = function(ctx, srcNodeIndexPath, dstNodeIndexPath, callback) {
  this.send_CanMoveNode(ctx, srcNodeIndexPath, dstNodeIndexPath, callback); 
  if (!callback) {
    return this.recv_CanMoveNode();
  }
};

ProjectManagerClient.prototype.send_CanMoveNode = function(ctx, srcNodeIndexPath, dstNodeIndexPath, callback) {
  var params = {
    ctx: ctx,
    srcNodeIndexPath: srcNodeIndexPath,
    dstNodeIndexPath: dstNodeIndexPath
  };
  var args = new ProjectManager_CanMoveNode_args(params);
  try {
    this.output.writeMessageBegin('CanMoveNode', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_CanMoveNode();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_CanMoveNode = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ProjectManager_CanMoveNode_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'CanMoveNode failed: unknown result';
};

ProjectManagerClient.prototype.MoveNode = function(ctx, srcNodeIndexPath, dstNodeIndexPath, callback) {
  this.send_MoveNode(ctx, srcNodeIndexPath, dstNodeIndexPath, callback); 
  if (!callback) {
    return this.recv_MoveNode();
  }
};

ProjectManagerClient.prototype.send_MoveNode = function(ctx, srcNodeIndexPath, dstNodeIndexPath, callback) {
  var params = {
    ctx: ctx,
    srcNodeIndexPath: srcNodeIndexPath,
    dstNodeIndexPath: dstNodeIndexPath
  };
  var args = new ProjectManager_MoveNode_args(params);
  try {
    this.output.writeMessageBegin('MoveNode', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_MoveNode();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_MoveNode = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ProjectManager_MoveNode_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'MoveNode failed: unknown result';
};

ProjectManagerClient.prototype.GetToolChainExtensions = function(ctx, callback) {
  this.send_GetToolChainExtensions(ctx, callback); 
  if (!callback) {
    return this.recv_GetToolChainExtensions();
  }
};

ProjectManagerClient.prototype.send_GetToolChainExtensions = function(ctx, callback) {
  var params = {
    ctx: ctx
  };
  var args = new ProjectManager_GetToolChainExtensions_args(params);
  try {
    this.output.writeMessageBegin('GetToolChainExtensions', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_GetToolChainExtensions();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_GetToolChainExtensions = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ProjectManager_GetToolChainExtensions_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'GetToolChainExtensions failed: unknown result';
};

ProjectManagerClient.prototype.GetToolchains = function(callback) {
  this.send_GetToolchains(callback); 
  if (!callback) {
    return this.recv_GetToolchains();
  }
};

ProjectManagerClient.prototype.send_GetToolchains = function(callback) {
  var args = new ProjectManager_GetToolchains_args();
  try {
    this.output.writeMessageBegin('GetToolchains', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_GetToolchains();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_GetToolchains = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ProjectManager_GetToolchains_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'GetToolchains failed: unknown result';
};

ProjectManagerClient.prototype.AddToolchain = function(toolchain, callback) {
  this.send_AddToolchain(toolchain, callback); 
  if (!callback) {
  this.recv_AddToolchain();
  }
};

ProjectManagerClient.prototype.send_AddToolchain = function(toolchain, callback) {
  var params = {
    toolchain: toolchain
  };
  var args = new ProjectManager_AddToolchain_args(params);
  try {
    this.output.writeMessageBegin('AddToolchain', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_AddToolchain();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_AddToolchain = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ProjectManager_AddToolchain_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};

ProjectManagerClient.prototype.GetBatchBuildItems = function(callback) {
  this.send_GetBatchBuildItems(callback); 
  if (!callback) {
    return this.recv_GetBatchBuildItems();
  }
};

ProjectManagerClient.prototype.send_GetBatchBuildItems = function(callback) {
  var args = new ProjectManager_GetBatchBuildItems_args();
  try {
    this.output.writeMessageBegin('GetBatchBuildItems', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_GetBatchBuildItems();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_GetBatchBuildItems = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ProjectManager_GetBatchBuildItems_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'GetBatchBuildItems failed: unknown result';
};

ProjectManagerClient.prototype.SetBatchBuildItems = function(batchBuildItems, callback) {
  this.send_SetBatchBuildItems(batchBuildItems, callback); 
  if (!callback) {
  this.recv_SetBatchBuildItems();
  }
};

ProjectManagerClient.prototype.send_SetBatchBuildItems = function(batchBuildItems, callback) {
  var params = {
    batchBuildItems: batchBuildItems
  };
  var args = new ProjectManager_SetBatchBuildItems_args(params);
  try {
    this.output.writeMessageBegin('SetBatchBuildItems', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_SetBatchBuildItems();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_SetBatchBuildItems = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ProjectManager_SetBatchBuildItems_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};

ProjectManagerClient.prototype.BuildProject = function(prj, configurationName, numParallelBuilds, callback) {
  this.send_BuildProject(prj, configurationName, numParallelBuilds, callback); 
  if (!callback) {
    return this.recv_BuildProject();
  }
};

ProjectManagerClient.prototype.send_BuildProject = function(prj, configurationName, numParallelBuilds, callback) {
  var params = {
    prj: prj,
    configurationName: configurationName,
    numParallelBuilds: numParallelBuilds
  };
  var args = new ProjectManager_BuildProject_args(params);
  try {
    this.output.writeMessageBegin('BuildProject', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_BuildProject();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_BuildProject = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ProjectManager_BuildProject_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'BuildProject failed: unknown result';
};

ProjectManagerClient.prototype.RebuildAllAsync = function(buildItems, stopAtError, numParallelBuilds, callback) {
  this.send_RebuildAllAsync(buildItems, stopAtError, numParallelBuilds, callback); 
  if (!callback) {
  this.recv_RebuildAllAsync();
  }
};

ProjectManagerClient.prototype.send_RebuildAllAsync = function(buildItems, stopAtError, numParallelBuilds, callback) {
  var params = {
    buildItems: buildItems,
    stopAtError: stopAtError,
    numParallelBuilds: numParallelBuilds
  };
  var args = new ProjectManager_RebuildAllAsync_args(params);
  try {
    this.output.writeMessageBegin('RebuildAllAsync', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_RebuildAllAsync();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_RebuildAllAsync = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ProjectManager_RebuildAllAsync_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};

ProjectManagerClient.prototype.CanCompile = function(buildItem, callback) {
  this.send_CanCompile(buildItem, callback); 
  if (!callback) {
    return this.recv_CanCompile();
  }
};

ProjectManagerClient.prototype.send_CanCompile = function(buildItem, callback) {
  var params = {
    buildItem: buildItem
  };
  var args = new ProjectManager_CanCompile_args(params);
  try {
    this.output.writeMessageBegin('CanCompile', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_CanCompile();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_CanCompile = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ProjectManager_CanCompile_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'CanCompile failed: unknown result';
};

ProjectManagerClient.prototype.CompileAsync = function(buildItem, numParallelBuilds, callback) {
  this.send_CompileAsync(buildItem, numParallelBuilds, callback); 
  if (!callback) {
  this.recv_CompileAsync();
  }
};

ProjectManagerClient.prototype.send_CompileAsync = function(buildItem, numParallelBuilds, callback) {
  var params = {
    buildItem: buildItem,
    numParallelBuilds: numParallelBuilds
  };
  var args = new ProjectManager_CompileAsync_args(params);
  try {
    this.output.writeMessageBegin('CompileAsync', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_CompileAsync();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_CompileAsync = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ProjectManager_CompileAsync_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};

ProjectManagerClient.prototype.BuildAsync = function(buildItems, stopAtError, numParallelBuilds, callback) {
  this.send_BuildAsync(buildItems, stopAtError, numParallelBuilds, callback); 
  if (!callback) {
  this.recv_BuildAsync();
  }
};

ProjectManagerClient.prototype.send_BuildAsync = function(buildItems, stopAtError, numParallelBuilds, callback) {
  var params = {
    buildItems: buildItems,
    stopAtError: stopAtError,
    numParallelBuilds: numParallelBuilds
  };
  var args = new ProjectManager_BuildAsync_args(params);
  try {
    this.output.writeMessageBegin('BuildAsync', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_BuildAsync();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_BuildAsync = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ProjectManager_BuildAsync_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};

ProjectManagerClient.prototype.CleanAsync = function(buildItems, callback) {
  this.send_CleanAsync(buildItems, callback); 
  if (!callback) {
  this.recv_CleanAsync();
  }
};

ProjectManagerClient.prototype.send_CleanAsync = function(buildItems, callback) {
  var params = {
    buildItems: buildItems
  };
  var args = new ProjectManager_CleanAsync_args(params);
  try {
    this.output.writeMessageBegin('CleanAsync', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_CleanAsync();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_CleanAsync = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ProjectManager_CleanAsync_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};

ProjectManagerClient.prototype.CancelBuild = function(callback) {
  this.send_CancelBuild(callback); 
  if (!callback) {
  this.recv_CancelBuild();
  }
};

ProjectManagerClient.prototype.send_CancelBuild = function(callback) {
  var args = new ProjectManager_CancelBuild_args();
  try {
    this.output.writeMessageBegin('CancelBuild', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_CancelBuild();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_CancelBuild = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ProjectManager_CancelBuild_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};

ProjectManagerClient.prototype.TerminateAnalysis = function(callback) {
  this.send_TerminateAnalysis(callback); 
  if (!callback) {
  this.recv_TerminateAnalysis();
  }
};

ProjectManagerClient.prototype.send_TerminateAnalysis = function(callback) {
  var args = new ProjectManager_TerminateAnalysis_args();
  try {
    this.output.writeMessageBegin('TerminateAnalysis', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_TerminateAnalysis();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_TerminateAnalysis = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ProjectManager_TerminateAnalysis_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};

ProjectManagerClient.prototype.GetBuildNodes = function(prj, configurationName, toolIdentifier, callback) {
  this.send_GetBuildNodes(prj, configurationName, toolIdentifier, callback); 
  if (!callback) {
    return this.recv_GetBuildNodes();
  }
};

ProjectManagerClient.prototype.send_GetBuildNodes = function(prj, configurationName, toolIdentifier, callback) {
  var params = {
    prj: prj,
    configurationName: configurationName,
    toolIdentifier: toolIdentifier
  };
  var args = new ProjectManager_GetBuildNodes_args(params);
  try {
    this.output.writeMessageBegin('GetBuildNodes', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_GetBuildNodes();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_GetBuildNodes = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ProjectManager_GetBuildNodes_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'GetBuildNodes failed: unknown result';
};

ProjectManagerClient.prototype.GetOptionsForNode = function(prj, node, configurationName, optionIds, callback) {
  this.send_GetOptionsForNode(prj, node, configurationName, optionIds, callback); 
  if (!callback) {
    return this.recv_GetOptionsForNode();
  }
};

ProjectManagerClient.prototype.send_GetOptionsForNode = function(prj, node, configurationName, optionIds, callback) {
  var params = {
    prj: prj,
    node: node,
    configurationName: configurationName,
    optionIds: optionIds
  };
  var args = new ProjectManager_GetOptionsForNode_args(params);
  try {
    this.output.writeMessageBegin('GetOptionsForNode', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_GetOptionsForNode();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_GetOptionsForNode = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ProjectManager_GetOptionsForNode_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'GetOptionsForNode failed: unknown result';
};

ProjectManagerClient.prototype.GetOptionsForConfiguration = function(prj, configurationName, optionIds, callback) {
  this.send_GetOptionsForConfiguration(prj, configurationName, optionIds, callback); 
  if (!callback) {
    return this.recv_GetOptionsForConfiguration();
  }
};

ProjectManagerClient.prototype.send_GetOptionsForConfiguration = function(prj, configurationName, optionIds, callback) {
  var params = {
    prj: prj,
    configurationName: configurationName,
    optionIds: optionIds
  };
  var args = new ProjectManager_GetOptionsForConfiguration_args(params);
  try {
    this.output.writeMessageBegin('GetOptionsForConfiguration', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_GetOptionsForConfiguration();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_GetOptionsForConfiguration = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ProjectManager_GetOptionsForConfiguration_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'GetOptionsForConfiguration failed: unknown result';
};

ProjectManagerClient.prototype.ApplyOptionsForNode = function(prj, node, configurationName, optionsToSet, callback) {
  this.send_ApplyOptionsForNode(prj, node, configurationName, optionsToSet, callback); 
  if (!callback) {
    return this.recv_ApplyOptionsForNode();
  }
};

ProjectManagerClient.prototype.send_ApplyOptionsForNode = function(prj, node, configurationName, optionsToSet, callback) {
  var params = {
    prj: prj,
    node: node,
    configurationName: configurationName,
    optionsToSet: optionsToSet
  };
  var args = new ProjectManager_ApplyOptionsForNode_args(params);
  try {
    this.output.writeMessageBegin('ApplyOptionsForNode', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_ApplyOptionsForNode();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_ApplyOptionsForNode = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ProjectManager_ApplyOptionsForNode_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'ApplyOptionsForNode failed: unknown result';
};

ProjectManagerClient.prototype.VerifyOptionsForNode = function(prj, node, configurationName, optionsToSet, callback) {
  this.send_VerifyOptionsForNode(prj, node, configurationName, optionsToSet, callback); 
  if (!callback) {
    return this.recv_VerifyOptionsForNode();
  }
};

ProjectManagerClient.prototype.send_VerifyOptionsForNode = function(prj, node, configurationName, optionsToSet, callback) {
  var params = {
    prj: prj,
    node: node,
    configurationName: configurationName,
    optionsToSet: optionsToSet
  };
  var args = new ProjectManager_VerifyOptionsForNode_args(params);
  try {
    this.output.writeMessageBegin('VerifyOptionsForNode', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_VerifyOptionsForNode();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_VerifyOptionsForNode = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ProjectManager_VerifyOptionsForNode_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'VerifyOptionsForNode failed: unknown result';
};

ProjectManagerClient.prototype.ApplyOptionsForConfiguration = function(prj, configurationName, optionsToSet, callback) {
  this.send_ApplyOptionsForConfiguration(prj, configurationName, optionsToSet, callback); 
  if (!callback) {
    return this.recv_ApplyOptionsForConfiguration();
  }
};

ProjectManagerClient.prototype.send_ApplyOptionsForConfiguration = function(prj, configurationName, optionsToSet, callback) {
  var params = {
    prj: prj,
    configurationName: configurationName,
    optionsToSet: optionsToSet
  };
  var args = new ProjectManager_ApplyOptionsForConfiguration_args(params);
  try {
    this.output.writeMessageBegin('ApplyOptionsForConfiguration', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_ApplyOptionsForConfiguration();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_ApplyOptionsForConfiguration = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ProjectManager_ApplyOptionsForConfiguration_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'ApplyOptionsForConfiguration failed: unknown result';
};

ProjectManagerClient.prototype.VerifyOptionsForConfiguration = function(prj, configurationName, optionsToSet, callback) {
  this.send_VerifyOptionsForConfiguration(prj, configurationName, optionsToSet, callback); 
  if (!callback) {
    return this.recv_VerifyOptionsForConfiguration();
  }
};

ProjectManagerClient.prototype.send_VerifyOptionsForConfiguration = function(prj, configurationName, optionsToSet, callback) {
  var params = {
    prj: prj,
    configurationName: configurationName,
    optionsToSet: optionsToSet
  };
  var args = new ProjectManager_VerifyOptionsForConfiguration_args(params);
  try {
    this.output.writeMessageBegin('VerifyOptionsForConfiguration', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_VerifyOptionsForConfiguration();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_VerifyOptionsForConfiguration = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ProjectManager_VerifyOptionsForConfiguration_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'VerifyOptionsForConfiguration failed: unknown result';
};

ProjectManagerClient.prototype.GetOptionCategories = function(prj, configurationName, callback) {
  this.send_GetOptionCategories(prj, configurationName, callback); 
  if (!callback) {
    return this.recv_GetOptionCategories();
  }
};

ProjectManagerClient.prototype.send_GetOptionCategories = function(prj, configurationName, callback) {
  var params = {
    prj: prj,
    configurationName: configurationName
  };
  var args = new ProjectManager_GetOptionCategories_args(params);
  try {
    this.output.writeMessageBegin('GetOptionCategories', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_GetOptionCategories();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_GetOptionCategories = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ProjectManager_GetOptionCategories_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'GetOptionCategories failed: unknown result';
};

ProjectManagerClient.prototype.EnableMultiFileCompilation = function(prj, configurationName, node, enabled, callback) {
  this.send_EnableMultiFileCompilation(prj, configurationName, node, enabled, callback); 
  if (!callback) {
  this.recv_EnableMultiFileCompilation();
  }
};

ProjectManagerClient.prototype.send_EnableMultiFileCompilation = function(prj, configurationName, node, enabled, callback) {
  var params = {
    prj: prj,
    configurationName: configurationName,
    node: node,
    enabled: enabled
  };
  var args = new ProjectManager_EnableMultiFileCompilation_args(params);
  try {
    this.output.writeMessageBegin('EnableMultiFileCompilation', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_EnableMultiFileCompilation();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_EnableMultiFileCompilation = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ProjectManager_EnableMultiFileCompilation_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};

ProjectManagerClient.prototype.EnableMultiFileDiscardPublicSymbols = function(prj, configurationName, node, enabled, callback) {
  this.send_EnableMultiFileDiscardPublicSymbols(prj, configurationName, node, enabled, callback); 
  if (!callback) {
  this.recv_EnableMultiFileDiscardPublicSymbols();
  }
};

ProjectManagerClient.prototype.send_EnableMultiFileDiscardPublicSymbols = function(prj, configurationName, node, enabled, callback) {
  var params = {
    prj: prj,
    configurationName: configurationName,
    node: node,
    enabled: enabled
  };
  var args = new ProjectManager_EnableMultiFileDiscardPublicSymbols_args(params);
  try {
    this.output.writeMessageBegin('EnableMultiFileDiscardPublicSymbols', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_EnableMultiFileDiscardPublicSymbols();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_EnableMultiFileDiscardPublicSymbols = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ProjectManager_EnableMultiFileDiscardPublicSymbols_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};

ProjectManagerClient.prototype.IsMultiFileCompilationEnabled = function(prj, configurationName, node, callback) {
  this.send_IsMultiFileCompilationEnabled(prj, configurationName, node, callback); 
  if (!callback) {
    return this.recv_IsMultiFileCompilationEnabled();
  }
};

ProjectManagerClient.prototype.send_IsMultiFileCompilationEnabled = function(prj, configurationName, node, callback) {
  var params = {
    prj: prj,
    configurationName: configurationName,
    node: node
  };
  var args = new ProjectManager_IsMultiFileCompilationEnabled_args(params);
  try {
    this.output.writeMessageBegin('IsMultiFileCompilationEnabled', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_IsMultiFileCompilationEnabled();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_IsMultiFileCompilationEnabled = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ProjectManager_IsMultiFileCompilationEnabled_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'IsMultiFileCompilationEnabled failed: unknown result';
};

ProjectManagerClient.prototype.IsMultiFileDiscardPublicSymbolsEnabled = function(prj, configurationName, node, callback) {
  this.send_IsMultiFileDiscardPublicSymbolsEnabled(prj, configurationName, node, callback); 
  if (!callback) {
    return this.recv_IsMultiFileDiscardPublicSymbolsEnabled();
  }
};

ProjectManagerClient.prototype.send_IsMultiFileDiscardPublicSymbolsEnabled = function(prj, configurationName, node, callback) {
  var params = {
    prj: prj,
    configurationName: configurationName,
    node: node
  };
  var args = new ProjectManager_IsMultiFileDiscardPublicSymbolsEnabled_args(params);
  try {
    this.output.writeMessageBegin('IsMultiFileDiscardPublicSymbolsEnabled', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_IsMultiFileDiscardPublicSymbolsEnabled();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_IsMultiFileDiscardPublicSymbolsEnabled = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ProjectManager_IsMultiFileDiscardPublicSymbolsEnabled_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'IsMultiFileDiscardPublicSymbolsEnabled failed: unknown result';
};

ProjectManagerClient.prototype.GetToolArgumentsForConfiguration = function(prj, toolId, configurationName, callback) {
  this.send_GetToolArgumentsForConfiguration(prj, toolId, configurationName, callback); 
  if (!callback) {
    return this.recv_GetToolArgumentsForConfiguration();
  }
};

ProjectManagerClient.prototype.send_GetToolArgumentsForConfiguration = function(prj, toolId, configurationName, callback) {
  var params = {
    prj: prj,
    toolId: toolId,
    configurationName: configurationName
  };
  var args = new ProjectManager_GetToolArgumentsForConfiguration_args(params);
  try {
    this.output.writeMessageBegin('GetToolArgumentsForConfiguration', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_GetToolArgumentsForConfiguration();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_GetToolArgumentsForConfiguration = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ProjectManager_GetToolArgumentsForConfiguration_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'GetToolArgumentsForConfiguration failed: unknown result';
};

ProjectManagerClient.prototype.ExpandArgVars = function(input, project, configurationName, throwOnFailure, callback) {
  this.send_ExpandArgVars(input, project, configurationName, throwOnFailure, callback); 
  if (!callback) {
    return this.recv_ExpandArgVars();
  }
};

ProjectManagerClient.prototype.send_ExpandArgVars = function(input, project, configurationName, throwOnFailure, callback) {
  var params = {
    input: input,
    project: project,
    configurationName: configurationName,
    throwOnFailure: throwOnFailure
  };
  var args = new ProjectManager_ExpandArgVars_args(params);
  try {
    this.output.writeMessageBegin('ExpandArgVars', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_ExpandArgVars();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_ExpandArgVars = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ProjectManager_ExpandArgVars_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'ExpandArgVars failed: unknown result';
};

ProjectManagerClient.prototype.GetPresentationForOptionsAsJson = function(locale, callback) {
  this.send_GetPresentationForOptionsAsJson(locale, callback); 
  if (!callback) {
    return this.recv_GetPresentationForOptionsAsJson();
  }
};

ProjectManagerClient.prototype.send_GetPresentationForOptionsAsJson = function(locale, callback) {
  var params = {
    locale: locale
  };
  var args = new ProjectManager_GetPresentationForOptionsAsJson_args(params);
  try {
    this.output.writeMessageBegin('GetPresentationForOptionsAsJson', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_GetPresentationForOptionsAsJson();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_GetPresentationForOptionsAsJson = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ProjectManager_GetPresentationForOptionsAsJson_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'GetPresentationForOptionsAsJson failed: unknown result';
};

ProjectManagerClient.prototype.UpdateProjectConnections = function(prj, callback) {
  this.send_UpdateProjectConnections(prj, callback); 
  if (!callback) {
  this.recv_UpdateProjectConnections();
  }
};

ProjectManagerClient.prototype.send_UpdateProjectConnections = function(prj, callback) {
  var params = {
    prj: prj
  };
  var args = new ProjectManager_UpdateProjectConnections_args(params);
  try {
    this.output.writeMessageBegin('UpdateProjectConnections', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_UpdateProjectConnections();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_UpdateProjectConnections = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ProjectManager_UpdateProjectConnections_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};

ProjectManagerClient.prototype.UpdateProjectConnection = function(prj, file, callback) {
  this.send_UpdateProjectConnection(prj, file, callback); 
  if (!callback) {
    return this.recv_UpdateProjectConnection();
  }
};

ProjectManagerClient.prototype.send_UpdateProjectConnection = function(prj, file, callback) {
  var params = {
    prj: prj,
    file: file
  };
  var args = new ProjectManager_UpdateProjectConnection_args(params);
  try {
    this.output.writeMessageBegin('UpdateProjectConnection', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_UpdateProjectConnection();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_UpdateProjectConnection = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ProjectManager_UpdateProjectConnection_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'UpdateProjectConnection failed: unknown result';
};

ProjectManagerClient.prototype.RemoveMonitors = function(prj, callback) {
  this.send_RemoveMonitors(prj, callback); 
  if (!callback) {
  this.recv_RemoveMonitors();
  }
};

ProjectManagerClient.prototype.send_RemoveMonitors = function(prj, callback) {
  var params = {
    prj: prj
  };
  var args = new ProjectManager_RemoveMonitors_args(params);
  try {
    this.output.writeMessageBegin('RemoveMonitors', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_RemoveMonitors();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_RemoveMonitors = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ProjectManager_RemoveMonitors_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};

ProjectManagerClient.prototype.EnableProjectConnections = function(enable, callback) {
  this.send_EnableProjectConnections(enable, callback); 
  if (!callback) {
  this.recv_EnableProjectConnections();
  }
};

ProjectManagerClient.prototype.send_EnableProjectConnections = function(enable, callback) {
  var params = {
    enable: enable
  };
  var args = new ProjectManager_EnableProjectConnections_args(params);
  try {
    this.output.writeMessageBegin('EnableProjectConnections', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_EnableProjectConnections();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_EnableProjectConnections = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ProjectManager_EnableProjectConnections_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};

ProjectManagerClient.prototype.IsExternalProjectUpToDate = function(prj, callback) {
  this.send_IsExternalProjectUpToDate(prj, callback); 
  if (!callback) {
    return this.recv_IsExternalProjectUpToDate();
  }
};

ProjectManagerClient.prototype.send_IsExternalProjectUpToDate = function(prj, callback) {
  var params = {
    prj: prj
  };
  var args = new ProjectManager_IsExternalProjectUpToDate_args(params);
  try {
    this.output.writeMessageBegin('IsExternalProjectUpToDate', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_IsExternalProjectUpToDate();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_IsExternalProjectUpToDate = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ProjectManager_IsExternalProjectUpToDate_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'IsExternalProjectUpToDate failed: unknown result';
};

ProjectManagerClient.prototype.SynchonizeExternalProject = function(prj, callback) {
  this.send_SynchonizeExternalProject(prj, callback); 
  if (!callback) {
    return this.recv_SynchonizeExternalProject();
  }
};

ProjectManagerClient.prototype.send_SynchonizeExternalProject = function(prj, callback) {
  var params = {
    prj: prj
  };
  var args = new ProjectManager_SynchonizeExternalProject_args(params);
  try {
    this.output.writeMessageBegin('SynchonizeExternalProject', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_SynchonizeExternalProject();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_SynchonizeExternalProject = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ProjectManager_SynchonizeExternalProject_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'SynchonizeExternalProject failed: unknown result';
};

ProjectManagerClient.prototype.ConfigureExternalProject = function(prj, force, callback) {
  this.send_ConfigureExternalProject(prj, force, callback); 
  if (!callback) {
    return this.recv_ConfigureExternalProject();
  }
};

ProjectManagerClient.prototype.send_ConfigureExternalProject = function(prj, force, callback) {
  var params = {
    prj: prj,
    force: force
  };
  var args = new ProjectManager_ConfigureExternalProject_args(params);
  try {
    this.output.writeMessageBegin('ConfigureExternalProject', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_ConfigureExternalProject();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_ConfigureExternalProject = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ProjectManager_ConfigureExternalProject_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'ConfigureExternalProject failed: unknown result';
};

ProjectManagerClient.prototype.AddControlFile = function(prj, file, pluginId, callback) {
  this.send_AddControlFile(prj, file, pluginId, callback); 
  if (!callback) {
  this.recv_AddControlFile();
  }
};

ProjectManagerClient.prototype.send_AddControlFile = function(prj, file, pluginId, callback) {
  var params = {
    prj: prj,
    file: file,
    pluginId: pluginId
  };
  var args = new ProjectManager_AddControlFile_args(params);
  try {
    this.output.writeMessageBegin('AddControlFile', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_AddControlFile();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_AddControlFile = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ProjectManager_AddControlFile_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};

ProjectManagerClient.prototype.HasControlFileFor = function(prj, pluginId, callback) {
  this.send_HasControlFileFor(prj, pluginId, callback); 
  if (!callback) {
    return this.recv_HasControlFileFor();
  }
};

ProjectManagerClient.prototype.send_HasControlFileFor = function(prj, pluginId, callback) {
  var params = {
    prj: prj,
    pluginId: pluginId
  };
  var args = new ProjectManager_HasControlFileFor_args(params);
  try {
    this.output.writeMessageBegin('HasControlFileFor', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_HasControlFileFor();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_HasControlFileFor = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ProjectManager_HasControlFileFor_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'HasControlFileFor failed: unknown result';
};

ProjectManagerClient.prototype.IsProjectConnectionsEnabled = function(callback) {
  this.send_IsProjectConnectionsEnabled(callback); 
  if (!callback) {
    return this.recv_IsProjectConnectionsEnabled();
  }
};

ProjectManagerClient.prototype.send_IsProjectConnectionsEnabled = function(callback) {
  var args = new ProjectManager_IsProjectConnectionsEnabled_args();
  try {
    this.output.writeMessageBegin('IsProjectConnectionsEnabled', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_IsProjectConnectionsEnabled();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_IsProjectConnectionsEnabled = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ProjectManager_IsProjectConnectionsEnabled_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'IsProjectConnectionsEnabled failed: unknown result';
};

ProjectManagerClient.prototype.GetControlFilePlugins = function(callback) {
  this.send_GetControlFilePlugins(callback); 
  if (!callback) {
    return this.recv_GetControlFilePlugins();
  }
};

ProjectManagerClient.prototype.send_GetControlFilePlugins = function(callback) {
  var args = new ProjectManager_GetControlFilePlugins_args();
  try {
    this.output.writeMessageBegin('GetControlFilePlugins', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_GetControlFilePlugins();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_GetControlFilePlugins = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ProjectManager_GetControlFilePlugins_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'GetControlFilePlugins failed: unknown result';
};

ProjectManagerClient.prototype.GetOptionsForProject = function(prj, callback) {
  this.send_GetOptionsForProject(prj, callback); 
  if (!callback) {
    return this.recv_GetOptionsForProject();
  }
};

ProjectManagerClient.prototype.send_GetOptionsForProject = function(prj, callback) {
  var params = {
    prj: prj
  };
  var args = new ProjectManager_GetOptionsForProject_args(params);
  try {
    this.output.writeMessageBegin('GetOptionsForProject', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_GetOptionsForProject();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_GetOptionsForProject = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ProjectManager_GetOptionsForProject_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'GetOptionsForProject failed: unknown result';
};

ProjectManagerClient.prototype.ApplyOptionsForProject = function(prj, options, callback) {
  this.send_ApplyOptionsForProject(prj, options, callback); 
  if (!callback) {
    return this.recv_ApplyOptionsForProject();
  }
};

ProjectManagerClient.prototype.send_ApplyOptionsForProject = function(prj, options, callback) {
  var params = {
    prj: prj,
    options: options
  };
  var args = new ProjectManager_ApplyOptionsForProject_args(params);
  try {
    this.output.writeMessageBegin('ApplyOptionsForProject', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_ApplyOptionsForProject();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

ProjectManagerClient.prototype.recv_ApplyOptionsForProject = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ProjectManager_ApplyOptionsForProject_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'ApplyOptionsForProject failed: unknown result';
};
