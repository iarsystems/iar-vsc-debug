//
// Autogenerated by Thrift Compiler (0.14.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
import Int64 = require('node-int64');


export declare enum Alignment {
  kLeft = 0,
  kRight = 1,
  kCenter = 2,
}

export declare enum TextStyle {
  kFixedPlain = 0,
  kFixedBold = 1,
  kFixedItalic = 2,
  kFixedBoldItalic = 3,
  kProportionalPlain = 4,
  kProportionalBold = 5,
  kProportionalItalic = 6,
  kProportionalBoldItalic = 7,
}

export declare enum KeyNavOperation {
  kPrevItem = 0,
  kNextItem = 1,
  kPrevItemPage = 2,
  kNextItemPage = 3,
  kTopItem = 4,
  kBottomItem = 5,
  kNextRight = 6,
  kPrevLeft = 7,
}

export declare enum ScrollOperation {
  kScrollLineUp = 0,
  kScrollLineDown = 1,
  kScrollPageUp = 2,
  kScrollPageDown = 3,
  kScrollTop = 4,
  kScrollBottom = 5,
  kScrollTrack = 6,
}

export declare enum SelectionFlags {
  kReplace = 0,
  kAdd = 1,
  kRange = 2,
}

export declare enum Target {
  kNoTarget = 0,
  kTargetAll = 1,
  kTargetRow = 2,
  kTargetColumn = 3,
  kTargetCell = 4,
}

export declare enum What {
  kEnsureVisible = 0,
  kSelectionUpdate = 1,
  kRowUpdate = 2,
  kNormalUpdate = 3,
  kFullUpdate = 4,
  kFreeze = 5,
  kThaw = 6,
}

export declare enum ToolbarWhat {
  kNormalUpdate = 0,
  kFullUpdate = 1,
  kFocusOn = 2,
}

export declare class Range {
  first: Int64;
  last: Int64;

    constructor(args?: { first: Int64; last: Int64; });
  read(input: Object): void;
  write(input: Object): void;
}

export declare class Color {
  r: number;
  g: number;
  b: number;
  lowContrast: boolean;
  isDefault: boolean;

    constructor(args?: { r: number; g: number; b: number; lowContrast: boolean; isDefault: boolean; });
  read(input: Object): void;
  write(input: Object): void;
}

export declare class Format {
  align: Alignment;
  style: TextStyle;
  editable: boolean;
  icons: string[];
  transp: Color;
  textColor: Color;
  bgColor: Color;
  barColor: Color;

    constructor(args?: { align: Alignment; style: TextStyle; editable: boolean; icons: string[]; transp: Color; textColor: Color; bgColor: Color; barColor: Color; });
  read(input: Object): void;
  write(input: Object): void;
}

export declare class Cell {
  text: string;
  format: Format;
  drop: Target;

    constructor(args?: { text: string; format: Format; drop: Target; });
  read(input: Object): void;
  write(input: Object): void;
}

export declare class Row {
  cells: Cell[];
  isChecked: boolean;
  treeinfo: string;

    constructor(args?: { cells: Cell[]; isChecked: boolean; treeinfo: string; });
  read(input: Object): void;
  write(input: Object): void;
}

export declare class Column {
  title: string;
  width: number;
  fixed: boolean;
  hideSelection: boolean;
  defaultFormat: Format;

    constructor(args?: { title: string; width: number; fixed: boolean; hideSelection: boolean; defaultFormat: Format; });
  read(input: Object): void;
  write(input: Object): void;
}

export declare class ListSpec {
  bgColor: Color;
  canClickColumns: boolean;
  showGrid: boolean;
  showHeader: boolean;
  showCheckBoxes: boolean;

    constructor(args?: { bgColor: Color; canClickColumns: boolean; showGrid: boolean; showHeader: boolean; showCheckBoxes: boolean; });
  read(input: Object): void;
  write(input: Object): void;
}

export declare class MenuItem {
  text: string;
  command: number;
  enabled: boolean;
  checked: boolean;

    constructor(args?: { text: string; command: number; enabled: boolean; checked: boolean; });
  read(input: Object): void;
  write(input: Object): void;
}

export declare class SelRange {
  first: Int64;
  last: Int64;

    constructor(args?: { first: Int64; last: Int64; });
  read(input: Object): void;
  write(input: Object): void;
}

export declare class EditInfo {
  editString: string;
  column: number;
  range: SelRange;

    constructor(args?: { editString: string; column: number; range: SelRange; });
  read(input: Object): void;
  write(input: Object): void;
}

export declare class Tooltip {
  target: Target;
  text: string;

    constructor(args?: { target: Target; text: string; });
  read(input: Object): void;
  write(input: Object): void;
}

export declare class Drag {
  result: boolean;
  text: string;
  row: Int64;
  col: number;

    constructor(args?: { result: boolean; text: string; row: Int64; col: number; });
  read(input: Object): void;
  write(input: Object): void;
}

export declare class HelpTag {
  available: boolean;
  text: string;

    constructor(args?: { available: boolean; text: string; });
  read(input: Object): void;
  write(input: Object): void;
}

export declare class Note {
  what: What;
  seq: Int64;
  ensureVisible: Int64;
  row: Int64;
  anonPos: string;

    constructor(args?: { what: What; seq: Int64; ensureVisible: Int64; row: Int64; anonPos: string; });
  read(input: Object): void;
  write(input: Object): void;
}

export declare class ToolbarNote {
  what: ToolbarWhat;
  focusOn: number;

    constructor(args?: { what: ToolbarWhat; focusOn: number; });
  read(input: Object): void;
  write(input: Object): void;
}

export declare class ToolbarItemState {
  enabled: boolean;
  visible: boolean;
  on: boolean;
  detail: Int64;
  str: string;

    constructor(args?: { enabled: boolean; visible: boolean; on: boolean; detail: Int64; str: string; });
  read(input: Object): void;
  write(input: Object): void;
}

export declare class ChunkInfo {
  numberOfRows: number;
  fractionBefore: number;
  fractionAfter: number;
  atStart: boolean;
  atEnd: boolean;

    constructor(args?: { numberOfRows: number; fractionBefore: number; fractionAfter: number; atStart: boolean; atEnd: boolean; });
  read(input: Object): void;
  write(input: Object): void;
}

export declare class AddRowsResult {
  chunkInfo: ChunkInfo;
  rows: number;

    constructor(args?: { chunkInfo: ChunkInfo; rows: number; });
  read(input: Object): void;
  write(input: Object): void;
}

export declare class NavigateResult {
  chunkInfo: ChunkInfo;
  chunkPos: number;

    constructor(args?: { chunkInfo: ChunkInfo; chunkPos: number; });
  read(input: Object): void;
  write(input: Object): void;
}

export declare class SelectionResult {
  row: number;
  pos: string;

    constructor(args?: { row: number; pos: string; });
  read(input: Object): void;
  write(input: Object): void;
}

export declare class StackBarInfo {
  currentLevel: number;
  maxLevel: number;

    constructor(args?: { currentLevel: number; maxLevel: number; });
  read(input: Object): void;
  write(input: Object): void;
}

export declare class TraceCustomParameter {
  name: string;
  value: string;

    constructor(args?: { name: string; value: string; });
  read(input: Object): void;
  write(input: Object): void;
}

export declare class TraceFindParams {
  findWhat: string;
  useRange: boolean;
  rangeStart: Int64;
  rangeEnd: Int64;
  textSearch: boolean;
  searchColumn: number;
  columnName: string;
  matchCase: boolean;
  matchWord: boolean;
  columns: string[];
  searchHistory: string[];
  customParameters: TraceCustomParameter[];

    constructor(args?: { findWhat: string; useRange: boolean; rangeStart: Int64; rangeEnd: Int64; textSearch: boolean; searchColumn: number; columnName: string; matchCase: boolean; matchWord: boolean; columns: string[]; searchHistory: string[]; customParameters: TraceCustomParameter[]; });
  read(input: Object): void;
  write(input: Object): void;
}

export declare class TraceProgress {
  current: number;
  maxvalue: number;

    constructor(args?: { current: number; maxvalue: number; });
  read(input: Object): void;
  write(input: Object): void;
}

export declare class DragDropFeedback {
  target: Target;
  rowIdx: number;
  colIdx: number;

    constructor(args?: { target: Target; rowIdx: number; colIdx: number; });
  read(input: Object): void;
  write(input: Object): void;
}

export declare class ListWindowRenderParameters {
  listSpec: ListSpec;
  columns: Column[];
  rows: Row[];
  selection: SelRange[];
  offset: Int64;
  dragDropFeedback: DragDropFeedback;
  hpos: number;

    constructor(args?: { listSpec: ListSpec; columns: Column[]; rows: Row[]; selection: SelRange[]; offset: Int64; dragDropFeedback: DragDropFeedback; hpos: number; });
  read(input: Object): void;
  write(input: Object): void;
}

export declare var SLIDING_POS_NONE: string;
