//
// Autogenerated by Thrift Compiler (0.14.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
if (typeof Int64 === 'undefined' && typeof require === 'function') {
  var Int64 = require('node-int64');
}


var ttypes = module.exports = {};
var DisassembledLocation = module.exports.DisassembledLocation = function(args) {
  this.location = null;
  this.instructions = null;
  this._function = null;
  this.offset = null;
  if (args) {
    if (args.location !== undefined && args.location !== null) {
      this.location = new shared_ttypes.Location(args.location);
    }
    if (args.instructions !== undefined && args.instructions !== null) {
      this.instructions = Thrift.copyList(args.instructions, [null]);
    }
    if (args._function !== undefined && args._function !== null) {
      this._function = args._function;
    }
    if (args.offset !== undefined && args.offset !== null) {
      this.offset = args.offset;
    }
  }
};
DisassembledLocation.prototype = {};
DisassembledLocation.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.location = new shared_ttypes.Location();
        this.location.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.instructions = [];
        var _rtmp31 = input.readListBegin();
        var _size0 = _rtmp31.size || 0;
        for (var _i2 = 0; _i2 < _size0; ++_i2) {
          var elem3 = null;
          elem3 = input.readString().value;
          this.instructions.push(elem3);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this._function = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.offset = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DisassembledLocation.prototype.write = function(output) {
  output.writeStructBegin('DisassembledLocation');
  if (this.location !== null && this.location !== undefined) {
    output.writeFieldBegin('location', Thrift.Type.STRUCT, 1);
    this.location.write(output);
    output.writeFieldEnd();
  }
  if (this.instructions !== null && this.instructions !== undefined) {
    output.writeFieldBegin('instructions', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.instructions.length);
    for (var iter4 in this.instructions) {
      if (this.instructions.hasOwnProperty(iter4)) {
        iter4 = this.instructions[iter4];
        output.writeString(iter4);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this._function !== null && this._function !== undefined) {
    output.writeFieldBegin('_function', Thrift.Type.STRING, 3);
    output.writeString(this._function);
    output.writeFieldEnd();
  }
  if (this.offset !== null && this.offset !== undefined) {
    output.writeFieldBegin('offset', Thrift.Type.I64, 4);
    output.writeI64(this.offset);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ttypes.DISASSEMBLY_SERVICE = 'disassembly';
