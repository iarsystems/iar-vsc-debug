//
// Autogenerated by Thrift Compiler (0.14.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
if (typeof Int64 === 'undefined' && typeof require === 'function') {
  var Int64 = require('node-int64');
}


//HELPER FUNCTIONS AND STRUCTURES

var SessionSynchronizer_SyncTo_args = function(args) {
  this.who = null;
  this.destState = null;
  if (args) {
    if (args.who !== undefined && args.who !== null) {
      this.who = args.who;
    }
    if (args.destState !== undefined && args.destState !== null) {
      this.destState = args.destState;
    }
  }
};
SessionSynchronizer_SyncTo_args.prototype = {};
SessionSynchronizer_SyncTo_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.who = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.destState = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SessionSynchronizer_SyncTo_args.prototype.write = function(output) {
  output.writeStructBegin('SessionSynchronizer_SyncTo_args');
  if (this.who !== null && this.who !== undefined) {
    output.writeFieldBegin('who', Thrift.Type.I32, 1);
    output.writeI32(this.who);
    output.writeFieldEnd();
  }
  if (this.destState !== null && this.destState !== undefined) {
    output.writeFieldBegin('destState', Thrift.Type.I32, 2);
    output.writeI32(this.destState);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SessionSynchronizer_SyncTo_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
SessionSynchronizer_SyncTo_result.prototype = {};
SessionSynchronizer_SyncTo_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SessionSynchronizer_SyncTo_result.prototype.write = function(output) {
  output.writeStructBegin('SessionSynchronizer_SyncTo_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SessionSynchronizer_CurrentState_args = function(args) {
  this.who = null;
  if (args) {
    if (args.who !== undefined && args.who !== null) {
      this.who = args.who;
    }
  }
};
SessionSynchronizer_CurrentState_args.prototype = {};
SessionSynchronizer_CurrentState_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.who = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SessionSynchronizer_CurrentState_args.prototype.write = function(output) {
  output.writeStructBegin('SessionSynchronizer_CurrentState_args');
  if (this.who !== null && this.who !== undefined) {
    output.writeFieldBegin('who', Thrift.Type.I32, 1);
    output.writeI32(this.who);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SessionSynchronizer_CurrentState_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
SessionSynchronizer_CurrentState_result.prototype = {};
SessionSynchronizer_CurrentState_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SessionSynchronizer_CurrentState_result.prototype.write = function(output) {
  output.writeStructBegin('SessionSynchronizer_CurrentState_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SessionSynchronizer_AllStates_args = function(args) {
};
SessionSynchronizer_AllStates_args.prototype = {};
SessionSynchronizer_AllStates_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SessionSynchronizer_AllStates_args.prototype.write = function(output) {
  output.writeStructBegin('SessionSynchronizer_AllStates_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SessionSynchronizer_AllStates_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
  }
};
SessionSynchronizer_AllStates_result.prototype = {};
SessionSynchronizer_AllStates_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp337 = input.readListBegin();
        var _size36 = _rtmp337.size || 0;
        for (var _i38 = 0; _i38 < _size36; ++_i38) {
          var elem39 = null;
          elem39 = input.readI32().value;
          this.success.push(elem39);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SessionSynchronizer_AllStates_result.prototype.write = function(output) {
  output.writeStructBegin('SessionSynchronizer_AllStates_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.I32, this.success.length);
    for (var iter40 in this.success) {
      if (this.success.hasOwnProperty(iter40)) {
        iter40 = this.success[iter40];
        output.writeI32(iter40);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SessionSynchronizerClient = exports.Client = function(input, output) {
  this.input = input;
  this.output = (!output) ? input : output;
  this.seqid = 0;
};
Thrift.inherits(SessionSynchronizerClient, HeartbeatServiceClient);

SessionSynchronizerClient.prototype.SyncTo = function(who, destState, callback) {
  this.send_SyncTo(who, destState, callback); 
  if (!callback) {
    return this.recv_SyncTo();
  }
};

SessionSynchronizerClient.prototype.send_SyncTo = function(who, destState, callback) {
  var params = {
    who: who,
    destState: destState
  };
  var args = new SessionSynchronizer_SyncTo_args(params);
  try {
    this.output.writeMessageBegin('SyncTo', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_SyncTo();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

SessionSynchronizerClient.prototype.recv_SyncTo = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new SessionSynchronizer_SyncTo_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'SyncTo failed: unknown result';
};

SessionSynchronizerClient.prototype.CurrentState = function(who, callback) {
  this.send_CurrentState(who, callback); 
  if (!callback) {
    return this.recv_CurrentState();
  }
};

SessionSynchronizerClient.prototype.send_CurrentState = function(who, callback) {
  var params = {
    who: who
  };
  var args = new SessionSynchronizer_CurrentState_args(params);
  try {
    this.output.writeMessageBegin('CurrentState', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_CurrentState();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

SessionSynchronizerClient.prototype.recv_CurrentState = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new SessionSynchronizer_CurrentState_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'CurrentState failed: unknown result';
};

SessionSynchronizerClient.prototype.AllStates = function(callback) {
  this.send_AllStates(callback); 
  if (!callback) {
    return this.recv_AllStates();
  }
};

SessionSynchronizerClient.prototype.send_AllStates = function(callback) {
  var args = new SessionSynchronizer_AllStates_args();
  try {
    this.output.writeMessageBegin('AllStates', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_AllStates();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

SessionSynchronizerClient.prototype.recv_AllStates = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new SessionSynchronizer_AllStates_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'AllStates failed: unknown result';
};
