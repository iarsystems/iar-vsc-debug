//
// Autogenerated by Thrift Compiler (0.14.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
if (typeof Int64 === 'undefined' && typeof require === 'function') {
  var Int64 = require('node-int64');
}


//HELPER FUNCTIONS AND STRUCTURES

var CRunBackend_loadFilters_args = function(args) {
  this.filename = null;
  if (args) {
    if (args.filename !== undefined && args.filename !== null) {
      this.filename = args.filename;
    }
  }
};
CRunBackend_loadFilters_args.prototype = {};
CRunBackend_loadFilters_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.filename = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRunBackend_loadFilters_args.prototype.write = function(output) {
  output.writeStructBegin('CRunBackend_loadFilters_args');
  if (this.filename !== null && this.filename !== undefined) {
    output.writeFieldBegin('filename', Thrift.Type.STRING, 1);
    output.writeString(this.filename);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CRunBackend_loadFilters_result = function(args) {
};
CRunBackend_loadFilters_result.prototype = {};
CRunBackend_loadFilters_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRunBackend_loadFilters_result.prototype.write = function(output) {
  output.writeStructBegin('CRunBackend_loadFilters_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CRunBackend_saveFilters_args = function(args) {
  this.filename = null;
  if (args) {
    if (args.filename !== undefined && args.filename !== null) {
      this.filename = args.filename;
    }
  }
};
CRunBackend_saveFilters_args.prototype = {};
CRunBackend_saveFilters_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.filename = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRunBackend_saveFilters_args.prototype.write = function(output) {
  output.writeStructBegin('CRunBackend_saveFilters_args');
  if (this.filename !== null && this.filename !== undefined) {
    output.writeFieldBegin('filename', Thrift.Type.STRING, 1);
    output.writeString(this.filename);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CRunBackend_saveFilters_result = function(args) {
};
CRunBackend_saveFilters_result.prototype = {};
CRunBackend_saveFilters_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRunBackend_saveFilters_result.prototype.write = function(output) {
  output.writeStructBegin('CRunBackend_saveFilters_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CRunBackend_addRuleOnMessage_args = function(args) {
  this.messageName = null;
  if (args) {
    if (args.messageName !== undefined && args.messageName !== null) {
      this.messageName = args.messageName;
    }
  }
};
CRunBackend_addRuleOnMessage_args.prototype = {};
CRunBackend_addRuleOnMessage_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.messageName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRunBackend_addRuleOnMessage_args.prototype.write = function(output) {
  output.writeStructBegin('CRunBackend_addRuleOnMessage_args');
  if (this.messageName !== null && this.messageName !== undefined) {
    output.writeFieldBegin('messageName', Thrift.Type.STRING, 1);
    output.writeString(this.messageName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CRunBackend_addRuleOnMessage_result = function(args) {
};
CRunBackend_addRuleOnMessage_result.prototype = {};
CRunBackend_addRuleOnMessage_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRunBackend_addRuleOnMessage_result.prototype.write = function(output) {
  output.writeStructBegin('CRunBackend_addRuleOnMessage_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CRunBackend_addRuleOnMessageFile_args = function(args) {
  this.messageName = null;
  this.file = null;
  if (args) {
    if (args.messageName !== undefined && args.messageName !== null) {
      this.messageName = args.messageName;
    }
    if (args.file !== undefined && args.file !== null) {
      this.file = args.file;
    }
  }
};
CRunBackend_addRuleOnMessageFile_args.prototype = {};
CRunBackend_addRuleOnMessageFile_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.messageName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.file = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRunBackend_addRuleOnMessageFile_args.prototype.write = function(output) {
  output.writeStructBegin('CRunBackend_addRuleOnMessageFile_args');
  if (this.messageName !== null && this.messageName !== undefined) {
    output.writeFieldBegin('messageName', Thrift.Type.STRING, 1);
    output.writeString(this.messageName);
    output.writeFieldEnd();
  }
  if (this.file !== null && this.file !== undefined) {
    output.writeFieldBegin('file', Thrift.Type.STRING, 2);
    output.writeString(this.file);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CRunBackend_addRuleOnMessageFile_result = function(args) {
};
CRunBackend_addRuleOnMessageFile_result.prototype = {};
CRunBackend_addRuleOnMessageFile_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRunBackend_addRuleOnMessageFile_result.prototype.write = function(output) {
  output.writeStructBegin('CRunBackend_addRuleOnMessageFile_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CRunBackend_addRuleOnMessageRange_args = function(args) {
  this.messageName = null;
  this.range = null;
  if (args) {
    if (args.messageName !== undefined && args.messageName !== null) {
      this.messageName = args.messageName;
    }
    if (args.range !== undefined && args.range !== null) {
      this.range = new shared_ttypes.SourceRange(args.range);
    }
  }
};
CRunBackend_addRuleOnMessageRange_args.prototype = {};
CRunBackend_addRuleOnMessageRange_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.messageName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.range = new shared_ttypes.SourceRange();
        this.range.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRunBackend_addRuleOnMessageRange_args.prototype.write = function(output) {
  output.writeStructBegin('CRunBackend_addRuleOnMessageRange_args');
  if (this.messageName !== null && this.messageName !== undefined) {
    output.writeFieldBegin('messageName', Thrift.Type.STRING, 1);
    output.writeString(this.messageName);
    output.writeFieldEnd();
  }
  if (this.range !== null && this.range !== undefined) {
    output.writeFieldBegin('range', Thrift.Type.STRUCT, 2);
    this.range.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CRunBackend_addRuleOnMessageRange_result = function(args) {
};
CRunBackend_addRuleOnMessageRange_result.prototype = {};
CRunBackend_addRuleOnMessageRange_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRunBackend_addRuleOnMessageRange_result.prototype.write = function(output) {
  output.writeStructBegin('CRunBackend_addRuleOnMessageRange_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CRunBackend_setDefaultAction_args = function(args) {
  this.action = null;
  if (args) {
    if (args.action !== undefined && args.action !== null) {
      this.action = args.action;
    }
  }
};
CRunBackend_setDefaultAction_args.prototype = {};
CRunBackend_setDefaultAction_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.action = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRunBackend_setDefaultAction_args.prototype.write = function(output) {
  output.writeStructBegin('CRunBackend_setDefaultAction_args');
  if (this.action !== null && this.action !== undefined) {
    output.writeFieldBegin('action', Thrift.Type.I32, 1);
    output.writeI32(this.action);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CRunBackend_setDefaultAction_result = function(args) {
};
CRunBackend_setDefaultAction_result.prototype = {};
CRunBackend_setDefaultAction_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRunBackend_setDefaultAction_result.prototype.write = function(output) {
  output.writeStructBegin('CRunBackend_setDefaultAction_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CRunBackend_getDefaultAction_args = function(args) {
};
CRunBackend_getDefaultAction_args.prototype = {};
CRunBackend_getDefaultAction_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRunBackend_getDefaultAction_args.prototype.write = function(output) {
  output.writeStructBegin('CRunBackend_getDefaultAction_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CRunBackend_getDefaultAction_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
CRunBackend_getDefaultAction_result.prototype = {};
CRunBackend_getDefaultAction_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CRunBackend_getDefaultAction_result.prototype.write = function(output) {
  output.writeStructBegin('CRunBackend_getDefaultAction_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CRunBackendClient = exports.Client = function(input, output) {
  this.input = input;
  this.output = (!output) ? input : output;
  this.seqid = 0;
};
CRunBackendClient.prototype = {};

CRunBackendClient.prototype.loadFilters = function(filename, callback) {
  this.send_loadFilters(filename, callback); 
  if (!callback) {
  this.recv_loadFilters();
  }
};

CRunBackendClient.prototype.send_loadFilters = function(filename, callback) {
  var params = {
    filename: filename
  };
  var args = new CRunBackend_loadFilters_args(params);
  try {
    this.output.writeMessageBegin('loadFilters', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_loadFilters();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

CRunBackendClient.prototype.recv_loadFilters = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CRunBackend_loadFilters_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};

CRunBackendClient.prototype.saveFilters = function(filename, callback) {
  this.send_saveFilters(filename, callback); 
  if (!callback) {
  this.recv_saveFilters();
  }
};

CRunBackendClient.prototype.send_saveFilters = function(filename, callback) {
  var params = {
    filename: filename
  };
  var args = new CRunBackend_saveFilters_args(params);
  try {
    this.output.writeMessageBegin('saveFilters', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_saveFilters();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

CRunBackendClient.prototype.recv_saveFilters = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CRunBackend_saveFilters_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};

CRunBackendClient.prototype.addRuleOnMessage = function(messageName, callback) {
  this.send_addRuleOnMessage(messageName, callback); 
  if (!callback) {
  this.recv_addRuleOnMessage();
  }
};

CRunBackendClient.prototype.send_addRuleOnMessage = function(messageName, callback) {
  var params = {
    messageName: messageName
  };
  var args = new CRunBackend_addRuleOnMessage_args(params);
  try {
    this.output.writeMessageBegin('addRuleOnMessage', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_addRuleOnMessage();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

CRunBackendClient.prototype.recv_addRuleOnMessage = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CRunBackend_addRuleOnMessage_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};

CRunBackendClient.prototype.addRuleOnMessageFile = function(messageName, file, callback) {
  this.send_addRuleOnMessageFile(messageName, file, callback); 
  if (!callback) {
  this.recv_addRuleOnMessageFile();
  }
};

CRunBackendClient.prototype.send_addRuleOnMessageFile = function(messageName, file, callback) {
  var params = {
    messageName: messageName,
    file: file
  };
  var args = new CRunBackend_addRuleOnMessageFile_args(params);
  try {
    this.output.writeMessageBegin('addRuleOnMessageFile', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_addRuleOnMessageFile();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

CRunBackendClient.prototype.recv_addRuleOnMessageFile = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CRunBackend_addRuleOnMessageFile_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};

CRunBackendClient.prototype.addRuleOnMessageRange = function(messageName, range, callback) {
  this.send_addRuleOnMessageRange(messageName, range, callback); 
  if (!callback) {
  this.recv_addRuleOnMessageRange();
  }
};

CRunBackendClient.prototype.send_addRuleOnMessageRange = function(messageName, range, callback) {
  var params = {
    messageName: messageName,
    range: range
  };
  var args = new CRunBackend_addRuleOnMessageRange_args(params);
  try {
    this.output.writeMessageBegin('addRuleOnMessageRange', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_addRuleOnMessageRange();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

CRunBackendClient.prototype.recv_addRuleOnMessageRange = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CRunBackend_addRuleOnMessageRange_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};

CRunBackendClient.prototype.setDefaultAction = function(action, callback) {
  this.send_setDefaultAction(action, callback); 
  if (!callback) {
  this.recv_setDefaultAction();
  }
};

CRunBackendClient.prototype.send_setDefaultAction = function(action, callback) {
  var params = {
    action: action
  };
  var args = new CRunBackend_setDefaultAction_args(params);
  try {
    this.output.writeMessageBegin('setDefaultAction', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_setDefaultAction();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

CRunBackendClient.prototype.recv_setDefaultAction = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CRunBackend_setDefaultAction_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};

CRunBackendClient.prototype.getDefaultAction = function(callback) {
  this.send_getDefaultAction(callback); 
  if (!callback) {
    return this.recv_getDefaultAction();
  }
};

CRunBackendClient.prototype.send_getDefaultAction = function(callback) {
  var args = new CRunBackend_getDefaultAction_args();
  try {
    this.output.writeMessageBegin('getDefaultAction', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_getDefaultAction();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

CRunBackendClient.prototype.recv_getDefaultAction = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CRunBackend_getDefaultAction_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getDefaultAction failed: unknown result';
};
