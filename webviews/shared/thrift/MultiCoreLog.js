//
// Autogenerated by Thrift Compiler (0.14.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
if (typeof Int64 === 'undefined' && typeof require === 'function') {
  var Int64 = require('node-int64');
}


//HELPER FUNCTIONS AND STRUCTURES

var MultiCoreLog_Log_args = function(args) {
  this.cores = null;
  this.color = null;
  this.timeStamp = null;
  this.text = null;
  if (args) {
    if (args.cores !== undefined && args.cores !== null) {
      this.cores = new ttypes.CoreRange(args.cores);
    }
    if (args.color !== undefined && args.color !== null) {
      this.color = args.color;
    }
    if (args.timeStamp !== undefined && args.timeStamp !== null) {
      this.timeStamp = args.timeStamp;
    }
    if (args.text !== undefined && args.text !== null) {
      this.text = args.text;
    }
  }
};
MultiCoreLog_Log_args.prototype = {};
MultiCoreLog_Log_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.cores = new ttypes.CoreRange();
        this.cores.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.color = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.timeStamp = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.text = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MultiCoreLog_Log_args.prototype.write = function(output) {
  output.writeStructBegin('MultiCoreLog_Log_args');
  if (this.cores !== null && this.cores !== undefined) {
    output.writeFieldBegin('cores', Thrift.Type.STRUCT, 1);
    this.cores.write(output);
    output.writeFieldEnd();
  }
  if (this.color !== null && this.color !== undefined) {
    output.writeFieldBegin('color', Thrift.Type.I32, 2);
    output.writeI32(this.color);
    output.writeFieldEnd();
  }
  if (this.timeStamp !== null && this.timeStamp !== undefined) {
    output.writeFieldBegin('timeStamp', Thrift.Type.STRING, 3);
    output.writeString(this.timeStamp);
    output.writeFieldEnd();
  }
  if (this.text !== null && this.text !== undefined) {
    output.writeFieldBegin('text', Thrift.Type.STRING, 4);
    output.writeString(this.text);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MultiCoreLog_Log_result = function(args) {
};
MultiCoreLog_Log_result.prototype = {};
MultiCoreLog_Log_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MultiCoreLog_Log_result.prototype.write = function(output) {
  output.writeStructBegin('MultiCoreLog_Log_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MultiCoreLogClient = exports.Client = function(input, output) {
  this.input = input;
  this.output = (!output) ? input : output;
  this.seqid = 0;
};
MultiCoreLogClient.prototype = {};

MultiCoreLogClient.prototype.Log = function(cores, color, timeStamp, text, callback) {
  this.send_Log(cores, color, timeStamp, text, callback); 
  if (!callback) {
  this.recv_Log();
  }
};

MultiCoreLogClient.prototype.send_Log = function(cores, color, timeStamp, text, callback) {
  var params = {
    cores: cores,
    color: color,
    timeStamp: timeStamp,
    text: text
  };
  var args = new MultiCoreLog_Log_args(params);
  try {
    this.output.writeMessageBegin('Log', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_Log();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

MultiCoreLogClient.prototype.recv_Log = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MultiCoreLog_Log_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};
