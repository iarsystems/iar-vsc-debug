//
// Autogenerated by Thrift Compiler (0.14.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
if (typeof Int64 === 'undefined' && typeof require === 'function') {
  var Int64 = require('node-int64');
}


//HELPER FUNCTIONS AND STRUCTURES

var SymbolicMemory_setZone_args = function(args) {
  this.zone = null;
  if (args) {
    if (args.zone !== undefined && args.zone !== null) {
      this.zone = args.zone;
    }
  }
};
SymbolicMemory_setZone_args.prototype = {};
SymbolicMemory_setZone_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.zone = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SymbolicMemory_setZone_args.prototype.write = function(output) {
  output.writeStructBegin('SymbolicMemory_setZone_args');
  if (this.zone !== null && this.zone !== undefined) {
    output.writeFieldBegin('zone', Thrift.Type.STRING, 1);
    output.writeString(this.zone);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SymbolicMemory_setZone_result = function(args) {
};
SymbolicMemory_setZone_result.prototype = {};
SymbolicMemory_setZone_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SymbolicMemory_setZone_result.prototype.write = function(output) {
  output.writeStructBegin('SymbolicMemory_setZone_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SymbolicMemory_getZone_args = function(args) {
};
SymbolicMemory_getZone_args.prototype = {};
SymbolicMemory_getZone_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SymbolicMemory_getZone_args.prototype.write = function(output) {
  output.writeStructBegin('SymbolicMemory_getZone_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SymbolicMemory_getZone_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
SymbolicMemory_getZone_result.prototype = {};
SymbolicMemory_getZone_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SymbolicMemory_getZone_result.prototype.write = function(output) {
  output.writeStructBegin('SymbolicMemory_getZone_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SymbolicMemory_getZoneList_args = function(args) {
};
SymbolicMemory_getZoneList_args.prototype = {};
SymbolicMemory_getZoneList_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SymbolicMemory_getZoneList_args.prototype.write = function(output) {
  output.writeStructBegin('SymbolicMemory_getZoneList_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SymbolicMemory_getZoneList_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
  }
};
SymbolicMemory_getZoneList_result.prototype = {};
SymbolicMemory_getZoneList_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp356 = input.readListBegin();
        var _size55 = _rtmp356.size || 0;
        for (var _i57 = 0; _i57 < _size55; ++_i57) {
          var elem58 = null;
          elem58 = input.readString().value;
          this.success.push(elem58);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SymbolicMemory_getZoneList_result.prototype.write = function(output) {
  output.writeStructBegin('SymbolicMemory_getZoneList_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter59 in this.success) {
      if (this.success.hasOwnProperty(iter59)) {
        iter59 = this.success[iter59];
        output.writeString(iter59);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SymbolicMemory_nextSymbol_args = function(args) {
};
SymbolicMemory_nextSymbol_args.prototype = {};
SymbolicMemory_nextSymbol_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SymbolicMemory_nextSymbol_args.prototype.write = function(output) {
  output.writeStructBegin('SymbolicMemory_nextSymbol_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SymbolicMemory_nextSymbol_result = function(args) {
};
SymbolicMemory_nextSymbol_result.prototype = {};
SymbolicMemory_nextSymbol_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SymbolicMemory_nextSymbol_result.prototype.write = function(output) {
  output.writeStructBegin('SymbolicMemory_nextSymbol_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SymbolicMemory_prevSymbol_args = function(args) {
};
SymbolicMemory_prevSymbol_args.prototype = {};
SymbolicMemory_prevSymbol_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SymbolicMemory_prevSymbol_args.prototype.write = function(output) {
  output.writeStructBegin('SymbolicMemory_prevSymbol_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SymbolicMemory_prevSymbol_result = function(args) {
};
SymbolicMemory_prevSymbol_result.prototype = {};
SymbolicMemory_prevSymbol_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SymbolicMemory_prevSymbol_result.prototype.write = function(output) {
  output.writeStructBegin('SymbolicMemory_prevSymbol_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SymbolicMemory_navigate_args = function(args) {
  this.expr = null;
  if (args) {
    if (args.expr !== undefined && args.expr !== null) {
      this.expr = args.expr;
    }
  }
};
SymbolicMemory_navigate_args.prototype = {};
SymbolicMemory_navigate_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.expr = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SymbolicMemory_navigate_args.prototype.write = function(output) {
  output.writeStructBegin('SymbolicMemory_navigate_args');
  if (this.expr !== null && this.expr !== undefined) {
    output.writeFieldBegin('expr', Thrift.Type.STRING, 1);
    output.writeString(this.expr);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SymbolicMemory_navigate_result = function(args) {
};
SymbolicMemory_navigate_result.prototype = {};
SymbolicMemory_navigate_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SymbolicMemory_navigate_result.prototype.write = function(output) {
  output.writeStructBegin('SymbolicMemory_navigate_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SymbolicMemoryClient = exports.Client = function(input, output) {
  this.input = input;
  this.output = (!output) ? input : output;
  this.seqid = 0;
};
Thrift.inherits(SymbolicMemoryClient, ListWindowBackendClient);

SymbolicMemoryClient.prototype.setZone = function(zone, callback) {
  this.send_setZone(zone, callback); 
  if (!callback) {
  this.recv_setZone();
  }
};

SymbolicMemoryClient.prototype.send_setZone = function(zone, callback) {
  var params = {
    zone: zone
  };
  var args = new SymbolicMemory_setZone_args(params);
  try {
    this.output.writeMessageBegin('setZone', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_setZone();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

SymbolicMemoryClient.prototype.recv_setZone = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new SymbolicMemory_setZone_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};

SymbolicMemoryClient.prototype.getZone = function(callback) {
  this.send_getZone(callback); 
  if (!callback) {
    return this.recv_getZone();
  }
};

SymbolicMemoryClient.prototype.send_getZone = function(callback) {
  var args = new SymbolicMemory_getZone_args();
  try {
    this.output.writeMessageBegin('getZone', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_getZone();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

SymbolicMemoryClient.prototype.recv_getZone = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new SymbolicMemory_getZone_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getZone failed: unknown result';
};

SymbolicMemoryClient.prototype.getZoneList = function(callback) {
  this.send_getZoneList(callback); 
  if (!callback) {
    return this.recv_getZoneList();
  }
};

SymbolicMemoryClient.prototype.send_getZoneList = function(callback) {
  var args = new SymbolicMemory_getZoneList_args();
  try {
    this.output.writeMessageBegin('getZoneList', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_getZoneList();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

SymbolicMemoryClient.prototype.recv_getZoneList = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new SymbolicMemory_getZoneList_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getZoneList failed: unknown result';
};

SymbolicMemoryClient.prototype.nextSymbol = function(callback) {
  this.send_nextSymbol(callback); 
  if (!callback) {
  this.recv_nextSymbol();
  }
};

SymbolicMemoryClient.prototype.send_nextSymbol = function(callback) {
  var args = new SymbolicMemory_nextSymbol_args();
  try {
    this.output.writeMessageBegin('nextSymbol', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_nextSymbol();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

SymbolicMemoryClient.prototype.recv_nextSymbol = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new SymbolicMemory_nextSymbol_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};

SymbolicMemoryClient.prototype.prevSymbol = function(callback) {
  this.send_prevSymbol(callback); 
  if (!callback) {
  this.recv_prevSymbol();
  }
};

SymbolicMemoryClient.prototype.send_prevSymbol = function(callback) {
  var args = new SymbolicMemory_prevSymbol_args();
  try {
    this.output.writeMessageBegin('prevSymbol', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_prevSymbol();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

SymbolicMemoryClient.prototype.recv_prevSymbol = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new SymbolicMemory_prevSymbol_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};

SymbolicMemoryClient.prototype.navigate = function(expr, callback) {
  this.send_navigate(expr, callback); 
  if (!callback) {
  this.recv_navigate();
  }
};

SymbolicMemoryClient.prototype.send_navigate = function(expr, callback) {
  var params = {
    expr: expr
  };
  var args = new SymbolicMemory_navigate_args(params);
  try {
    this.output.writeMessageBegin('navigate', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_navigate();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

SymbolicMemoryClient.prototype.recv_navigate = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new SymbolicMemory_navigate_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};
