//
// Autogenerated by Thrift Compiler (0.14.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
if (typeof Int64 === 'undefined' && typeof require === 'function') {
  var Int64 = require('node-int64');
}


//HELPER FUNCTIONS AND STRUCTURES

var LogService_addCategory_args = function(args) {
  this.category = null;
  if (args) {
    if (args.category !== undefined && args.category !== null) {
      this.category = args.category;
    }
  }
};
LogService_addCategory_args.prototype = {};
LogService_addCategory_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.category = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LogService_addCategory_args.prototype.write = function(output) {
  output.writeStructBegin('LogService_addCategory_args');
  if (this.category !== null && this.category !== undefined) {
    output.writeFieldBegin('category', Thrift.Type.STRING, 1);
    output.writeString(this.category);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LogService_addCategory_result = function(args) {
};
LogService_addCategory_result.prototype = {};
LogService_addCategory_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LogService_addCategory_result.prototype.write = function(output) {
  output.writeStructBegin('LogService_addCategory_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LogService_removeCategory_args = function(args) {
  this.category = null;
  if (args) {
    if (args.category !== undefined && args.category !== null) {
      this.category = args.category;
    }
  }
};
LogService_removeCategory_args.prototype = {};
LogService_removeCategory_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.category = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LogService_removeCategory_args.prototype.write = function(output) {
  output.writeStructBegin('LogService_removeCategory_args');
  if (this.category !== null && this.category !== undefined) {
    output.writeFieldBegin('category', Thrift.Type.STRING, 1);
    output.writeString(this.category);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LogService_removeCategory_result = function(args) {
};
LogService_removeCategory_result.prototype = {};
LogService_removeCategory_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LogService_removeCategory_result.prototype.write = function(output) {
  output.writeStructBegin('LogService_removeCategory_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LogService_startSession_args = function(args) {
  this.category = null;
  if (args) {
    if (args.category !== undefined && args.category !== null) {
      this.category = args.category;
    }
  }
};
LogService_startSession_args.prototype = {};
LogService_startSession_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.category = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LogService_startSession_args.prototype.write = function(output) {
  output.writeStructBegin('LogService_startSession_args');
  if (this.category !== null && this.category !== undefined) {
    output.writeFieldBegin('category', Thrift.Type.STRING, 1);
    output.writeString(this.category);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LogService_startSession_result = function(args) {
};
LogService_startSession_result.prototype = {};
LogService_startSession_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LogService_startSession_result.prototype.write = function(output) {
  output.writeStructBegin('LogService_startSession_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LogService_postLogEntry_args = function(args) {
  this.entry = null;
  if (args) {
    if (args.entry !== undefined && args.entry !== null) {
      this.entry = new ttypes.LogEntry(args.entry);
    }
  }
};
LogService_postLogEntry_args.prototype = {};
LogService_postLogEntry_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.entry = new ttypes.LogEntry();
        this.entry.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LogService_postLogEntry_args.prototype.write = function(output) {
  output.writeStructBegin('LogService_postLogEntry_args');
  if (this.entry !== null && this.entry !== undefined) {
    output.writeFieldBegin('entry', Thrift.Type.STRUCT, 1);
    this.entry.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LogService_postLogEntry_result = function(args) {
};
LogService_postLogEntry_result.prototype = {};
LogService_postLogEntry_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LogService_postLogEntry_result.prototype.write = function(output) {
  output.writeStructBegin('LogService_postLogEntry_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LogServiceClient = exports.Client = function(input, output) {
  this.input = input;
  this.output = (!output) ? input : output;
  this.seqid = 0;
};
Thrift.inherits(LogServiceClient, HeartbeatServiceClient);

LogServiceClient.prototype.addCategory = function(category, callback) {
  this.send_addCategory(category, callback); 
  if (!callback) {
  this.recv_addCategory();
  }
};

LogServiceClient.prototype.send_addCategory = function(category, callback) {
  var params = {
    category: category
  };
  var args = new LogService_addCategory_args(params);
  try {
    this.output.writeMessageBegin('addCategory', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_addCategory();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

LogServiceClient.prototype.recv_addCategory = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new LogService_addCategory_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};

LogServiceClient.prototype.removeCategory = function(category, callback) {
  this.send_removeCategory(category, callback); 
  if (!callback) {
  this.recv_removeCategory();
  }
};

LogServiceClient.prototype.send_removeCategory = function(category, callback) {
  var params = {
    category: category
  };
  var args = new LogService_removeCategory_args(params);
  try {
    this.output.writeMessageBegin('removeCategory', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_removeCategory();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

LogServiceClient.prototype.recv_removeCategory = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new LogService_removeCategory_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};

LogServiceClient.prototype.startSession = function(category, callback) {
  this.send_startSession(category, callback); 
  if (!callback) {
  this.recv_startSession();
  }
};

LogServiceClient.prototype.send_startSession = function(category, callback) {
  var params = {
    category: category
  };
  var args = new LogService_startSession_args(params);
  try {
    this.output.writeMessageBegin('startSession', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_startSession();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

LogServiceClient.prototype.recv_startSession = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new LogService_startSession_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};

LogServiceClient.prototype.postLogEntry = function(entry, callback) {
  this.send_postLogEntry(entry, callback); 
  if (!callback) {
  this.recv_postLogEntry();
  }
};

LogServiceClient.prototype.send_postLogEntry = function(entry, callback) {
  var params = {
    entry: entry
  };
  var args = new LogService_postLogEntry_args(params);
  try {
    this.output.writeMessageBegin('postLogEntry', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_postLogEntry();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

LogServiceClient.prototype.recv_postLogEntry = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new LogService_postLogEntry_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};
