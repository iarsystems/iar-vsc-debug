//
// Autogenerated by Thrift Compiler (0.14.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
if (typeof Int64 === 'undefined' && typeof require === 'function') {
  var Int64 = require('node-int64');
}


//HELPER FUNCTIONS AND STRUCTURES

var ServiceListener_servicesChanged_args = function(args) {
  this.services = null;
  if (args) {
    if (args.services !== undefined && args.services !== null) {
      this.services = Thrift.copyMap(args.services, [ttypes.ServiceLocation]);
    }
  }
};
ServiceListener_servicesChanged_args.prototype = {};
ServiceListener_servicesChanged_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.MAP) {
        this.services = {};
        var _rtmp31 = input.readMapBegin();
        var _size0 = _rtmp31.size || 0;
        for (var _i2 = 0; _i2 < _size0; ++_i2) {
          if (_i2 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key3 = null;
          var val4 = null;
          key3 = input.readString().value;
          val4 = new ttypes.ServiceLocation();
          val4.read(input);
          this.services[key3] = val4;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ServiceListener_servicesChanged_args.prototype.write = function(output) {
  output.writeStructBegin('ServiceListener_servicesChanged_args');
  if (this.services !== null && this.services !== undefined) {
    output.writeFieldBegin('services', Thrift.Type.MAP, 1);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.services));
    for (var kiter5 in this.services) {
      if (this.services.hasOwnProperty(kiter5)) {
        var viter6 = this.services[kiter5];
        output.writeString(kiter5);
        viter6.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ServiceListener_servicesChanged_result = function(args) {
};
ServiceListener_servicesChanged_result.prototype = {};
ServiceListener_servicesChanged_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ServiceListener_servicesChanged_result.prototype.write = function(output) {
  output.writeStructBegin('ServiceListener_servicesChanged_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ServiceListenerClient = exports.Client = function(input, output) {
  this.input = input;
  this.output = (!output) ? input : output;
  this.seqid = 0;
};
ServiceListenerClient.prototype = {};

ServiceListenerClient.prototype.servicesChanged = function(services, callback) {
  this.send_servicesChanged(services, callback); 
};

ServiceListenerClient.prototype.send_servicesChanged = function(services, callback) {
  var params = {
    services: services
  };
  var args = new ServiceListener_servicesChanged_args(params);
  try {
    this.output.writeMessageBegin('servicesChanged', Thrift.MessageType.ONEWAY, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      this.output.getTransport().flush(true, null);
      callback();
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};
