/// <reference path="HeartbeatService.d.ts" />
//
// Autogenerated by Thrift Compiler (0.14.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//

import Int64 = require('node-int64');

import { ampsync } from "./ampsync_types";


export declare class Client extends HeartbeatService.Client {
  input: Thrift.TJSONProtocol;
  output: Thrift.TJSONProtocol;
  seqid: number;

  constructor(input: Thrift.TJSONProtocol, output?: Thrift.TJSONProtocol);

  NumberOfCores(): Q.Promise<number>;

  NumberOfCores(callback?: (data: number)=>void): void;

  AllCores(): Q.Promise<CoreInfo[]>;

  AllCores(callback?: (data: CoreInfo[])=>void): void;

  GetInfo(coreNumber: number): Q.Promise<CoreInfo>;

  GetInfo(coreNumber: number, callback?: (data: CoreInfo)=>void): void;

  SetInfo(updated: CoreInfo): Q.Promise<void>;

  SetInfo(updated: CoreInfo, callback?: (data: void)=>void): void;

  SetInfoPartial(updated: number, props: { [k: string]: string; }): Q.Promise<void>;

  SetInfoPartial(updated: number, props: { [k: string]: string; }, callback?: (data: void)=>void): void;

  PartnerCores(partner: number): Q.Promise<CoreRange>;

  PartnerCores(partner: number, callback?: (data: CoreRange)=>void): void;

  SetNumberOfCores(partner: number, numberOfCores: number): Q.Promise<CoreRange>;

  SetNumberOfCores(partner: number, numberOfCores: number, callback?: (data: CoreRange)=>void): void;

  ResetAfterDebugSession(): Q.Promise<void>;

  ResetAfterDebugSession(callback?: (data: void)=>void): void;
}
